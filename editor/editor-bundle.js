(function () {
    'use strict';

    function noop() { }
    function is_promise(value) {
        return value && typeof value === 'object' && typeof value.then === 'function';
    }
    function run(fn) {
        return fn();
    }
    function blank_object() {
        return Object.create(null);
    }
    function run_all(fns) {
        fns.forEach(run);
    }
    function is_function(thing) {
        return typeof thing === 'function';
    }
    function safe_not_equal(a, b) {
        return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');
    }

    function append(target, node) {
        target.appendChild(node);
    }
    function insert(target, node, anchor) {
        target.insertBefore(node, anchor || null);
    }
    function detach(node) {
        node.parentNode.removeChild(node);
    }
    function destroy_each(iterations, detaching) {
        for (let i = 0; i < iterations.length; i += 1) {
            if (iterations[i])
                iterations[i].d(detaching);
        }
    }
    function element(name) {
        return document.createElement(name);
    }
    function text(data) {
        return document.createTextNode(data);
    }
    function space() {
        return text(' ');
    }
    function empty() {
        return text('');
    }
    function listen(node, event, handler, options) {
        node.addEventListener(event, handler, options);
        return () => node.removeEventListener(event, handler, options);
    }
    function prevent_default(fn) {
        return function (event) {
            event.preventDefault();
            // @ts-ignore
            return fn.call(this, event);
        };
    }
    function stop_propagation(fn) {
        return function (event) {
            event.stopPropagation();
            // @ts-ignore
            return fn.call(this, event);
        };
    }
    function attr(node, attribute, value) {
        if (value == null)
            node.removeAttribute(attribute);
        else if (node.getAttribute(attribute) !== value)
            node.setAttribute(attribute, value);
    }
    function to_number(value) {
        return value === '' ? undefined : +value;
    }
    function children(element) {
        return Array.from(element.childNodes);
    }
    function set_data(text, data) {
        data = '' + data;
        if (text.data !== data)
            text.data = data;
    }
    function set_input_value(input, value) {
        input.value = value == null ? '' : value;
    }
    function set_style(node, key, value, important) {
        node.style.setProperty(key, value, important ? 'important' : '');
    }
    function toggle_class(element, name, toggle) {
        element.classList[toggle ? 'add' : 'remove'](name);
    }

    let current_component;
    function set_current_component(component) {
        current_component = component;
    }
    function get_current_component() {
        if (!current_component)
            throw new Error(`Function called outside component initialization`);
        return current_component;
    }
    function onMount(fn) {
        get_current_component().$$.on_mount.push(fn);
    }

    const dirty_components = [];
    const binding_callbacks = [];
    const render_callbacks = [];
    const flush_callbacks = [];
    const resolved_promise = Promise.resolve();
    let update_scheduled = false;
    function schedule_update() {
        if (!update_scheduled) {
            update_scheduled = true;
            resolved_promise.then(flush);
        }
    }
    function add_render_callback(fn) {
        render_callbacks.push(fn);
    }
    let flushing = false;
    const seen_callbacks = new Set();
    function flush() {
        if (flushing)
            return;
        flushing = true;
        do {
            // first, call beforeUpdate functions
            // and update components
            for (let i = 0; i < dirty_components.length; i += 1) {
                const component = dirty_components[i];
                set_current_component(component);
                update(component.$$);
            }
            dirty_components.length = 0;
            while (binding_callbacks.length)
                binding_callbacks.pop()();
            // then, once components are updated, call
            // afterUpdate functions. This may cause
            // subsequent updates...
            for (let i = 0; i < render_callbacks.length; i += 1) {
                const callback = render_callbacks[i];
                if (!seen_callbacks.has(callback)) {
                    // ...so guard against infinite loops
                    seen_callbacks.add(callback);
                    callback();
                }
            }
            render_callbacks.length = 0;
        } while (dirty_components.length);
        while (flush_callbacks.length) {
            flush_callbacks.pop()();
        }
        update_scheduled = false;
        flushing = false;
        seen_callbacks.clear();
    }
    function update($$) {
        if ($$.fragment !== null) {
            $$.update();
            run_all($$.before_update);
            const dirty = $$.dirty;
            $$.dirty = [-1];
            $$.fragment && $$.fragment.p($$.ctx, dirty);
            $$.after_update.forEach(add_render_callback);
        }
    }
    const outroing = new Set();
    let outros;
    function group_outros() {
        outros = {
            r: 0,
            c: [],
            p: outros // parent group
        };
    }
    function check_outros() {
        if (!outros.r) {
            run_all(outros.c);
        }
        outros = outros.p;
    }
    function transition_in(block, local) {
        if (block && block.i) {
            outroing.delete(block);
            block.i(local);
        }
    }
    function transition_out(block, local, detach, callback) {
        if (block && block.o) {
            if (outroing.has(block))
                return;
            outroing.add(block);
            outros.c.push(() => {
                outroing.delete(block);
                if (callback) {
                    if (detach)
                        block.d(1);
                    callback();
                }
            });
            block.o(local);
        }
    }

    function handle_promise(promise, info) {
        const token = info.token = {};
        function update(type, index, key, value) {
            if (info.token !== token)
                return;
            info.resolved = value;
            let child_ctx = info.ctx;
            if (key !== undefined) {
                child_ctx = child_ctx.slice();
                child_ctx[key] = value;
            }
            const block = type && (info.current = type)(child_ctx);
            let needs_flush = false;
            if (info.block) {
                if (info.blocks) {
                    info.blocks.forEach((block, i) => {
                        if (i !== index && block) {
                            group_outros();
                            transition_out(block, 1, 1, () => {
                                info.blocks[i] = null;
                            });
                            check_outros();
                        }
                    });
                }
                else {
                    info.block.d(1);
                }
                block.c();
                transition_in(block, 1);
                block.m(info.mount(), info.anchor);
                needs_flush = true;
            }
            info.block = block;
            if (info.blocks)
                info.blocks[index] = block;
            if (needs_flush) {
                flush();
            }
        }
        if (is_promise(promise)) {
            const current_component = get_current_component();
            promise.then(value => {
                set_current_component(current_component);
                update(info.then, 1, info.value, value);
                set_current_component(null);
            }, error => {
                set_current_component(current_component);
                update(info.catch, 2, info.error, error);
                set_current_component(null);
            });
            // if we previously had a then/catch block, destroy it
            if (info.current !== info.pending) {
                update(info.pending, 0);
                return true;
            }
        }
        else {
            if (info.current !== info.then) {
                update(info.then, 1, info.value, promise);
                return true;
            }
            info.resolved = promise;
        }
    }

    const globals = (typeof window !== 'undefined'
        ? window
        : typeof globalThis !== 'undefined'
            ? globalThis
            : global);
    function mount_component(component, target, anchor) {
        const { fragment, on_mount, on_destroy, after_update } = component.$$;
        fragment && fragment.m(target, anchor);
        // onMount happens before the initial afterUpdate
        add_render_callback(() => {
            const new_on_destroy = on_mount.map(run).filter(is_function);
            if (on_destroy) {
                on_destroy.push(...new_on_destroy);
            }
            else {
                // Edge case - component was destroyed immediately,
                // most likely as a result of a binding initialising
                run_all(new_on_destroy);
            }
            component.$$.on_mount = [];
        });
        after_update.forEach(add_render_callback);
    }
    function destroy_component(component, detaching) {
        const $$ = component.$$;
        if ($$.fragment !== null) {
            run_all($$.on_destroy);
            $$.fragment && $$.fragment.d(detaching);
            // TODO null out other refs, including component.$$ (but need to
            // preserve final state?)
            $$.on_destroy = $$.fragment = null;
            $$.ctx = [];
        }
    }
    function make_dirty(component, i) {
        if (component.$$.dirty[0] === -1) {
            dirty_components.push(component);
            schedule_update();
            component.$$.dirty.fill(0);
        }
        component.$$.dirty[(i / 31) | 0] |= (1 << (i % 31));
    }
    function init(component, options, instance, create_fragment, not_equal, props, dirty = [-1]) {
        const parent_component = current_component;
        set_current_component(component);
        const prop_values = options.props || {};
        const $$ = component.$$ = {
            fragment: null,
            ctx: null,
            // state
            props,
            update: noop,
            not_equal,
            bound: blank_object(),
            // lifecycle
            on_mount: [],
            on_destroy: [],
            before_update: [],
            after_update: [],
            context: new Map(parent_component ? parent_component.$$.context : []),
            // everything else
            callbacks: blank_object(),
            dirty
        };
        let ready = false;
        $$.ctx = instance
            ? instance(component, prop_values, (i, ret, ...rest) => {
                const value = rest.length ? rest[0] : ret;
                if ($$.ctx && not_equal($$.ctx[i], $$.ctx[i] = value)) {
                    if ($$.bound[i])
                        $$.bound[i](value);
                    if (ready)
                        make_dirty(component, i);
                }
                return ret;
            })
            : [];
        $$.update();
        ready = true;
        run_all($$.before_update);
        // `false` as a special case of no DOM component
        $$.fragment = create_fragment ? create_fragment($$.ctx) : false;
        if (options.target) {
            if (options.hydrate) {
                const nodes = children(options.target);
                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                $$.fragment && $$.fragment.l(nodes);
                nodes.forEach(detach);
            }
            else {
                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                $$.fragment && $$.fragment.c();
            }
            if (options.intro)
                transition_in(component.$$.fragment);
            mount_component(component, options.target, options.anchor);
            flush();
        }
        set_current_component(parent_component);
    }
    class SvelteComponent {
        $destroy() {
            destroy_component(this, 1);
            this.$destroy = noop;
        }
        $on(type, callback) {
            const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));
            callbacks.push(callback);
            return () => {
                const index = callbacks.indexOf(callback);
                if (index !== -1)
                    callbacks.splice(index, 1);
            };
        }
        $set() {
            // overridden by instance, if it has props
        }
    }

    // path to where the images are downloaded
    //const CARD_DATA = require("./scryfall-default-cards.json");

    function timeout() {
      return new Promise((resolve, reject) => {
        setTimeout(() => {
          resolve();
        }, 70);
      });
    }

    class MtgInterface {

      constructor() {
        this.__cache = {};
      }

      search(opts = {}) {
        // https://api.scryfall.com/cards/search?order=cmc&q=c%3Ared+pow%3D3 
        // https://scryfall.com/search?as=grid&order=name&q=myr+oracle%3Atoken+type%3Acreature+commander%3AWUBRG

        let baseurl;

        if (typeof opts != "string") {
          baseurl = `https://api.scryfall.com/cards/search?${opts.page?"page="+opts.page+"&":""}order=cmc&q=`;
          const queries = [];

          if (opts.name) {
            queries.push(opts.name);
          }

          if (opts.edhcolors && opts.edhcolors.size) {
            let cs = "";
            for (let color of opts.edhcolors) {
              color = color.toUpperCase();
              if (color === "C") {
                cs = "C";
                break;
              }
              cs += color;
            }
            queries.push("commander%3A" + cs);
          }


          if (opts.type) {
            let type = opts.type.trim().replace(/\s\s+/gm, " ").replace(/\s/gm, "+type%3A");
            queries.push("type%3A" + type);
          }
          if (opts.text) {
            let text = opts.text.trim().replace(/\s\s+/gm, " ").replace(/\s+/gm, "+oracle%3A");
            queries.push("oracle%3A" + text);
          }

          baseurl = baseurl + queries.join("+");
        } else {
          baseurl = opts;
        }
        console.log("searchquery", baseurl);
        return fetch(baseurl)
          .then(async response => {
            const a = await response.json();
            return a;
          })
          .then(response => {
            for (let c of response.data) {
              console.log("c", c);
              if (!c.image_uris) {
                if (c.card_faces) {
                  c.image_uris = c.card_faces[0].image_uris;
                  const biu = c.card_faces[1].image_uris;
                  c.backside = biu ? biu.border_crop || biu.normal : "";
                }
              }
              c.url = c ? c.image_uris.border_crop || c.image_uris.normal : "";
              c.cardmarket = (c.purchase_uris || {}).cardmarket || "";
              this.__cache[c.name] = c;
            }
            return response;
          })
          .catch(e => { console.log(e); return { code: "not_found", data: [] }; });

      }

      async cardByName(name) {
        if (this.__cache[name]) return this.__cache[name];
        await timeout();
        //https://api.scryfall.com/cards/named?fuzzy=aust+com 
        const fixed = name.replace(/\s/g, "+");
        const result = await fetch('https://api.scryfall.com/cards/named?fuzzy=' + fixed)
          .then(response => response.json()).catch(e => { console.log(e); return { code: "not_found" }; });

        this.__cache[name] = result;
        this.__cache[result.name] = result;
        return result;
        // .then(data => console.log(data));
        /* for (let card of CARD_DATA) {
           if (card.name.toLowerCase() == name.toLowerCase()) return card;
         }*/
      }

      async sort(deckString, update = () => {}) {
        deckString = deckString.replace(/#.*/gm, "");
        const deckRaw = deckString.trim().replace(/\((.*?)\)|([0-9]*\n)/g, "\n").replace(/\s*\n+\s*\n+/g, "\n").split("\n");

        let creatures = {};
        let spells = {};
        let lands = {};
        let maybe = [];
        const errors = [];


        let progress = 0;
        for (let card of deckRaw) {

          let count = Math.floor(((card.match(/(\d+)/) || [])[0] || 1));
          if (isNaN(count)) {
            count = 1;
          }
          progress++;

          if (card.trim().startsWith("//")) {
            maybe.push(card.trim());
            continue;
          }
          const name = card.replace(/(\d+)/, "").trim();
          if (!name) continue; // cant work with this data
          // search the according data
          try {
            let data = await this.cardByName(name);

            if (data.type_line.toLowerCase().includes("land")) {
              lands[data.name] = lands[data.name] || { data, count: 0, name: data.name };
              lands[data.name].count++;
            } else if (data.type_line.toLowerCase().includes("creature")) {
              creatures[data.name] = creatures[data.name] || { data, count: 0, name: data.name };
              creatures[data.name].count++;
            } else {
              spells[data.name] = spells[data.name] || { data, count: 0, name: data.name };
              spells[data.name].count++;
            }

          } catch (e) {
            errors.push(name);
          }
          update(progress, deckRaw.length);
        }

        creatures = Object.values(creatures).sort((a, b) => a.data.cmc > b.data.cmc ? 1 : -1);
        spells = Object.values(spells).sort((a, b) => a.data.cmc > b.data.cmc ? 1 : -1);
        lands = Object.values(lands).sort((a, b) => a.name > b.name ? 1 : -1);
        let output = "# Creatures";
        for (let cur of creatures) {
          output += "\n" + cur.count + " " + cur.name;
        }
        output += "\n\n# Spells";
        for (let cur of spells) {
          output += "\n" + cur.count + " " + cur.name;
        }

        output += "\n\n# Lands";
        for (let cur of lands) {
          output += "\n" + cur.count + " " + cur.name;
        }

        output += "\n\n# Maybe";
        for (let cur of maybe) {
          output += "\n//" + cur;
        }

        output += "\n\n# Not Found";
        for (let cur of errors) {
          output += "\n//" + cur.count + " " + cur.name;
        }


        return output;
      }


      /**
       * converts a deck string to a readable object
       * and downloads the img data on demand, if it does not exist
       *
       * @param {String} deckString the complete deck, copied from a site or e.g forge
       * @memberof MtgInterface
       */
      async createDeck(deckString, update = () => {}, sort = false) {
        // convert the deck string to an array







        let groups = [...deckString.match(/#(.*?)(\n|$)/g) || ["main"]];
        const deckRaw = deckString.trim().replace(/\((.*?)\)|([0-9]*\n)/g, "\n").replace(/\s*\n+\s*\n+/g, "\n").split("\n");
        if (!deckRaw) return [];
        if (!deckRaw[0].includes("#")) {
          if (groups[0] !== "main") {
            groups = ["main"].concat(groups);
          }
        } else {
          deckRaw.shift();
        }


        groups = groups.map(v => { return { deck: {}, name: v.replace("#", "").trim() } });

        let curGroup = 0;

        let progress = 0;
        let ignored = 0;
        // iterate each found card
        for (let card of deckRaw) {
          if (!card) continue;
          if (card.trim().startsWith("//")) continue;
          if (card.includes("#")) {
            curGroup++;
            if (curGroup > groups.length) curGroup = 0;
            continue;
          }
          progress++;

          const deck = groups[curGroup].deck;
          update(progress, deckRaw.length - groups.length + 1 - ignored);
          // extract the count from the string and free the name

          let count = Math.floor(((card.match(/(\d+)/) || [])[0] || 1));
          if (isNaN(count)) {
            count = 1;
          }
          const name = card.replace(/(\d+)/, "").trim();
          if (!name) continue; // cant work with this data
          // search the according data
          let data = await this.cardByName(name);

          if (data.name)
            deckString = deckString.replace(name, data.name);
          if (data.code == "not_found") {
            data = {
              image_uris: {},
              legalities: {},
              prices: { usd: 0 },
              mana_cost: "",
              cmc: 0,
              type_line: "land",
              purchase_uris: { cardmarket: "" }
            };
          }
          if (deck[name]) {
            deck[name].count += count;
          } else {
            // wrap data in easy readable format
            let backside = "";
            if (!data.image_uris) {
              if (data.card_faces) {
                data.image_uris = data.card_faces[0].image_uris;
                const biu = data.card_faces[1].image_uris;
                backside = biu ? biu.border_crop || biu.normal : "";
              }
              console.log("err", data);
            }

            const url = data ? data.image_uris.border_crop || data.image_uris.normal : "";
            deck[name] = {
              name,
              count,
              url,
              backside,
              data
            };
          }
        }
        let landCount = 0;
        const overallDevotion = {
          blue: 0,
          black: 0,
          red: 0,
          white: 0,
          green: 0,
          colorless: 0,
          generic: 0,
          sum: 0
        };
        const overallManaCurve = [];
        //mana_cost: "{W}{U}{B}{R}{G} {C}"

        let overallCount = 0;
        let overallCost = 0;

        let creatureCount = 0;
        let instantCount = 0;
        let sorceryCount = 0;
        let enchantmentCount = 0;
        let artifactCount = 0;

        //mana_cost.split("G").length - 1
        for (let group of groups) {

          group.cards = Object.values(group.deck);
          group.cards = group.cards.sort((a, b) => a.data.cmc > b.data.cmc ? 1 : -1);

          let count = 0;
          let cost = 0;
          const isMaybe = group.name.toLowerCase() == "maybe";


          const devotion = {
            blue: 0,
            black: 0,
            red: 0,
            white: 0,
            green: 0,
            colorless: 0,
            generic: 0,
            sum: 0
          };
          const manaCurve = [];
          for (let card of group.cards) {
            count += card.count;
            if (!isMaybe) {

              cost += parseFloat(card.data.prices.usd || 0) * card.count;

              if (card.data.type_line.toLowerCase().includes("land")) {
                landCount += card.count;
              } else {
                manaCurve[card.data.cmc || 0] = (manaCurve[card.data.cmc || 0] || 0) + card.count;
              }

              if (card.data.type_line.toLowerCase().includes("creature")) {
                creatureCount += card.count;
              }
              if (card.data.type_line.toLowerCase().includes("artifact")) {
                artifactCount += card.count;
              }
              if (card.data.type_line.toLowerCase().includes("enchantment")) {
                enchantmentCount += card.count;
              }
              if (card.data.type_line.toLowerCase().includes("instant")) {
                instantCount += card.count;
              }
              if (card.data.type_line.toLowerCase().includes("sorcery")) {
                sorceryCount += card.count;
              }
            }


            card.data.mana_cost = card.data.mana_cost || "";
            devotion.blue += (card.data.mana_cost.split("U").length - 1) * card.count;
            devotion.black += (card.data.mana_cost.split("B").length - 1) * card.count;
            devotion.red += (card.data.mana_cost.split("R").length - 1) * card.count;
            devotion.white += (card.data.mana_cost.split("W").length - 1) * card.count;
            devotion.green += (card.data.mana_cost.split("G").length - 1) * card.count;
            devotion.colorless += (card.data.mana_cost.split("C").length - 1) * card.count;
            devotion.generic += Math.floor(card.data.mana_cost.replace(/[^0-9.]/g, " ").trim().replace(/\s\s+/g, " ").split(" ").reduce((total, num) => Math.floor(total) + Math.floor(num))) * card.count;
            // devotion.generic += Math.floor(card.data.mana_cost.replace(/[^0-9.]/g, "") || 0) * card.count;
            devotion.sum = (devotion.sum || 0) + (Math.floor(card.data.cmc) * card.count); // devotion.blue + devotion.black + devotion.red + devotion.green + devotion.white + devotion.colorless + devotion.generic;
          }



          group.count = count;
          group.mana = devotion;
          group.cost = cost;

          group.manaCurve = manaCurve;
          for (let i = 0; i < manaCurve.length; i++) {
            manaCurve[i] = manaCurve[i] || 0;
            if (isMaybe) continue;
            overallManaCurve[i] = (overallManaCurve[i] || 0) + (manaCurve[i] || 0);
          }
          if (!isMaybe) {

            overallCost += cost;
            overallCount += count;

            overallDevotion.blue += devotion.blue;
            overallDevotion.black += devotion.black;
            overallDevotion.red += devotion.red;
            overallDevotion.white += devotion.white;
            overallDevotion.green += devotion.green;
            overallDevotion.colorless += devotion.colorless;

            overallDevotion.generic += devotion.generic;
            overallDevotion.sum += devotion.sum;
          }
        }

        for (let i = 0; i < overallManaCurve.length; i++) {
          overallManaCurve[i] = overallManaCurve[i] || 0;
        }

        let justDevotion = overallDevotion.blue + overallDevotion.black + overallDevotion.red + overallDevotion.white + overallDevotion.green + overallDevotion.colorless;
        justDevotion = justDevotion || 1;
        const manaProposal = {
          blue: overallDevotion.blue / justDevotion,
          black: overallDevotion.black / justDevotion,
          red: overallDevotion.red / justDevotion,
          white: overallDevotion.white / justDevotion,
          green: overallDevotion.green / justDevotion,
          colorless: overallDevotion.colorless / justDevotion,
        };

        groups["manaProposal"] = manaProposal;

        groups["landCount"] = landCount;
        groups["cardCount"] = overallCount;
        groups["averageMana"] = overallDevotion.sum / (overallCount - landCount);
        groups["cost"] = overallCost;
        groups["mana"] = overallDevotion;
        groups["corrected"] = deckString;
        groups["manaCurve"] = overallManaCurve;


        groups["creatureCount"] = creatureCount;
        groups["instantCount"] = instantCount;
        groups["sorceryCount"] = sorceryCount;
        groups["enchantmentCount"] = enchantmentCount;
        groups["artifactCount"] = artifactCount;
        return groups;
      }
    }


    var cardLoader = new MtgInterface();

    var global$1 = (typeof global !== "undefined" ? global :
                typeof self !== "undefined" ? self :
                typeof window !== "undefined" ? window : {});

    // shim for using process in browser
    // based off https://github.com/defunctzombie/node-process/blob/master/browser.js

    function defaultSetTimout() {
        throw new Error('setTimeout has not been defined');
    }
    function defaultClearTimeout () {
        throw new Error('clearTimeout has not been defined');
    }
    var cachedSetTimeout = defaultSetTimout;
    var cachedClearTimeout = defaultClearTimeout;
    if (typeof global$1.setTimeout === 'function') {
        cachedSetTimeout = setTimeout;
    }
    if (typeof global$1.clearTimeout === 'function') {
        cachedClearTimeout = clearTimeout;
    }

    function runTimeout(fun) {
        if (cachedSetTimeout === setTimeout) {
            //normal enviroments in sane situations
            return setTimeout(fun, 0);
        }
        // if setTimeout wasn't available but was latter defined
        if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
            cachedSetTimeout = setTimeout;
            return setTimeout(fun, 0);
        }
        try {
            // when when somebody has screwed with setTimeout but no I.E. maddness
            return cachedSetTimeout(fun, 0);
        } catch(e){
            try {
                // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
                return cachedSetTimeout.call(null, fun, 0);
            } catch(e){
                // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
                return cachedSetTimeout.call(this, fun, 0);
            }
        }


    }
    function runClearTimeout(marker) {
        if (cachedClearTimeout === clearTimeout) {
            //normal enviroments in sane situations
            return clearTimeout(marker);
        }
        // if clearTimeout wasn't available but was latter defined
        if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
            cachedClearTimeout = clearTimeout;
            return clearTimeout(marker);
        }
        try {
            // when when somebody has screwed with setTimeout but no I.E. maddness
            return cachedClearTimeout(marker);
        } catch (e){
            try {
                // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
                return cachedClearTimeout.call(null, marker);
            } catch (e){
                // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
                // Some versions of I.E. have different rules for clearTimeout vs setTimeout
                return cachedClearTimeout.call(this, marker);
            }
        }



    }
    var queue = [];
    var draining = false;
    var currentQueue;
    var queueIndex = -1;

    function cleanUpNextTick() {
        if (!draining || !currentQueue) {
            return;
        }
        draining = false;
        if (currentQueue.length) {
            queue = currentQueue.concat(queue);
        } else {
            queueIndex = -1;
        }
        if (queue.length) {
            drainQueue();
        }
    }

    function drainQueue() {
        if (draining) {
            return;
        }
        var timeout = runTimeout(cleanUpNextTick);
        draining = true;

        var len = queue.length;
        while(len) {
            currentQueue = queue;
            queue = [];
            while (++queueIndex < len) {
                if (currentQueue) {
                    currentQueue[queueIndex].run();
                }
            }
            queueIndex = -1;
            len = queue.length;
        }
        currentQueue = null;
        draining = false;
        runClearTimeout(timeout);
    }
    function nextTick(fun) {
        var args = new Array(arguments.length - 1);
        if (arguments.length > 1) {
            for (var i = 1; i < arguments.length; i++) {
                args[i - 1] = arguments[i];
            }
        }
        queue.push(new Item(fun, args));
        if (queue.length === 1 && !draining) {
            runTimeout(drainQueue);
        }
    }
    // v8 likes predictible objects
    function Item(fun, array) {
        this.fun = fun;
        this.array = array;
    }
    Item.prototype.run = function () {
        this.fun.apply(null, this.array);
    };
    var title = 'browser';
    var platform = 'browser';
    var browser = true;
    var env = {};
    var argv = [];
    var version = ''; // empty string to avoid regexp issues
    var versions = {};
    var release = {};
    var config = {};

    function noop$1() {}

    var on = noop$1;
    var addListener = noop$1;
    var once = noop$1;
    var off = noop$1;
    var removeListener = noop$1;
    var removeAllListeners = noop$1;
    var emit = noop$1;

    function binding(name) {
        throw new Error('process.binding is not supported');
    }

    function cwd () { return '/' }
    function chdir (dir) {
        throw new Error('process.chdir is not supported');
    }function umask() { return 0; }

    // from https://github.com/kumavis/browser-process-hrtime/blob/master/index.js
    var performance$1 = global$1.performance || {};
    var performanceNow =
      performance$1.now        ||
      performance$1.mozNow     ||
      performance$1.msNow      ||
      performance$1.oNow       ||
      performance$1.webkitNow  ||
      function(){ return (new Date()).getTime() };

    // generate timestamp or delta
    // see http://nodejs.org/api/process.html#process_process_hrtime
    function hrtime(previousTimestamp){
      var clocktime = performanceNow.call(performance$1)*1e-3;
      var seconds = Math.floor(clocktime);
      var nanoseconds = Math.floor((clocktime%1)*1e9);
      if (previousTimestamp) {
        seconds = seconds - previousTimestamp[0];
        nanoseconds = nanoseconds - previousTimestamp[1];
        if (nanoseconds<0) {
          seconds--;
          nanoseconds += 1e9;
        }
      }
      return [seconds,nanoseconds]
    }

    var startTime = new Date();
    function uptime() {
      var currentTime = new Date();
      var dif = currentTime - startTime;
      return dif / 1000;
    }

    var process = {
      nextTick: nextTick,
      title: title,
      browser: browser,
      env: env,
      argv: argv,
      version: version,
      versions: versions,
      on: on,
      addListener: addListener,
      once: once,
      off: off,
      removeListener: removeListener,
      removeAllListeners: removeAllListeners,
      emit: emit,
      binding: binding,
      cwd: cwd,
      chdir: chdir,
      umask: umask,
      hrtime: hrtime,
      platform: platform,
      release: release,
      config: config,
      uptime: uptime
    };

    var lookup = [];
    var revLookup = [];
    var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array;
    var inited = false;
    function init$1 () {
      inited = true;
      var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
      for (var i = 0, len = code.length; i < len; ++i) {
        lookup[i] = code[i];
        revLookup[code.charCodeAt(i)] = i;
      }

      revLookup['-'.charCodeAt(0)] = 62;
      revLookup['_'.charCodeAt(0)] = 63;
    }

    function toByteArray (b64) {
      if (!inited) {
        init$1();
      }
      var i, j, l, tmp, placeHolders, arr;
      var len = b64.length;

      if (len % 4 > 0) {
        throw new Error('Invalid string. Length must be a multiple of 4')
      }

      // the number of equal signs (place holders)
      // if there are two placeholders, than the two characters before it
      // represent one byte
      // if there is only one, then the three characters before it represent 2 bytes
      // this is just a cheap hack to not do indexOf twice
      placeHolders = b64[len - 2] === '=' ? 2 : b64[len - 1] === '=' ? 1 : 0;

      // base64 is 4/3 + up to two characters of the original data
      arr = new Arr(len * 3 / 4 - placeHolders);

      // if there are placeholders, only get up to the last complete 4 chars
      l = placeHolders > 0 ? len - 4 : len;

      var L = 0;

      for (i = 0, j = 0; i < l; i += 4, j += 3) {
        tmp = (revLookup[b64.charCodeAt(i)] << 18) | (revLookup[b64.charCodeAt(i + 1)] << 12) | (revLookup[b64.charCodeAt(i + 2)] << 6) | revLookup[b64.charCodeAt(i + 3)];
        arr[L++] = (tmp >> 16) & 0xFF;
        arr[L++] = (tmp >> 8) & 0xFF;
        arr[L++] = tmp & 0xFF;
      }

      if (placeHolders === 2) {
        tmp = (revLookup[b64.charCodeAt(i)] << 2) | (revLookup[b64.charCodeAt(i + 1)] >> 4);
        arr[L++] = tmp & 0xFF;
      } else if (placeHolders === 1) {
        tmp = (revLookup[b64.charCodeAt(i)] << 10) | (revLookup[b64.charCodeAt(i + 1)] << 4) | (revLookup[b64.charCodeAt(i + 2)] >> 2);
        arr[L++] = (tmp >> 8) & 0xFF;
        arr[L++] = tmp & 0xFF;
      }

      return arr
    }

    function tripletToBase64 (num) {
      return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F]
    }

    function encodeChunk (uint8, start, end) {
      var tmp;
      var output = [];
      for (var i = start; i < end; i += 3) {
        tmp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2]);
        output.push(tripletToBase64(tmp));
      }
      return output.join('')
    }

    function fromByteArray (uint8) {
      if (!inited) {
        init$1();
      }
      var tmp;
      var len = uint8.length;
      var extraBytes = len % 3; // if we have 1 byte left, pad 2 bytes
      var output = '';
      var parts = [];
      var maxChunkLength = 16383; // must be multiple of 3

      // go through the array every three bytes, we'll deal with trailing stuff later
      for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
        parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)));
      }

      // pad the end with zeros, but make sure to not forget the extra bytes
      if (extraBytes === 1) {
        tmp = uint8[len - 1];
        output += lookup[tmp >> 2];
        output += lookup[(tmp << 4) & 0x3F];
        output += '==';
      } else if (extraBytes === 2) {
        tmp = (uint8[len - 2] << 8) + (uint8[len - 1]);
        output += lookup[tmp >> 10];
        output += lookup[(tmp >> 4) & 0x3F];
        output += lookup[(tmp << 2) & 0x3F];
        output += '=';
      }

      parts.push(output);

      return parts.join('')
    }

    var base64 = /*#__PURE__*/Object.freeze({
        toByteArray: toByteArray,
        fromByteArray: fromByteArray
    });

    function read (buffer, offset, isLE, mLen, nBytes) {
      var e, m;
      var eLen = nBytes * 8 - mLen - 1;
      var eMax = (1 << eLen) - 1;
      var eBias = eMax >> 1;
      var nBits = -7;
      var i = isLE ? (nBytes - 1) : 0;
      var d = isLE ? -1 : 1;
      var s = buffer[offset + i];

      i += d;

      e = s & ((1 << (-nBits)) - 1);
      s >>= (-nBits);
      nBits += eLen;
      for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}

      m = e & ((1 << (-nBits)) - 1);
      e >>= (-nBits);
      nBits += mLen;
      for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}

      if (e === 0) {
        e = 1 - eBias;
      } else if (e === eMax) {
        return m ? NaN : ((s ? -1 : 1) * Infinity)
      } else {
        m = m + Math.pow(2, mLen);
        e = e - eBias;
      }
      return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
    }

    function write (buffer, value, offset, isLE, mLen, nBytes) {
      var e, m, c;
      var eLen = nBytes * 8 - mLen - 1;
      var eMax = (1 << eLen) - 1;
      var eBias = eMax >> 1;
      var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0);
      var i = isLE ? 0 : (nBytes - 1);
      var d = isLE ? 1 : -1;
      var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0;

      value = Math.abs(value);

      if (isNaN(value) || value === Infinity) {
        m = isNaN(value) ? 1 : 0;
        e = eMax;
      } else {
        e = Math.floor(Math.log(value) / Math.LN2);
        if (value * (c = Math.pow(2, -e)) < 1) {
          e--;
          c *= 2;
        }
        if (e + eBias >= 1) {
          value += rt / c;
        } else {
          value += rt * Math.pow(2, 1 - eBias);
        }
        if (value * c >= 2) {
          e++;
          c /= 2;
        }

        if (e + eBias >= eMax) {
          m = 0;
          e = eMax;
        } else if (e + eBias >= 1) {
          m = (value * c - 1) * Math.pow(2, mLen);
          e = e + eBias;
        } else {
          m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
          e = 0;
        }
      }

      for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

      e = (e << mLen) | m;
      eLen += mLen;
      for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

      buffer[offset + i - d] |= s * 128;
    }

    var toString = {}.toString;

    var isArray = Array.isArray || function (arr) {
      return toString.call(arr) == '[object Array]';
    };

    var INSPECT_MAX_BYTES = 50;

    /**
     * If `Buffer.TYPED_ARRAY_SUPPORT`:
     *   === true    Use Uint8Array implementation (fastest)
     *   === false   Use Object implementation (most compatible, even IE6)
     *
     * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
     * Opera 11.6+, iOS 4.2+.
     *
     * Due to various browser bugs, sometimes the Object implementation will be used even
     * when the browser supports typed arrays.
     *
     * Note:
     *
     *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
     *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
     *
     *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
     *
     *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
     *     incorrect length in some situations.

     * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
     * get the Object implementation, which is slower but behaves correctly.
     */
    Buffer.TYPED_ARRAY_SUPPORT = global$1.TYPED_ARRAY_SUPPORT !== undefined
      ? global$1.TYPED_ARRAY_SUPPORT
      : true;

    function kMaxLength () {
      return Buffer.TYPED_ARRAY_SUPPORT
        ? 0x7fffffff
        : 0x3fffffff
    }

    function createBuffer (that, length) {
      if (kMaxLength() < length) {
        throw new RangeError('Invalid typed array length')
      }
      if (Buffer.TYPED_ARRAY_SUPPORT) {
        // Return an augmented `Uint8Array` instance, for best performance
        that = new Uint8Array(length);
        that.__proto__ = Buffer.prototype;
      } else {
        // Fallback: Return an object instance of the Buffer class
        if (that === null) {
          that = new Buffer(length);
        }
        that.length = length;
      }

      return that
    }

    /**
     * The Buffer constructor returns instances of `Uint8Array` that have their
     * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
     * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
     * and the `Uint8Array` methods. Square bracket notation works as expected -- it
     * returns a single octet.
     *
     * The `Uint8Array` prototype remains unmodified.
     */

    function Buffer (arg, encodingOrOffset, length) {
      if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {
        return new Buffer(arg, encodingOrOffset, length)
      }

      // Common case.
      if (typeof arg === 'number') {
        if (typeof encodingOrOffset === 'string') {
          throw new Error(
            'If encoding is specified then the first argument must be a string'
          )
        }
        return allocUnsafe(this, arg)
      }
      return from(this, arg, encodingOrOffset, length)
    }

    Buffer.poolSize = 8192; // not used by this implementation

    // TODO: Legacy, not needed anymore. Remove in next major version.
    Buffer._augment = function (arr) {
      arr.__proto__ = Buffer.prototype;
      return arr
    };

    function from (that, value, encodingOrOffset, length) {
      if (typeof value === 'number') {
        throw new TypeError('"value" argument must not be a number')
      }

      if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {
        return fromArrayBuffer(that, value, encodingOrOffset, length)
      }

      if (typeof value === 'string') {
        return fromString(that, value, encodingOrOffset)
      }

      return fromObject(that, value)
    }

    /**
     * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
     * if value is a number.
     * Buffer.from(str[, encoding])
     * Buffer.from(array)
     * Buffer.from(buffer)
     * Buffer.from(arrayBuffer[, byteOffset[, length]])
     **/
    Buffer.from = function (value, encodingOrOffset, length) {
      return from(null, value, encodingOrOffset, length)
    };

    if (Buffer.TYPED_ARRAY_SUPPORT) {
      Buffer.prototype.__proto__ = Uint8Array.prototype;
      Buffer.__proto__ = Uint8Array;
    }

    function assertSize (size) {
      if (typeof size !== 'number') {
        throw new TypeError('"size" argument must be a number')
      } else if (size < 0) {
        throw new RangeError('"size" argument must not be negative')
      }
    }

    function alloc (that, size, fill, encoding) {
      assertSize(size);
      if (size <= 0) {
        return createBuffer(that, size)
      }
      if (fill !== undefined) {
        // Only pay attention to encoding if it's a string. This
        // prevents accidentally sending in a number that would
        // be interpretted as a start offset.
        return typeof encoding === 'string'
          ? createBuffer(that, size).fill(fill, encoding)
          : createBuffer(that, size).fill(fill)
      }
      return createBuffer(that, size)
    }

    /**
     * Creates a new filled Buffer instance.
     * alloc(size[, fill[, encoding]])
     **/
    Buffer.alloc = function (size, fill, encoding) {
      return alloc(null, size, fill, encoding)
    };

    function allocUnsafe (that, size) {
      assertSize(size);
      that = createBuffer(that, size < 0 ? 0 : checked(size) | 0);
      if (!Buffer.TYPED_ARRAY_SUPPORT) {
        for (var i = 0; i < size; ++i) {
          that[i] = 0;
        }
      }
      return that
    }

    /**
     * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
     * */
    Buffer.allocUnsafe = function (size) {
      return allocUnsafe(null, size)
    };
    /**
     * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
     */
    Buffer.allocUnsafeSlow = function (size) {
      return allocUnsafe(null, size)
    };

    function fromString (that, string, encoding) {
      if (typeof encoding !== 'string' || encoding === '') {
        encoding = 'utf8';
      }

      if (!Buffer.isEncoding(encoding)) {
        throw new TypeError('"encoding" must be a valid string encoding')
      }

      var length = byteLength(string, encoding) | 0;
      that = createBuffer(that, length);

      var actual = that.write(string, encoding);

      if (actual !== length) {
        // Writing a hex string, for example, that contains invalid characters will
        // cause everything after the first invalid character to be ignored. (e.g.
        // 'abxxcd' will be treated as 'ab')
        that = that.slice(0, actual);
      }

      return that
    }

    function fromArrayLike (that, array) {
      var length = array.length < 0 ? 0 : checked(array.length) | 0;
      that = createBuffer(that, length);
      for (var i = 0; i < length; i += 1) {
        that[i] = array[i] & 255;
      }
      return that
    }

    function fromArrayBuffer (that, array, byteOffset, length) {
      array.byteLength; // this throws if `array` is not a valid ArrayBuffer

      if (byteOffset < 0 || array.byteLength < byteOffset) {
        throw new RangeError('\'offset\' is out of bounds')
      }

      if (array.byteLength < byteOffset + (length || 0)) {
        throw new RangeError('\'length\' is out of bounds')
      }

      if (byteOffset === undefined && length === undefined) {
        array = new Uint8Array(array);
      } else if (length === undefined) {
        array = new Uint8Array(array, byteOffset);
      } else {
        array = new Uint8Array(array, byteOffset, length);
      }

      if (Buffer.TYPED_ARRAY_SUPPORT) {
        // Return an augmented `Uint8Array` instance, for best performance
        that = array;
        that.__proto__ = Buffer.prototype;
      } else {
        // Fallback: Return an object instance of the Buffer class
        that = fromArrayLike(that, array);
      }
      return that
    }

    function fromObject (that, obj) {
      if (internalIsBuffer(obj)) {
        var len = checked(obj.length) | 0;
        that = createBuffer(that, len);

        if (that.length === 0) {
          return that
        }

        obj.copy(that, 0, 0, len);
        return that
      }

      if (obj) {
        if ((typeof ArrayBuffer !== 'undefined' &&
            obj.buffer instanceof ArrayBuffer) || 'length' in obj) {
          if (typeof obj.length !== 'number' || isnan(obj.length)) {
            return createBuffer(that, 0)
          }
          return fromArrayLike(that, obj)
        }

        if (obj.type === 'Buffer' && isArray(obj.data)) {
          return fromArrayLike(that, obj.data)
        }
      }

      throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')
    }

    function checked (length) {
      // Note: cannot use `length < kMaxLength()` here because that fails when
      // length is NaN (which is otherwise coerced to zero.)
      if (length >= kMaxLength()) {
        throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
                             'size: 0x' + kMaxLength().toString(16) + ' bytes')
      }
      return length | 0
    }
    Buffer.isBuffer = isBuffer;
    function internalIsBuffer (b) {
      return !!(b != null && b._isBuffer)
    }

    Buffer.compare = function compare (a, b) {
      if (!internalIsBuffer(a) || !internalIsBuffer(b)) {
        throw new TypeError('Arguments must be Buffers')
      }

      if (a === b) return 0

      var x = a.length;
      var y = b.length;

      for (var i = 0, len = Math.min(x, y); i < len; ++i) {
        if (a[i] !== b[i]) {
          x = a[i];
          y = b[i];
          break
        }
      }

      if (x < y) return -1
      if (y < x) return 1
      return 0
    };

    Buffer.isEncoding = function isEncoding (encoding) {
      switch (String(encoding).toLowerCase()) {
        case 'hex':
        case 'utf8':
        case 'utf-8':
        case 'ascii':
        case 'latin1':
        case 'binary':
        case 'base64':
        case 'ucs2':
        case 'ucs-2':
        case 'utf16le':
        case 'utf-16le':
          return true
        default:
          return false
      }
    };

    Buffer.concat = function concat (list, length) {
      if (!isArray(list)) {
        throw new TypeError('"list" argument must be an Array of Buffers')
      }

      if (list.length === 0) {
        return Buffer.alloc(0)
      }

      var i;
      if (length === undefined) {
        length = 0;
        for (i = 0; i < list.length; ++i) {
          length += list[i].length;
        }
      }

      var buffer = Buffer.allocUnsafe(length);
      var pos = 0;
      for (i = 0; i < list.length; ++i) {
        var buf = list[i];
        if (!internalIsBuffer(buf)) {
          throw new TypeError('"list" argument must be an Array of Buffers')
        }
        buf.copy(buffer, pos);
        pos += buf.length;
      }
      return buffer
    };

    function byteLength (string, encoding) {
      if (internalIsBuffer(string)) {
        return string.length
      }
      if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&
          (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {
        return string.byteLength
      }
      if (typeof string !== 'string') {
        string = '' + string;
      }

      var len = string.length;
      if (len === 0) return 0

      // Use a for loop to avoid recursion
      var loweredCase = false;
      for (;;) {
        switch (encoding) {
          case 'ascii':
          case 'latin1':
          case 'binary':
            return len
          case 'utf8':
          case 'utf-8':
          case undefined:
            return utf8ToBytes(string).length
          case 'ucs2':
          case 'ucs-2':
          case 'utf16le':
          case 'utf-16le':
            return len * 2
          case 'hex':
            return len >>> 1
          case 'base64':
            return base64ToBytes(string).length
          default:
            if (loweredCase) return utf8ToBytes(string).length // assume utf8
            encoding = ('' + encoding).toLowerCase();
            loweredCase = true;
        }
      }
    }
    Buffer.byteLength = byteLength;

    function slowToString (encoding, start, end) {
      var loweredCase = false;

      // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
      // property of a typed array.

      // This behaves neither like String nor Uint8Array in that we set start/end
      // to their upper/lower bounds if the value passed is out of range.
      // undefined is handled specially as per ECMA-262 6th Edition,
      // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
      if (start === undefined || start < 0) {
        start = 0;
      }
      // Return early if start > this.length. Done here to prevent potential uint32
      // coercion fail below.
      if (start > this.length) {
        return ''
      }

      if (end === undefined || end > this.length) {
        end = this.length;
      }

      if (end <= 0) {
        return ''
      }

      // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
      end >>>= 0;
      start >>>= 0;

      if (end <= start) {
        return ''
      }

      if (!encoding) encoding = 'utf8';

      while (true) {
        switch (encoding) {
          case 'hex':
            return hexSlice(this, start, end)

          case 'utf8':
          case 'utf-8':
            return utf8Slice(this, start, end)

          case 'ascii':
            return asciiSlice(this, start, end)

          case 'latin1':
          case 'binary':
            return latin1Slice(this, start, end)

          case 'base64':
            return base64Slice(this, start, end)

          case 'ucs2':
          case 'ucs-2':
          case 'utf16le':
          case 'utf-16le':
            return utf16leSlice(this, start, end)

          default:
            if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
            encoding = (encoding + '').toLowerCase();
            loweredCase = true;
        }
      }
    }

    // The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect
    // Buffer instances.
    Buffer.prototype._isBuffer = true;

    function swap (b, n, m) {
      var i = b[n];
      b[n] = b[m];
      b[m] = i;
    }

    Buffer.prototype.swap16 = function swap16 () {
      var len = this.length;
      if (len % 2 !== 0) {
        throw new RangeError('Buffer size must be a multiple of 16-bits')
      }
      for (var i = 0; i < len; i += 2) {
        swap(this, i, i + 1);
      }
      return this
    };

    Buffer.prototype.swap32 = function swap32 () {
      var len = this.length;
      if (len % 4 !== 0) {
        throw new RangeError('Buffer size must be a multiple of 32-bits')
      }
      for (var i = 0; i < len; i += 4) {
        swap(this, i, i + 3);
        swap(this, i + 1, i + 2);
      }
      return this
    };

    Buffer.prototype.swap64 = function swap64 () {
      var len = this.length;
      if (len % 8 !== 0) {
        throw new RangeError('Buffer size must be a multiple of 64-bits')
      }
      for (var i = 0; i < len; i += 8) {
        swap(this, i, i + 7);
        swap(this, i + 1, i + 6);
        swap(this, i + 2, i + 5);
        swap(this, i + 3, i + 4);
      }
      return this
    };

    Buffer.prototype.toString = function toString () {
      var length = this.length | 0;
      if (length === 0) return ''
      if (arguments.length === 0) return utf8Slice(this, 0, length)
      return slowToString.apply(this, arguments)
    };

    Buffer.prototype.equals = function equals (b) {
      if (!internalIsBuffer(b)) throw new TypeError('Argument must be a Buffer')
      if (this === b) return true
      return Buffer.compare(this, b) === 0
    };

    Buffer.prototype.inspect = function inspect () {
      var str = '';
      var max = INSPECT_MAX_BYTES;
      if (this.length > 0) {
        str = this.toString('hex', 0, max).match(/.{2}/g).join(' ');
        if (this.length > max) str += ' ... ';
      }
      return '<Buffer ' + str + '>'
    };

    Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
      if (!internalIsBuffer(target)) {
        throw new TypeError('Argument must be a Buffer')
      }

      if (start === undefined) {
        start = 0;
      }
      if (end === undefined) {
        end = target ? target.length : 0;
      }
      if (thisStart === undefined) {
        thisStart = 0;
      }
      if (thisEnd === undefined) {
        thisEnd = this.length;
      }

      if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
        throw new RangeError('out of range index')
      }

      if (thisStart >= thisEnd && start >= end) {
        return 0
      }
      if (thisStart >= thisEnd) {
        return -1
      }
      if (start >= end) {
        return 1
      }

      start >>>= 0;
      end >>>= 0;
      thisStart >>>= 0;
      thisEnd >>>= 0;

      if (this === target) return 0

      var x = thisEnd - thisStart;
      var y = end - start;
      var len = Math.min(x, y);

      var thisCopy = this.slice(thisStart, thisEnd);
      var targetCopy = target.slice(start, end);

      for (var i = 0; i < len; ++i) {
        if (thisCopy[i] !== targetCopy[i]) {
          x = thisCopy[i];
          y = targetCopy[i];
          break
        }
      }

      if (x < y) return -1
      if (y < x) return 1
      return 0
    };

    // Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
    // OR the last index of `val` in `buffer` at offset <= `byteOffset`.
    //
    // Arguments:
    // - buffer - a Buffer to search
    // - val - a string, Buffer, or number
    // - byteOffset - an index into `buffer`; will be clamped to an int32
    // - encoding - an optional encoding, relevant is val is a string
    // - dir - true for indexOf, false for lastIndexOf
    function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
      // Empty buffer means no match
      if (buffer.length === 0) return -1

      // Normalize byteOffset
      if (typeof byteOffset === 'string') {
        encoding = byteOffset;
        byteOffset = 0;
      } else if (byteOffset > 0x7fffffff) {
        byteOffset = 0x7fffffff;
      } else if (byteOffset < -0x80000000) {
        byteOffset = -0x80000000;
      }
      byteOffset = +byteOffset;  // Coerce to Number.
      if (isNaN(byteOffset)) {
        // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
        byteOffset = dir ? 0 : (buffer.length - 1);
      }

      // Normalize byteOffset: negative offsets start from the end of the buffer
      if (byteOffset < 0) byteOffset = buffer.length + byteOffset;
      if (byteOffset >= buffer.length) {
        if (dir) return -1
        else byteOffset = buffer.length - 1;
      } else if (byteOffset < 0) {
        if (dir) byteOffset = 0;
        else return -1
      }

      // Normalize val
      if (typeof val === 'string') {
        val = Buffer.from(val, encoding);
      }

      // Finally, search either indexOf (if dir is true) or lastIndexOf
      if (internalIsBuffer(val)) {
        // Special case: looking for empty string/buffer always fails
        if (val.length === 0) {
          return -1
        }
        return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
      } else if (typeof val === 'number') {
        val = val & 0xFF; // Search for a byte value [0-255]
        if (Buffer.TYPED_ARRAY_SUPPORT &&
            typeof Uint8Array.prototype.indexOf === 'function') {
          if (dir) {
            return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
          } else {
            return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
          }
        }
        return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)
      }

      throw new TypeError('val must be string, number or Buffer')
    }

    function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
      var indexSize = 1;
      var arrLength = arr.length;
      var valLength = val.length;

      if (encoding !== undefined) {
        encoding = String(encoding).toLowerCase();
        if (encoding === 'ucs2' || encoding === 'ucs-2' ||
            encoding === 'utf16le' || encoding === 'utf-16le') {
          if (arr.length < 2 || val.length < 2) {
            return -1
          }
          indexSize = 2;
          arrLength /= 2;
          valLength /= 2;
          byteOffset /= 2;
        }
      }

      function read (buf, i) {
        if (indexSize === 1) {
          return buf[i]
        } else {
          return buf.readUInt16BE(i * indexSize)
        }
      }

      var i;
      if (dir) {
        var foundIndex = -1;
        for (i = byteOffset; i < arrLength; i++) {
          if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
            if (foundIndex === -1) foundIndex = i;
            if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
          } else {
            if (foundIndex !== -1) i -= i - foundIndex;
            foundIndex = -1;
          }
        }
      } else {
        if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength;
        for (i = byteOffset; i >= 0; i--) {
          var found = true;
          for (var j = 0; j < valLength; j++) {
            if (read(arr, i + j) !== read(val, j)) {
              found = false;
              break
            }
          }
          if (found) return i
        }
      }

      return -1
    }

    Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
      return this.indexOf(val, byteOffset, encoding) !== -1
    };

    Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
      return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
    };

    Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
      return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
    };

    function hexWrite (buf, string, offset, length) {
      offset = Number(offset) || 0;
      var remaining = buf.length - offset;
      if (!length) {
        length = remaining;
      } else {
        length = Number(length);
        if (length > remaining) {
          length = remaining;
        }
      }

      // must be an even number of digits
      var strLen = string.length;
      if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')

      if (length > strLen / 2) {
        length = strLen / 2;
      }
      for (var i = 0; i < length; ++i) {
        var parsed = parseInt(string.substr(i * 2, 2), 16);
        if (isNaN(parsed)) return i
        buf[offset + i] = parsed;
      }
      return i
    }

    function utf8Write (buf, string, offset, length) {
      return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
    }

    function asciiWrite (buf, string, offset, length) {
      return blitBuffer(asciiToBytes(string), buf, offset, length)
    }

    function latin1Write (buf, string, offset, length) {
      return asciiWrite(buf, string, offset, length)
    }

    function base64Write (buf, string, offset, length) {
      return blitBuffer(base64ToBytes(string), buf, offset, length)
    }

    function ucs2Write (buf, string, offset, length) {
      return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
    }

    Buffer.prototype.write = function write (string, offset, length, encoding) {
      // Buffer#write(string)
      if (offset === undefined) {
        encoding = 'utf8';
        length = this.length;
        offset = 0;
      // Buffer#write(string, encoding)
      } else if (length === undefined && typeof offset === 'string') {
        encoding = offset;
        length = this.length;
        offset = 0;
      // Buffer#write(string, offset[, length][, encoding])
      } else if (isFinite(offset)) {
        offset = offset | 0;
        if (isFinite(length)) {
          length = length | 0;
          if (encoding === undefined) encoding = 'utf8';
        } else {
          encoding = length;
          length = undefined;
        }
      // legacy write(string, encoding, offset, length) - remove in v0.13
      } else {
        throw new Error(
          'Buffer.write(string, encoding, offset[, length]) is no longer supported'
        )
      }

      var remaining = this.length - offset;
      if (length === undefined || length > remaining) length = remaining;

      if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
        throw new RangeError('Attempt to write outside buffer bounds')
      }

      if (!encoding) encoding = 'utf8';

      var loweredCase = false;
      for (;;) {
        switch (encoding) {
          case 'hex':
            return hexWrite(this, string, offset, length)

          case 'utf8':
          case 'utf-8':
            return utf8Write(this, string, offset, length)

          case 'ascii':
            return asciiWrite(this, string, offset, length)

          case 'latin1':
          case 'binary':
            return latin1Write(this, string, offset, length)

          case 'base64':
            // Warning: maxLength not taken into account in base64Write
            return base64Write(this, string, offset, length)

          case 'ucs2':
          case 'ucs-2':
          case 'utf16le':
          case 'utf-16le':
            return ucs2Write(this, string, offset, length)

          default:
            if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
            encoding = ('' + encoding).toLowerCase();
            loweredCase = true;
        }
      }
    };

    Buffer.prototype.toJSON = function toJSON () {
      return {
        type: 'Buffer',
        data: Array.prototype.slice.call(this._arr || this, 0)
      }
    };

    function base64Slice (buf, start, end) {
      if (start === 0 && end === buf.length) {
        return fromByteArray(buf)
      } else {
        return fromByteArray(buf.slice(start, end))
      }
    }

    function utf8Slice (buf, start, end) {
      end = Math.min(buf.length, end);
      var res = [];

      var i = start;
      while (i < end) {
        var firstByte = buf[i];
        var codePoint = null;
        var bytesPerSequence = (firstByte > 0xEF) ? 4
          : (firstByte > 0xDF) ? 3
          : (firstByte > 0xBF) ? 2
          : 1;

        if (i + bytesPerSequence <= end) {
          var secondByte, thirdByte, fourthByte, tempCodePoint;

          switch (bytesPerSequence) {
            case 1:
              if (firstByte < 0x80) {
                codePoint = firstByte;
              }
              break
            case 2:
              secondByte = buf[i + 1];
              if ((secondByte & 0xC0) === 0x80) {
                tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F);
                if (tempCodePoint > 0x7F) {
                  codePoint = tempCodePoint;
                }
              }
              break
            case 3:
              secondByte = buf[i + 1];
              thirdByte = buf[i + 2];
              if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
                tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F);
                if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
                  codePoint = tempCodePoint;
                }
              }
              break
            case 4:
              secondByte = buf[i + 1];
              thirdByte = buf[i + 2];
              fourthByte = buf[i + 3];
              if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
                tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F);
                if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
                  codePoint = tempCodePoint;
                }
              }
          }
        }

        if (codePoint === null) {
          // we did not generate a valid codePoint so insert a
          // replacement char (U+FFFD) and advance only 1 byte
          codePoint = 0xFFFD;
          bytesPerSequence = 1;
        } else if (codePoint > 0xFFFF) {
          // encode to utf16 (surrogate pair dance)
          codePoint -= 0x10000;
          res.push(codePoint >>> 10 & 0x3FF | 0xD800);
          codePoint = 0xDC00 | codePoint & 0x3FF;
        }

        res.push(codePoint);
        i += bytesPerSequence;
      }

      return decodeCodePointsArray(res)
    }

    // Based on http://stackoverflow.com/a/22747272/680742, the browser with
    // the lowest limit is Chrome, with 0x10000 args.
    // We go 1 magnitude less, for safety
    var MAX_ARGUMENTS_LENGTH = 0x1000;

    function decodeCodePointsArray (codePoints) {
      var len = codePoints.length;
      if (len <= MAX_ARGUMENTS_LENGTH) {
        return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
      }

      // Decode in chunks to avoid "call stack size exceeded".
      var res = '';
      var i = 0;
      while (i < len) {
        res += String.fromCharCode.apply(
          String,
          codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
        );
      }
      return res
    }

    function asciiSlice (buf, start, end) {
      var ret = '';
      end = Math.min(buf.length, end);

      for (var i = start; i < end; ++i) {
        ret += String.fromCharCode(buf[i] & 0x7F);
      }
      return ret
    }

    function latin1Slice (buf, start, end) {
      var ret = '';
      end = Math.min(buf.length, end);

      for (var i = start; i < end; ++i) {
        ret += String.fromCharCode(buf[i]);
      }
      return ret
    }

    function hexSlice (buf, start, end) {
      var len = buf.length;

      if (!start || start < 0) start = 0;
      if (!end || end < 0 || end > len) end = len;

      var out = '';
      for (var i = start; i < end; ++i) {
        out += toHex(buf[i]);
      }
      return out
    }

    function utf16leSlice (buf, start, end) {
      var bytes = buf.slice(start, end);
      var res = '';
      for (var i = 0; i < bytes.length; i += 2) {
        res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);
      }
      return res
    }

    Buffer.prototype.slice = function slice (start, end) {
      var len = this.length;
      start = ~~start;
      end = end === undefined ? len : ~~end;

      if (start < 0) {
        start += len;
        if (start < 0) start = 0;
      } else if (start > len) {
        start = len;
      }

      if (end < 0) {
        end += len;
        if (end < 0) end = 0;
      } else if (end > len) {
        end = len;
      }

      if (end < start) end = start;

      var newBuf;
      if (Buffer.TYPED_ARRAY_SUPPORT) {
        newBuf = this.subarray(start, end);
        newBuf.__proto__ = Buffer.prototype;
      } else {
        var sliceLen = end - start;
        newBuf = new Buffer(sliceLen, undefined);
        for (var i = 0; i < sliceLen; ++i) {
          newBuf[i] = this[i + start];
        }
      }

      return newBuf
    };

    /*
     * Need to make sure that buffer isn't trying to write out of bounds.
     */
    function checkOffset (offset, ext, length) {
      if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
      if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
    }

    Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
      offset = offset | 0;
      byteLength = byteLength | 0;
      if (!noAssert) checkOffset(offset, byteLength, this.length);

      var val = this[offset];
      var mul = 1;
      var i = 0;
      while (++i < byteLength && (mul *= 0x100)) {
        val += this[offset + i] * mul;
      }

      return val
    };

    Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
      offset = offset | 0;
      byteLength = byteLength | 0;
      if (!noAssert) {
        checkOffset(offset, byteLength, this.length);
      }

      var val = this[offset + --byteLength];
      var mul = 1;
      while (byteLength > 0 && (mul *= 0x100)) {
        val += this[offset + --byteLength] * mul;
      }

      return val
    };

    Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
      if (!noAssert) checkOffset(offset, 1, this.length);
      return this[offset]
    };

    Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
      if (!noAssert) checkOffset(offset, 2, this.length);
      return this[offset] | (this[offset + 1] << 8)
    };

    Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
      if (!noAssert) checkOffset(offset, 2, this.length);
      return (this[offset] << 8) | this[offset + 1]
    };

    Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
      if (!noAssert) checkOffset(offset, 4, this.length);

      return ((this[offset]) |
          (this[offset + 1] << 8) |
          (this[offset + 2] << 16)) +
          (this[offset + 3] * 0x1000000)
    };

    Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
      if (!noAssert) checkOffset(offset, 4, this.length);

      return (this[offset] * 0x1000000) +
        ((this[offset + 1] << 16) |
        (this[offset + 2] << 8) |
        this[offset + 3])
    };

    Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
      offset = offset | 0;
      byteLength = byteLength | 0;
      if (!noAssert) checkOffset(offset, byteLength, this.length);

      var val = this[offset];
      var mul = 1;
      var i = 0;
      while (++i < byteLength && (mul *= 0x100)) {
        val += this[offset + i] * mul;
      }
      mul *= 0x80;

      if (val >= mul) val -= Math.pow(2, 8 * byteLength);

      return val
    };

    Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
      offset = offset | 0;
      byteLength = byteLength | 0;
      if (!noAssert) checkOffset(offset, byteLength, this.length);

      var i = byteLength;
      var mul = 1;
      var val = this[offset + --i];
      while (i > 0 && (mul *= 0x100)) {
        val += this[offset + --i] * mul;
      }
      mul *= 0x80;

      if (val >= mul) val -= Math.pow(2, 8 * byteLength);

      return val
    };

    Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
      if (!noAssert) checkOffset(offset, 1, this.length);
      if (!(this[offset] & 0x80)) return (this[offset])
      return ((0xff - this[offset] + 1) * -1)
    };

    Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
      if (!noAssert) checkOffset(offset, 2, this.length);
      var val = this[offset] | (this[offset + 1] << 8);
      return (val & 0x8000) ? val | 0xFFFF0000 : val
    };

    Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
      if (!noAssert) checkOffset(offset, 2, this.length);
      var val = this[offset + 1] | (this[offset] << 8);
      return (val & 0x8000) ? val | 0xFFFF0000 : val
    };

    Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
      if (!noAssert) checkOffset(offset, 4, this.length);

      return (this[offset]) |
        (this[offset + 1] << 8) |
        (this[offset + 2] << 16) |
        (this[offset + 3] << 24)
    };

    Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
      if (!noAssert) checkOffset(offset, 4, this.length);

      return (this[offset] << 24) |
        (this[offset + 1] << 16) |
        (this[offset + 2] << 8) |
        (this[offset + 3])
    };

    Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
      if (!noAssert) checkOffset(offset, 4, this.length);
      return read(this, offset, true, 23, 4)
    };

    Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
      if (!noAssert) checkOffset(offset, 4, this.length);
      return read(this, offset, false, 23, 4)
    };

    Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
      if (!noAssert) checkOffset(offset, 8, this.length);
      return read(this, offset, true, 52, 8)
    };

    Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
      if (!noAssert) checkOffset(offset, 8, this.length);
      return read(this, offset, false, 52, 8)
    };

    function checkInt (buf, value, offset, ext, max, min) {
      if (!internalIsBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
      if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
      if (offset + ext > buf.length) throw new RangeError('Index out of range')
    }

    Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
      value = +value;
      offset = offset | 0;
      byteLength = byteLength | 0;
      if (!noAssert) {
        var maxBytes = Math.pow(2, 8 * byteLength) - 1;
        checkInt(this, value, offset, byteLength, maxBytes, 0);
      }

      var mul = 1;
      var i = 0;
      this[offset] = value & 0xFF;
      while (++i < byteLength && (mul *= 0x100)) {
        this[offset + i] = (value / mul) & 0xFF;
      }

      return offset + byteLength
    };

    Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
      value = +value;
      offset = offset | 0;
      byteLength = byteLength | 0;
      if (!noAssert) {
        var maxBytes = Math.pow(2, 8 * byteLength) - 1;
        checkInt(this, value, offset, byteLength, maxBytes, 0);
      }

      var i = byteLength - 1;
      var mul = 1;
      this[offset + i] = value & 0xFF;
      while (--i >= 0 && (mul *= 0x100)) {
        this[offset + i] = (value / mul) & 0xFF;
      }

      return offset + byteLength
    };

    Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
      value = +value;
      offset = offset | 0;
      if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0);
      if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value);
      this[offset] = (value & 0xff);
      return offset + 1
    };

    function objectWriteUInt16 (buf, value, offset, littleEndian) {
      if (value < 0) value = 0xffff + value + 1;
      for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {
        buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>
          (littleEndian ? i : 1 - i) * 8;
      }
    }

    Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
      value = +value;
      offset = offset | 0;
      if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
      if (Buffer.TYPED_ARRAY_SUPPORT) {
        this[offset] = (value & 0xff);
        this[offset + 1] = (value >>> 8);
      } else {
        objectWriteUInt16(this, value, offset, true);
      }
      return offset + 2
    };

    Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
      value = +value;
      offset = offset | 0;
      if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
      if (Buffer.TYPED_ARRAY_SUPPORT) {
        this[offset] = (value >>> 8);
        this[offset + 1] = (value & 0xff);
      } else {
        objectWriteUInt16(this, value, offset, false);
      }
      return offset + 2
    };

    function objectWriteUInt32 (buf, value, offset, littleEndian) {
      if (value < 0) value = 0xffffffff + value + 1;
      for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {
        buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff;
      }
    }

    Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
      value = +value;
      offset = offset | 0;
      if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
      if (Buffer.TYPED_ARRAY_SUPPORT) {
        this[offset + 3] = (value >>> 24);
        this[offset + 2] = (value >>> 16);
        this[offset + 1] = (value >>> 8);
        this[offset] = (value & 0xff);
      } else {
        objectWriteUInt32(this, value, offset, true);
      }
      return offset + 4
    };

    Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
      value = +value;
      offset = offset | 0;
      if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
      if (Buffer.TYPED_ARRAY_SUPPORT) {
        this[offset] = (value >>> 24);
        this[offset + 1] = (value >>> 16);
        this[offset + 2] = (value >>> 8);
        this[offset + 3] = (value & 0xff);
      } else {
        objectWriteUInt32(this, value, offset, false);
      }
      return offset + 4
    };

    Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
      value = +value;
      offset = offset | 0;
      if (!noAssert) {
        var limit = Math.pow(2, 8 * byteLength - 1);

        checkInt(this, value, offset, byteLength, limit - 1, -limit);
      }

      var i = 0;
      var mul = 1;
      var sub = 0;
      this[offset] = value & 0xFF;
      while (++i < byteLength && (mul *= 0x100)) {
        if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
          sub = 1;
        }
        this[offset + i] = ((value / mul) >> 0) - sub & 0xFF;
      }

      return offset + byteLength
    };

    Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
      value = +value;
      offset = offset | 0;
      if (!noAssert) {
        var limit = Math.pow(2, 8 * byteLength - 1);

        checkInt(this, value, offset, byteLength, limit - 1, -limit);
      }

      var i = byteLength - 1;
      var mul = 1;
      var sub = 0;
      this[offset + i] = value & 0xFF;
      while (--i >= 0 && (mul *= 0x100)) {
        if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
          sub = 1;
        }
        this[offset + i] = ((value / mul) >> 0) - sub & 0xFF;
      }

      return offset + byteLength
    };

    Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
      value = +value;
      offset = offset | 0;
      if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80);
      if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value);
      if (value < 0) value = 0xff + value + 1;
      this[offset] = (value & 0xff);
      return offset + 1
    };

    Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
      value = +value;
      offset = offset | 0;
      if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);
      if (Buffer.TYPED_ARRAY_SUPPORT) {
        this[offset] = (value & 0xff);
        this[offset + 1] = (value >>> 8);
      } else {
        objectWriteUInt16(this, value, offset, true);
      }
      return offset + 2
    };

    Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
      value = +value;
      offset = offset | 0;
      if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);
      if (Buffer.TYPED_ARRAY_SUPPORT) {
        this[offset] = (value >>> 8);
        this[offset + 1] = (value & 0xff);
      } else {
        objectWriteUInt16(this, value, offset, false);
      }
      return offset + 2
    };

    Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
      value = +value;
      offset = offset | 0;
      if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);
      if (Buffer.TYPED_ARRAY_SUPPORT) {
        this[offset] = (value & 0xff);
        this[offset + 1] = (value >>> 8);
        this[offset + 2] = (value >>> 16);
        this[offset + 3] = (value >>> 24);
      } else {
        objectWriteUInt32(this, value, offset, true);
      }
      return offset + 4
    };

    Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
      value = +value;
      offset = offset | 0;
      if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);
      if (value < 0) value = 0xffffffff + value + 1;
      if (Buffer.TYPED_ARRAY_SUPPORT) {
        this[offset] = (value >>> 24);
        this[offset + 1] = (value >>> 16);
        this[offset + 2] = (value >>> 8);
        this[offset + 3] = (value & 0xff);
      } else {
        objectWriteUInt32(this, value, offset, false);
      }
      return offset + 4
    };

    function checkIEEE754 (buf, value, offset, ext, max, min) {
      if (offset + ext > buf.length) throw new RangeError('Index out of range')
      if (offset < 0) throw new RangeError('Index out of range')
    }

    function writeFloat (buf, value, offset, littleEndian, noAssert) {
      if (!noAssert) {
        checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38);
      }
      write(buf, value, offset, littleEndian, 23, 4);
      return offset + 4
    }

    Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
      return writeFloat(this, value, offset, true, noAssert)
    };

    Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
      return writeFloat(this, value, offset, false, noAssert)
    };

    function writeDouble (buf, value, offset, littleEndian, noAssert) {
      if (!noAssert) {
        checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308);
      }
      write(buf, value, offset, littleEndian, 52, 8);
      return offset + 8
    }

    Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
      return writeDouble(this, value, offset, true, noAssert)
    };

    Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
      return writeDouble(this, value, offset, false, noAssert)
    };

    // copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
    Buffer.prototype.copy = function copy (target, targetStart, start, end) {
      if (!start) start = 0;
      if (!end && end !== 0) end = this.length;
      if (targetStart >= target.length) targetStart = target.length;
      if (!targetStart) targetStart = 0;
      if (end > 0 && end < start) end = start;

      // Copy 0 bytes; we're done
      if (end === start) return 0
      if (target.length === 0 || this.length === 0) return 0

      // Fatal error conditions
      if (targetStart < 0) {
        throw new RangeError('targetStart out of bounds')
      }
      if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')
      if (end < 0) throw new RangeError('sourceEnd out of bounds')

      // Are we oob?
      if (end > this.length) end = this.length;
      if (target.length - targetStart < end - start) {
        end = target.length - targetStart + start;
      }

      var len = end - start;
      var i;

      if (this === target && start < targetStart && targetStart < end) {
        // descending copy from end
        for (i = len - 1; i >= 0; --i) {
          target[i + targetStart] = this[i + start];
        }
      } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
        // ascending copy from start
        for (i = 0; i < len; ++i) {
          target[i + targetStart] = this[i + start];
        }
      } else {
        Uint8Array.prototype.set.call(
          target,
          this.subarray(start, start + len),
          targetStart
        );
      }

      return len
    };

    // Usage:
    //    buffer.fill(number[, offset[, end]])
    //    buffer.fill(buffer[, offset[, end]])
    //    buffer.fill(string[, offset[, end]][, encoding])
    Buffer.prototype.fill = function fill (val, start, end, encoding) {
      // Handle string cases:
      if (typeof val === 'string') {
        if (typeof start === 'string') {
          encoding = start;
          start = 0;
          end = this.length;
        } else if (typeof end === 'string') {
          encoding = end;
          end = this.length;
        }
        if (val.length === 1) {
          var code = val.charCodeAt(0);
          if (code < 256) {
            val = code;
          }
        }
        if (encoding !== undefined && typeof encoding !== 'string') {
          throw new TypeError('encoding must be a string')
        }
        if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
          throw new TypeError('Unknown encoding: ' + encoding)
        }
      } else if (typeof val === 'number') {
        val = val & 255;
      }

      // Invalid ranges are not set to a default, so can range check early.
      if (start < 0 || this.length < start || this.length < end) {
        throw new RangeError('Out of range index')
      }

      if (end <= start) {
        return this
      }

      start = start >>> 0;
      end = end === undefined ? this.length : end >>> 0;

      if (!val) val = 0;

      var i;
      if (typeof val === 'number') {
        for (i = start; i < end; ++i) {
          this[i] = val;
        }
      } else {
        var bytes = internalIsBuffer(val)
          ? val
          : utf8ToBytes(new Buffer(val, encoding).toString());
        var len = bytes.length;
        for (i = 0; i < end - start; ++i) {
          this[i + start] = bytes[i % len];
        }
      }

      return this
    };

    // HELPER FUNCTIONS
    // ================

    var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g;

    function base64clean (str) {
      // Node strips out invalid characters like \n and \t from the string, base64-js does not
      str = stringtrim(str).replace(INVALID_BASE64_RE, '');
      // Node converts strings with length < 2 to ''
      if (str.length < 2) return ''
      // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
      while (str.length % 4 !== 0) {
        str = str + '=';
      }
      return str
    }

    function stringtrim (str) {
      if (str.trim) return str.trim()
      return str.replace(/^\s+|\s+$/g, '')
    }

    function toHex (n) {
      if (n < 16) return '0' + n.toString(16)
      return n.toString(16)
    }

    function utf8ToBytes (string, units) {
      units = units || Infinity;
      var codePoint;
      var length = string.length;
      var leadSurrogate = null;
      var bytes = [];

      for (var i = 0; i < length; ++i) {
        codePoint = string.charCodeAt(i);

        // is surrogate component
        if (codePoint > 0xD7FF && codePoint < 0xE000) {
          // last char was a lead
          if (!leadSurrogate) {
            // no lead yet
            if (codePoint > 0xDBFF) {
              // unexpected trail
              if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
              continue
            } else if (i + 1 === length) {
              // unpaired lead
              if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
              continue
            }

            // valid lead
            leadSurrogate = codePoint;

            continue
          }

          // 2 leads in a row
          if (codePoint < 0xDC00) {
            if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
            leadSurrogate = codePoint;
            continue
          }

          // valid surrogate pair
          codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000;
        } else if (leadSurrogate) {
          // valid bmp char, but last char was a lead
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
        }

        leadSurrogate = null;

        // encode utf8
        if (codePoint < 0x80) {
          if ((units -= 1) < 0) break
          bytes.push(codePoint);
        } else if (codePoint < 0x800) {
          if ((units -= 2) < 0) break
          bytes.push(
            codePoint >> 0x6 | 0xC0,
            codePoint & 0x3F | 0x80
          );
        } else if (codePoint < 0x10000) {
          if ((units -= 3) < 0) break
          bytes.push(
            codePoint >> 0xC | 0xE0,
            codePoint >> 0x6 & 0x3F | 0x80,
            codePoint & 0x3F | 0x80
          );
        } else if (codePoint < 0x110000) {
          if ((units -= 4) < 0) break
          bytes.push(
            codePoint >> 0x12 | 0xF0,
            codePoint >> 0xC & 0x3F | 0x80,
            codePoint >> 0x6 & 0x3F | 0x80,
            codePoint & 0x3F | 0x80
          );
        } else {
          throw new Error('Invalid code point')
        }
      }

      return bytes
    }

    function asciiToBytes (str) {
      var byteArray = [];
      for (var i = 0; i < str.length; ++i) {
        // Node's code seems to be doing this and not & 0x7F..
        byteArray.push(str.charCodeAt(i) & 0xFF);
      }
      return byteArray
    }

    function utf16leToBytes (str, units) {
      var c, hi, lo;
      var byteArray = [];
      for (var i = 0; i < str.length; ++i) {
        if ((units -= 2) < 0) break

        c = str.charCodeAt(i);
        hi = c >> 8;
        lo = c % 256;
        byteArray.push(lo);
        byteArray.push(hi);
      }

      return byteArray
    }


    function base64ToBytes (str) {
      return toByteArray(base64clean(str))
    }

    function blitBuffer (src, dst, offset, length) {
      for (var i = 0; i < length; ++i) {
        if ((i + offset >= dst.length) || (i >= src.length)) break
        dst[i + offset] = src[i];
      }
      return i
    }

    function isnan (val) {
      return val !== val // eslint-disable-line no-self-compare
    }


    // the following is from is-buffer, also by Feross Aboukhadijeh and with same lisence
    // The _isBuffer check is for Safari 5-7 support, because it's missing
    // Object.prototype.constructor. Remove this eventually
    function isBuffer(obj) {
      return obj != null && (!!obj._isBuffer || isFastBuffer(obj) || isSlowBuffer(obj))
    }

    function isFastBuffer (obj) {
      return !!obj.constructor && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)
    }

    // For Node v0.10 support. Remove this eventually.
    function isSlowBuffer (obj) {
      return typeof obj.readFloatLE === 'function' && typeof obj.slice === 'function' && isFastBuffer(obj.slice(0, 0))
    }

    var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

    function commonjsRequire () {
    	throw new Error('Dynamic requires are not currently supported by rollup-plugin-commonjs');
    }

    function createCommonjsModule(fn, module) {
    	return module = { exports: {} }, fn(module, module.exports), module.exports;
    }

    var domain;

    // This constructor is used to store event handlers. Instantiating this is
    // faster than explicitly calling `Object.create(null)` to get a "clean" empty
    // object (tested with v8 v4.9).
    function EventHandlers() {}
    EventHandlers.prototype = Object.create(null);

    function EventEmitter() {
      EventEmitter.init.call(this);
    }

    // nodejs oddity
    // require('events') === require('events').EventEmitter
    EventEmitter.EventEmitter = EventEmitter;

    EventEmitter.usingDomains = false;

    EventEmitter.prototype.domain = undefined;
    EventEmitter.prototype._events = undefined;
    EventEmitter.prototype._maxListeners = undefined;

    // By default EventEmitters will print a warning if more than 10 listeners are
    // added to it. This is a useful default which helps finding memory leaks.
    EventEmitter.defaultMaxListeners = 10;

    EventEmitter.init = function() {
      this.domain = null;
      if (EventEmitter.usingDomains) {
        // if there is an active domain, then attach to it.
        if (domain.active && !(this instanceof domain.Domain)) ;
      }

      if (!this._events || this._events === Object.getPrototypeOf(this)._events) {
        this._events = new EventHandlers();
        this._eventsCount = 0;
      }

      this._maxListeners = this._maxListeners || undefined;
    };

    // Obviously not all Emitters should be limited to 10. This function allows
    // that to be increased. Set to zero for unlimited.
    EventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {
      if (typeof n !== 'number' || n < 0 || isNaN(n))
        throw new TypeError('"n" argument must be a positive number');
      this._maxListeners = n;
      return this;
    };

    function $getMaxListeners(that) {
      if (that._maxListeners === undefined)
        return EventEmitter.defaultMaxListeners;
      return that._maxListeners;
    }

    EventEmitter.prototype.getMaxListeners = function getMaxListeners() {
      return $getMaxListeners(this);
    };

    // These standalone emit* functions are used to optimize calling of event
    // handlers for fast cases because emit() itself often has a variable number of
    // arguments and can be deoptimized because of that. These functions always have
    // the same number of arguments and thus do not get deoptimized, so the code
    // inside them can execute faster.
    function emitNone(handler, isFn, self) {
      if (isFn)
        handler.call(self);
      else {
        var len = handler.length;
        var listeners = arrayClone(handler, len);
        for (var i = 0; i < len; ++i)
          listeners[i].call(self);
      }
    }
    function emitOne(handler, isFn, self, arg1) {
      if (isFn)
        handler.call(self, arg1);
      else {
        var len = handler.length;
        var listeners = arrayClone(handler, len);
        for (var i = 0; i < len; ++i)
          listeners[i].call(self, arg1);
      }
    }
    function emitTwo(handler, isFn, self, arg1, arg2) {
      if (isFn)
        handler.call(self, arg1, arg2);
      else {
        var len = handler.length;
        var listeners = arrayClone(handler, len);
        for (var i = 0; i < len; ++i)
          listeners[i].call(self, arg1, arg2);
      }
    }
    function emitThree(handler, isFn, self, arg1, arg2, arg3) {
      if (isFn)
        handler.call(self, arg1, arg2, arg3);
      else {
        var len = handler.length;
        var listeners = arrayClone(handler, len);
        for (var i = 0; i < len; ++i)
          listeners[i].call(self, arg1, arg2, arg3);
      }
    }

    function emitMany(handler, isFn, self, args) {
      if (isFn)
        handler.apply(self, args);
      else {
        var len = handler.length;
        var listeners = arrayClone(handler, len);
        for (var i = 0; i < len; ++i)
          listeners[i].apply(self, args);
      }
    }

    EventEmitter.prototype.emit = function emit(type) {
      var er, handler, len, args, i, events, domain;
      var doError = (type === 'error');

      events = this._events;
      if (events)
        doError = (doError && events.error == null);
      else if (!doError)
        return false;

      domain = this.domain;

      // If there is no 'error' event listener then throw.
      if (doError) {
        er = arguments[1];
        if (domain) {
          if (!er)
            er = new Error('Uncaught, unspecified "error" event');
          er.domainEmitter = this;
          er.domain = domain;
          er.domainThrown = false;
          domain.emit('error', er);
        } else if (er instanceof Error) {
          throw er; // Unhandled 'error' event
        } else {
          // At least give some kind of context to the user
          var err = new Error('Uncaught, unspecified "error" event. (' + er + ')');
          err.context = er;
          throw err;
        }
        return false;
      }

      handler = events[type];

      if (!handler)
        return false;

      var isFn = typeof handler === 'function';
      len = arguments.length;
      switch (len) {
        // fast cases
        case 1:
          emitNone(handler, isFn, this);
          break;
        case 2:
          emitOne(handler, isFn, this, arguments[1]);
          break;
        case 3:
          emitTwo(handler, isFn, this, arguments[1], arguments[2]);
          break;
        case 4:
          emitThree(handler, isFn, this, arguments[1], arguments[2], arguments[3]);
          break;
        // slower
        default:
          args = new Array(len - 1);
          for (i = 1; i < len; i++)
            args[i - 1] = arguments[i];
          emitMany(handler, isFn, this, args);
      }

      return true;
    };

    function _addListener(target, type, listener, prepend) {
      var m;
      var events;
      var existing;

      if (typeof listener !== 'function')
        throw new TypeError('"listener" argument must be a function');

      events = target._events;
      if (!events) {
        events = target._events = new EventHandlers();
        target._eventsCount = 0;
      } else {
        // To avoid recursion in the case that type === "newListener"! Before
        // adding it to the listeners, first emit "newListener".
        if (events.newListener) {
          target.emit('newListener', type,
                      listener.listener ? listener.listener : listener);

          // Re-assign `events` because a newListener handler could have caused the
          // this._events to be assigned to a new object
          events = target._events;
        }
        existing = events[type];
      }

      if (!existing) {
        // Optimize the case of one listener. Don't need the extra array object.
        existing = events[type] = listener;
        ++target._eventsCount;
      } else {
        if (typeof existing === 'function') {
          // Adding the second element, need to change to array.
          existing = events[type] = prepend ? [listener, existing] :
                                              [existing, listener];
        } else {
          // If we've already got an array, just append.
          if (prepend) {
            existing.unshift(listener);
          } else {
            existing.push(listener);
          }
        }

        // Check for listener leak
        if (!existing.warned) {
          m = $getMaxListeners(target);
          if (m && m > 0 && existing.length > m) {
            existing.warned = true;
            var w = new Error('Possible EventEmitter memory leak detected. ' +
                                existing.length + ' ' + type + ' listeners added. ' +
                                'Use emitter.setMaxListeners() to increase limit');
            w.name = 'MaxListenersExceededWarning';
            w.emitter = target;
            w.type = type;
            w.count = existing.length;
            emitWarning(w);
          }
        }
      }

      return target;
    }
    function emitWarning(e) {
      typeof console.warn === 'function' ? console.warn(e) : console.log(e);
    }
    EventEmitter.prototype.addListener = function addListener(type, listener) {
      return _addListener(this, type, listener, false);
    };

    EventEmitter.prototype.on = EventEmitter.prototype.addListener;

    EventEmitter.prototype.prependListener =
        function prependListener(type, listener) {
          return _addListener(this, type, listener, true);
        };

    function _onceWrap(target, type, listener) {
      var fired = false;
      function g() {
        target.removeListener(type, g);
        if (!fired) {
          fired = true;
          listener.apply(target, arguments);
        }
      }
      g.listener = listener;
      return g;
    }

    EventEmitter.prototype.once = function once(type, listener) {
      if (typeof listener !== 'function')
        throw new TypeError('"listener" argument must be a function');
      this.on(type, _onceWrap(this, type, listener));
      return this;
    };

    EventEmitter.prototype.prependOnceListener =
        function prependOnceListener(type, listener) {
          if (typeof listener !== 'function')
            throw new TypeError('"listener" argument must be a function');
          this.prependListener(type, _onceWrap(this, type, listener));
          return this;
        };

    // emits a 'removeListener' event iff the listener was removed
    EventEmitter.prototype.removeListener =
        function removeListener(type, listener) {
          var list, events, position, i, originalListener;

          if (typeof listener !== 'function')
            throw new TypeError('"listener" argument must be a function');

          events = this._events;
          if (!events)
            return this;

          list = events[type];
          if (!list)
            return this;

          if (list === listener || (list.listener && list.listener === listener)) {
            if (--this._eventsCount === 0)
              this._events = new EventHandlers();
            else {
              delete events[type];
              if (events.removeListener)
                this.emit('removeListener', type, list.listener || listener);
            }
          } else if (typeof list !== 'function') {
            position = -1;

            for (i = list.length; i-- > 0;) {
              if (list[i] === listener ||
                  (list[i].listener && list[i].listener === listener)) {
                originalListener = list[i].listener;
                position = i;
                break;
              }
            }

            if (position < 0)
              return this;

            if (list.length === 1) {
              list[0] = undefined;
              if (--this._eventsCount === 0) {
                this._events = new EventHandlers();
                return this;
              } else {
                delete events[type];
              }
            } else {
              spliceOne(list, position);
            }

            if (events.removeListener)
              this.emit('removeListener', type, originalListener || listener);
          }

          return this;
        };

    EventEmitter.prototype.removeAllListeners =
        function removeAllListeners(type) {
          var listeners, events;

          events = this._events;
          if (!events)
            return this;

          // not listening for removeListener, no need to emit
          if (!events.removeListener) {
            if (arguments.length === 0) {
              this._events = new EventHandlers();
              this._eventsCount = 0;
            } else if (events[type]) {
              if (--this._eventsCount === 0)
                this._events = new EventHandlers();
              else
                delete events[type];
            }
            return this;
          }

          // emit removeListener for all listeners on all events
          if (arguments.length === 0) {
            var keys = Object.keys(events);
            for (var i = 0, key; i < keys.length; ++i) {
              key = keys[i];
              if (key === 'removeListener') continue;
              this.removeAllListeners(key);
            }
            this.removeAllListeners('removeListener');
            this._events = new EventHandlers();
            this._eventsCount = 0;
            return this;
          }

          listeners = events[type];

          if (typeof listeners === 'function') {
            this.removeListener(type, listeners);
          } else if (listeners) {
            // LIFO order
            do {
              this.removeListener(type, listeners[listeners.length - 1]);
            } while (listeners[0]);
          }

          return this;
        };

    EventEmitter.prototype.listeners = function listeners(type) {
      var evlistener;
      var ret;
      var events = this._events;

      if (!events)
        ret = [];
      else {
        evlistener = events[type];
        if (!evlistener)
          ret = [];
        else if (typeof evlistener === 'function')
          ret = [evlistener.listener || evlistener];
        else
          ret = unwrapListeners(evlistener);
      }

      return ret;
    };

    EventEmitter.listenerCount = function(emitter, type) {
      if (typeof emitter.listenerCount === 'function') {
        return emitter.listenerCount(type);
      } else {
        return listenerCount.call(emitter, type);
      }
    };

    EventEmitter.prototype.listenerCount = listenerCount;
    function listenerCount(type) {
      var events = this._events;

      if (events) {
        var evlistener = events[type];

        if (typeof evlistener === 'function') {
          return 1;
        } else if (evlistener) {
          return evlistener.length;
        }
      }

      return 0;
    }

    EventEmitter.prototype.eventNames = function eventNames() {
      return this._eventsCount > 0 ? Reflect.ownKeys(this._events) : [];
    };

    // About 1.5x faster than the two-arg version of Array#splice().
    function spliceOne(list, index) {
      for (var i = index, k = i + 1, n = list.length; k < n; i += 1, k += 1)
        list[i] = list[k];
      list.pop();
    }

    function arrayClone(arr, i) {
      var copy = new Array(i);
      while (i--)
        copy[i] = arr[i];
      return copy;
    }

    function unwrapListeners(arr) {
      var ret = new Array(arr.length);
      for (var i = 0; i < ret.length; ++i) {
        ret[i] = arr[i].listener || arr[i];
      }
      return ret;
    }

    var inherits;
    if (typeof Object.create === 'function'){
      inherits = function inherits(ctor, superCtor) {
        // implementation from standard node.js 'util' module
        ctor.super_ = superCtor;
        ctor.prototype = Object.create(superCtor.prototype, {
          constructor: {
            value: ctor,
            enumerable: false,
            writable: true,
            configurable: true
          }
        });
      };
    } else {
      inherits = function inherits(ctor, superCtor) {
        ctor.super_ = superCtor;
        var TempCtor = function () {};
        TempCtor.prototype = superCtor.prototype;
        ctor.prototype = new TempCtor();
        ctor.prototype.constructor = ctor;
      };
    }
    var inherits$1 = inherits;

    var formatRegExp = /%[sdj%]/g;
    function format(f) {
      if (!isString(f)) {
        var objects = [];
        for (var i = 0; i < arguments.length; i++) {
          objects.push(inspect(arguments[i]));
        }
        return objects.join(' ');
      }

      var i = 1;
      var args = arguments;
      var len = args.length;
      var str = String(f).replace(formatRegExp, function(x) {
        if (x === '%%') return '%';
        if (i >= len) return x;
        switch (x) {
          case '%s': return String(args[i++]);
          case '%d': return Number(args[i++]);
          case '%j':
            try {
              return JSON.stringify(args[i++]);
            } catch (_) {
              return '[Circular]';
            }
          default:
            return x;
        }
      });
      for (var x = args[i]; i < len; x = args[++i]) {
        if (isNull(x) || !isObject(x)) {
          str += ' ' + x;
        } else {
          str += ' ' + inspect(x);
        }
      }
      return str;
    }

    // Mark that a method should not be used.
    // Returns a modified function which warns once by default.
    // If --no-deprecation is set, then it is a no-op.
    function deprecate(fn, msg) {
      // Allow for deprecating things in the process of starting up.
      if (isUndefined(global$1.process)) {
        return function() {
          return deprecate(fn, msg).apply(this, arguments);
        };
      }

      var warned = false;
      function deprecated() {
        if (!warned) {
          {
            console.error(msg);
          }
          warned = true;
        }
        return fn.apply(this, arguments);
      }

      return deprecated;
    }

    var debugs = {};
    var debugEnviron;
    function debuglog(set) {
      if (isUndefined(debugEnviron))
        debugEnviron = '';
      set = set.toUpperCase();
      if (!debugs[set]) {
        if (new RegExp('\\b' + set + '\\b', 'i').test(debugEnviron)) {
          var pid = 0;
          debugs[set] = function() {
            var msg = format.apply(null, arguments);
            console.error('%s %d: %s', set, pid, msg);
          };
        } else {
          debugs[set] = function() {};
        }
      }
      return debugs[set];
    }

    /**
     * Echos the value of a value. Trys to print the value out
     * in the best way possible given the different types.
     *
     * @param {Object} obj The object to print out.
     * @param {Object} opts Optional options object that alters the output.
     */
    /* legacy: obj, showHidden, depth, colors*/
    function inspect(obj, opts) {
      // default options
      var ctx = {
        seen: [],
        stylize: stylizeNoColor
      };
      // legacy...
      if (arguments.length >= 3) ctx.depth = arguments[2];
      if (arguments.length >= 4) ctx.colors = arguments[3];
      if (isBoolean(opts)) {
        // legacy...
        ctx.showHidden = opts;
      } else if (opts) {
        // got an "options" object
        _extend(ctx, opts);
      }
      // set default options
      if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
      if (isUndefined(ctx.depth)) ctx.depth = 2;
      if (isUndefined(ctx.colors)) ctx.colors = false;
      if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
      if (ctx.colors) ctx.stylize = stylizeWithColor;
      return formatValue(ctx, obj, ctx.depth);
    }

    // http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
    inspect.colors = {
      'bold' : [1, 22],
      'italic' : [3, 23],
      'underline' : [4, 24],
      'inverse' : [7, 27],
      'white' : [37, 39],
      'grey' : [90, 39],
      'black' : [30, 39],
      'blue' : [34, 39],
      'cyan' : [36, 39],
      'green' : [32, 39],
      'magenta' : [35, 39],
      'red' : [31, 39],
      'yellow' : [33, 39]
    };

    // Don't use 'blue' not visible on cmd.exe
    inspect.styles = {
      'special': 'cyan',
      'number': 'yellow',
      'boolean': 'yellow',
      'undefined': 'grey',
      'null': 'bold',
      'string': 'green',
      'date': 'magenta',
      // "name": intentionally not styling
      'regexp': 'red'
    };


    function stylizeWithColor(str, styleType) {
      var style = inspect.styles[styleType];

      if (style) {
        return '\u001b[' + inspect.colors[style][0] + 'm' + str +
               '\u001b[' + inspect.colors[style][1] + 'm';
      } else {
        return str;
      }
    }


    function stylizeNoColor(str, styleType) {
      return str;
    }


    function arrayToHash(array) {
      var hash = {};

      array.forEach(function(val, idx) {
        hash[val] = true;
      });

      return hash;
    }


    function formatValue(ctx, value, recurseTimes) {
      // Provide a hook for user-specified inspect functions.
      // Check that value is an object with an inspect function on it
      if (ctx.customInspect &&
          value &&
          isFunction(value.inspect) &&
          // Filter out the util module, it's inspect function is special
          value.inspect !== inspect &&
          // Also filter out any prototype objects using the circular check.
          !(value.constructor && value.constructor.prototype === value)) {
        var ret = value.inspect(recurseTimes, ctx);
        if (!isString(ret)) {
          ret = formatValue(ctx, ret, recurseTimes);
        }
        return ret;
      }

      // Primitive types cannot have properties
      var primitive = formatPrimitive(ctx, value);
      if (primitive) {
        return primitive;
      }

      // Look up the keys of the object.
      var keys = Object.keys(value);
      var visibleKeys = arrayToHash(keys);

      if (ctx.showHidden) {
        keys = Object.getOwnPropertyNames(value);
      }

      // IE doesn't make error fields non-enumerable
      // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx
      if (isError(value)
          && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
        return formatError(value);
      }

      // Some type of object without properties can be shortcutted.
      if (keys.length === 0) {
        if (isFunction(value)) {
          var name = value.name ? ': ' + value.name : '';
          return ctx.stylize('[Function' + name + ']', 'special');
        }
        if (isRegExp(value)) {
          return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
        }
        if (isDate(value)) {
          return ctx.stylize(Date.prototype.toString.call(value), 'date');
        }
        if (isError(value)) {
          return formatError(value);
        }
      }

      var base = '', array = false, braces = ['{', '}'];

      // Make Array say that they are Array
      if (isArray$1(value)) {
        array = true;
        braces = ['[', ']'];
      }

      // Make functions say that they are functions
      if (isFunction(value)) {
        var n = value.name ? ': ' + value.name : '';
        base = ' [Function' + n + ']';
      }

      // Make RegExps say that they are RegExps
      if (isRegExp(value)) {
        base = ' ' + RegExp.prototype.toString.call(value);
      }

      // Make dates with properties first say the date
      if (isDate(value)) {
        base = ' ' + Date.prototype.toUTCString.call(value);
      }

      // Make error with message first say the error
      if (isError(value)) {
        base = ' ' + formatError(value);
      }

      if (keys.length === 0 && (!array || value.length == 0)) {
        return braces[0] + base + braces[1];
      }

      if (recurseTimes < 0) {
        if (isRegExp(value)) {
          return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
        } else {
          return ctx.stylize('[Object]', 'special');
        }
      }

      ctx.seen.push(value);

      var output;
      if (array) {
        output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
      } else {
        output = keys.map(function(key) {
          return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
        });
      }

      ctx.seen.pop();

      return reduceToSingleString(output, base, braces);
    }


    function formatPrimitive(ctx, value) {
      if (isUndefined(value))
        return ctx.stylize('undefined', 'undefined');
      if (isString(value)) {
        var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '')
                                                 .replace(/'/g, "\\'")
                                                 .replace(/\\"/g, '"') + '\'';
        return ctx.stylize(simple, 'string');
      }
      if (isNumber(value))
        return ctx.stylize('' + value, 'number');
      if (isBoolean(value))
        return ctx.stylize('' + value, 'boolean');
      // For some reason typeof null is "object", so special case here.
      if (isNull(value))
        return ctx.stylize('null', 'null');
    }


    function formatError(value) {
      return '[' + Error.prototype.toString.call(value) + ']';
    }


    function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
      var output = [];
      for (var i = 0, l = value.length; i < l; ++i) {
        if (hasOwnProperty(value, String(i))) {
          output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
              String(i), true));
        } else {
          output.push('');
        }
      }
      keys.forEach(function(key) {
        if (!key.match(/^\d+$/)) {
          output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
              key, true));
        }
      });
      return output;
    }


    function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
      var name, str, desc;
      desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };
      if (desc.get) {
        if (desc.set) {
          str = ctx.stylize('[Getter/Setter]', 'special');
        } else {
          str = ctx.stylize('[Getter]', 'special');
        }
      } else {
        if (desc.set) {
          str = ctx.stylize('[Setter]', 'special');
        }
      }
      if (!hasOwnProperty(visibleKeys, key)) {
        name = '[' + key + ']';
      }
      if (!str) {
        if (ctx.seen.indexOf(desc.value) < 0) {
          if (isNull(recurseTimes)) {
            str = formatValue(ctx, desc.value, null);
          } else {
            str = formatValue(ctx, desc.value, recurseTimes - 1);
          }
          if (str.indexOf('\n') > -1) {
            if (array) {
              str = str.split('\n').map(function(line) {
                return '  ' + line;
              }).join('\n').substr(2);
            } else {
              str = '\n' + str.split('\n').map(function(line) {
                return '   ' + line;
              }).join('\n');
            }
          }
        } else {
          str = ctx.stylize('[Circular]', 'special');
        }
      }
      if (isUndefined(name)) {
        if (array && key.match(/^\d+$/)) {
          return str;
        }
        name = JSON.stringify('' + key);
        if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
          name = name.substr(1, name.length - 2);
          name = ctx.stylize(name, 'name');
        } else {
          name = name.replace(/'/g, "\\'")
                     .replace(/\\"/g, '"')
                     .replace(/(^"|"$)/g, "'");
          name = ctx.stylize(name, 'string');
        }
      }

      return name + ': ' + str;
    }


    function reduceToSingleString(output, base, braces) {
      var length = output.reduce(function(prev, cur) {
        if (cur.indexOf('\n') >= 0) ;
        return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
      }, 0);

      if (length > 60) {
        return braces[0] +
               (base === '' ? '' : base + '\n ') +
               ' ' +
               output.join(',\n  ') +
               ' ' +
               braces[1];
      }

      return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
    }


    // NOTE: These type checking functions intentionally don't use `instanceof`
    // because it is fragile and can be easily faked with `Object.create()`.
    function isArray$1(ar) {
      return Array.isArray(ar);
    }

    function isBoolean(arg) {
      return typeof arg === 'boolean';
    }

    function isNull(arg) {
      return arg === null;
    }

    function isNumber(arg) {
      return typeof arg === 'number';
    }

    function isString(arg) {
      return typeof arg === 'string';
    }

    function isUndefined(arg) {
      return arg === void 0;
    }

    function isRegExp(re) {
      return isObject(re) && objectToString(re) === '[object RegExp]';
    }

    function isObject(arg) {
      return typeof arg === 'object' && arg !== null;
    }

    function isDate(d) {
      return isObject(d) && objectToString(d) === '[object Date]';
    }

    function isError(e) {
      return isObject(e) &&
          (objectToString(e) === '[object Error]' || e instanceof Error);
    }

    function isFunction(arg) {
      return typeof arg === 'function';
    }

    function objectToString(o) {
      return Object.prototype.toString.call(o);
    }

    function _extend(origin, add) {
      // Don't do anything if add isn't an object
      if (!add || !isObject(add)) return origin;

      var keys = Object.keys(add);
      var i = keys.length;
      while (i--) {
        origin[keys[i]] = add[keys[i]];
      }
      return origin;
    }
    function hasOwnProperty(obj, prop) {
      return Object.prototype.hasOwnProperty.call(obj, prop);
    }

    function BufferList() {
      this.head = null;
      this.tail = null;
      this.length = 0;
    }

    BufferList.prototype.push = function (v) {
      var entry = { data: v, next: null };
      if (this.length > 0) this.tail.next = entry;else this.head = entry;
      this.tail = entry;
      ++this.length;
    };

    BufferList.prototype.unshift = function (v) {
      var entry = { data: v, next: this.head };
      if (this.length === 0) this.tail = entry;
      this.head = entry;
      ++this.length;
    };

    BufferList.prototype.shift = function () {
      if (this.length === 0) return;
      var ret = this.head.data;
      if (this.length === 1) this.head = this.tail = null;else this.head = this.head.next;
      --this.length;
      return ret;
    };

    BufferList.prototype.clear = function () {
      this.head = this.tail = null;
      this.length = 0;
    };

    BufferList.prototype.join = function (s) {
      if (this.length === 0) return '';
      var p = this.head;
      var ret = '' + p.data;
      while (p = p.next) {
        ret += s + p.data;
      }return ret;
    };

    BufferList.prototype.concat = function (n) {
      if (this.length === 0) return Buffer.alloc(0);
      if (this.length === 1) return this.head.data;
      var ret = Buffer.allocUnsafe(n >>> 0);
      var p = this.head;
      var i = 0;
      while (p) {
        p.data.copy(ret, i);
        i += p.data.length;
        p = p.next;
      }
      return ret;
    };

    // Copyright Joyent, Inc. and other Node contributors.
    var isBufferEncoding = Buffer.isEncoding
      || function(encoding) {
           switch (encoding && encoding.toLowerCase()) {
             case 'hex': case 'utf8': case 'utf-8': case 'ascii': case 'binary': case 'base64': case 'ucs2': case 'ucs-2': case 'utf16le': case 'utf-16le': case 'raw': return true;
             default: return false;
           }
         };


    function assertEncoding(encoding) {
      if (encoding && !isBufferEncoding(encoding)) {
        throw new Error('Unknown encoding: ' + encoding);
      }
    }

    // StringDecoder provides an interface for efficiently splitting a series of
    // buffers into a series of JS strings without breaking apart multi-byte
    // characters. CESU-8 is handled as part of the UTF-8 encoding.
    //
    // @TODO Handling all encodings inside a single object makes it very difficult
    // to reason about this code, so it should be split up in the future.
    // @TODO There should be a utf8-strict encoding that rejects invalid UTF-8 code
    // points as used by CESU-8.
    function StringDecoder(encoding) {
      this.encoding = (encoding || 'utf8').toLowerCase().replace(/[-_]/, '');
      assertEncoding(encoding);
      switch (this.encoding) {
        case 'utf8':
          // CESU-8 represents each of Surrogate Pair by 3-bytes
          this.surrogateSize = 3;
          break;
        case 'ucs2':
        case 'utf16le':
          // UTF-16 represents each of Surrogate Pair by 2-bytes
          this.surrogateSize = 2;
          this.detectIncompleteChar = utf16DetectIncompleteChar;
          break;
        case 'base64':
          // Base-64 stores 3 bytes in 4 chars, and pads the remainder.
          this.surrogateSize = 3;
          this.detectIncompleteChar = base64DetectIncompleteChar;
          break;
        default:
          this.write = passThroughWrite;
          return;
      }

      // Enough space to store all bytes of a single character. UTF-8 needs 4
      // bytes, but CESU-8 may require up to 6 (3 bytes per surrogate).
      this.charBuffer = new Buffer(6);
      // Number of bytes received for the current incomplete multi-byte character.
      this.charReceived = 0;
      // Number of bytes expected for the current incomplete multi-byte character.
      this.charLength = 0;
    }

    // write decodes the given buffer and returns it as JS string that is
    // guaranteed to not contain any partial multi-byte characters. Any partial
    // character found at the end of the buffer is buffered up, and will be
    // returned when calling write again with the remaining bytes.
    //
    // Note: Converting a Buffer containing an orphan surrogate to a String
    // currently works, but converting a String to a Buffer (via `new Buffer`, or
    // Buffer#write) will replace incomplete surrogates with the unicode
    // replacement character. See https://codereview.chromium.org/121173009/ .
    StringDecoder.prototype.write = function(buffer) {
      var charStr = '';
      // if our last write ended with an incomplete multibyte character
      while (this.charLength) {
        // determine how many remaining bytes this buffer has to offer for this char
        var available = (buffer.length >= this.charLength - this.charReceived) ?
            this.charLength - this.charReceived :
            buffer.length;

        // add the new bytes to the char buffer
        buffer.copy(this.charBuffer, this.charReceived, 0, available);
        this.charReceived += available;

        if (this.charReceived < this.charLength) {
          // still not enough chars in this buffer? wait for more ...
          return '';
        }

        // remove bytes belonging to the current character from the buffer
        buffer = buffer.slice(available, buffer.length);

        // get the character that was split
        charStr = this.charBuffer.slice(0, this.charLength).toString(this.encoding);

        // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character
        var charCode = charStr.charCodeAt(charStr.length - 1);
        if (charCode >= 0xD800 && charCode <= 0xDBFF) {
          this.charLength += this.surrogateSize;
          charStr = '';
          continue;
        }
        this.charReceived = this.charLength = 0;

        // if there are no more bytes in this buffer, just emit our char
        if (buffer.length === 0) {
          return charStr;
        }
        break;
      }

      // determine and set charLength / charReceived
      this.detectIncompleteChar(buffer);

      var end = buffer.length;
      if (this.charLength) {
        // buffer the incomplete character bytes we got
        buffer.copy(this.charBuffer, 0, buffer.length - this.charReceived, end);
        end -= this.charReceived;
      }

      charStr += buffer.toString(this.encoding, 0, end);

      var end = charStr.length - 1;
      var charCode = charStr.charCodeAt(end);
      // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character
      if (charCode >= 0xD800 && charCode <= 0xDBFF) {
        var size = this.surrogateSize;
        this.charLength += size;
        this.charReceived += size;
        this.charBuffer.copy(this.charBuffer, size, 0, size);
        buffer.copy(this.charBuffer, 0, 0, size);
        return charStr.substring(0, end);
      }

      // or just emit the charStr
      return charStr;
    };

    // detectIncompleteChar determines if there is an incomplete UTF-8 character at
    // the end of the given buffer. If so, it sets this.charLength to the byte
    // length that character, and sets this.charReceived to the number of bytes
    // that are available for this character.
    StringDecoder.prototype.detectIncompleteChar = function(buffer) {
      // determine how many bytes we have to check at the end of this buffer
      var i = (buffer.length >= 3) ? 3 : buffer.length;

      // Figure out if one of the last i bytes of our buffer announces an
      // incomplete char.
      for (; i > 0; i--) {
        var c = buffer[buffer.length - i];

        // See http://en.wikipedia.org/wiki/UTF-8#Description

        // 110XXXXX
        if (i == 1 && c >> 5 == 0x06) {
          this.charLength = 2;
          break;
        }

        // 1110XXXX
        if (i <= 2 && c >> 4 == 0x0E) {
          this.charLength = 3;
          break;
        }

        // 11110XXX
        if (i <= 3 && c >> 3 == 0x1E) {
          this.charLength = 4;
          break;
        }
      }
      this.charReceived = i;
    };

    StringDecoder.prototype.end = function(buffer) {
      var res = '';
      if (buffer && buffer.length)
        res = this.write(buffer);

      if (this.charReceived) {
        var cr = this.charReceived;
        var buf = this.charBuffer;
        var enc = this.encoding;
        res += buf.slice(0, cr).toString(enc);
      }

      return res;
    };

    function passThroughWrite(buffer) {
      return buffer.toString(this.encoding);
    }

    function utf16DetectIncompleteChar(buffer) {
      this.charReceived = buffer.length % 2;
      this.charLength = this.charReceived ? 2 : 0;
    }

    function base64DetectIncompleteChar(buffer) {
      this.charReceived = buffer.length % 3;
      this.charLength = this.charReceived ? 3 : 0;
    }

    Readable.ReadableState = ReadableState;

    var debug = debuglog('stream');
    inherits$1(Readable, EventEmitter);

    function prependListener(emitter, event, fn) {
      // Sadly this is not cacheable as some libraries bundle their own
      // event emitter implementation with them.
      if (typeof emitter.prependListener === 'function') {
        return emitter.prependListener(event, fn);
      } else {
        // This is a hack to make sure that our error handler is attached before any
        // userland ones.  NEVER DO THIS. This is here only because this code needs
        // to continue to work with older versions of Node.js that do not include
        // the prependListener() method. The goal is to eventually remove this hack.
        if (!emitter._events || !emitter._events[event])
          emitter.on(event, fn);
        else if (Array.isArray(emitter._events[event]))
          emitter._events[event].unshift(fn);
        else
          emitter._events[event] = [fn, emitter._events[event]];
      }
    }
    function listenerCount$1 (emitter, type) {
      return emitter.listeners(type).length;
    }
    function ReadableState(options, stream) {

      options = options || {};

      // object stream flag. Used to make read(n) ignore n and to
      // make all the buffer merging and length checks go away
      this.objectMode = !!options.objectMode;

      if (stream instanceof Duplex) this.objectMode = this.objectMode || !!options.readableObjectMode;

      // the point at which it stops calling _read() to fill the buffer
      // Note: 0 is a valid value, means "don't call _read preemptively ever"
      var hwm = options.highWaterMark;
      var defaultHwm = this.objectMode ? 16 : 16 * 1024;
      this.highWaterMark = hwm || hwm === 0 ? hwm : defaultHwm;

      // cast to ints.
      this.highWaterMark = ~ ~this.highWaterMark;

      // A linked list is used to store data chunks instead of an array because the
      // linked list can remove elements from the beginning faster than
      // array.shift()
      this.buffer = new BufferList();
      this.length = 0;
      this.pipes = null;
      this.pipesCount = 0;
      this.flowing = null;
      this.ended = false;
      this.endEmitted = false;
      this.reading = false;

      // a flag to be able to tell if the onwrite cb is called immediately,
      // or on a later tick.  We set this to true at first, because any
      // actions that shouldn't happen until "later" should generally also
      // not happen before the first write call.
      this.sync = true;

      // whenever we return null, then we set a flag to say
      // that we're awaiting a 'readable' event emission.
      this.needReadable = false;
      this.emittedReadable = false;
      this.readableListening = false;
      this.resumeScheduled = false;

      // Crypto is kind of old and crusty.  Historically, its default string
      // encoding is 'binary' so we have to make this configurable.
      // Everything else in the universe uses 'utf8', though.
      this.defaultEncoding = options.defaultEncoding || 'utf8';

      // when piping, we only care about 'readable' events that happen
      // after read()ing all the bytes and not getting any pushback.
      this.ranOut = false;

      // the number of writers that are awaiting a drain event in .pipe()s
      this.awaitDrain = 0;

      // if true, a maybeReadMore has been scheduled
      this.readingMore = false;

      this.decoder = null;
      this.encoding = null;
      if (options.encoding) {
        this.decoder = new StringDecoder(options.encoding);
        this.encoding = options.encoding;
      }
    }
    function Readable(options) {

      if (!(this instanceof Readable)) return new Readable(options);

      this._readableState = new ReadableState(options, this);

      // legacy
      this.readable = true;

      if (options && typeof options.read === 'function') this._read = options.read;

      EventEmitter.call(this);
    }

    // Manually shove something into the read() buffer.
    // This returns true if the highWaterMark has not been hit yet,
    // similar to how Writable.write() returns true if you should
    // write() some more.
    Readable.prototype.push = function (chunk, encoding) {
      var state = this._readableState;

      if (!state.objectMode && typeof chunk === 'string') {
        encoding = encoding || state.defaultEncoding;
        if (encoding !== state.encoding) {
          chunk = Buffer.from(chunk, encoding);
          encoding = '';
        }
      }

      return readableAddChunk(this, state, chunk, encoding, false);
    };

    // Unshift should *always* be something directly out of read()
    Readable.prototype.unshift = function (chunk) {
      var state = this._readableState;
      return readableAddChunk(this, state, chunk, '', true);
    };

    Readable.prototype.isPaused = function () {
      return this._readableState.flowing === false;
    };

    function readableAddChunk(stream, state, chunk, encoding, addToFront) {
      var er = chunkInvalid(state, chunk);
      if (er) {
        stream.emit('error', er);
      } else if (chunk === null) {
        state.reading = false;
        onEofChunk(stream, state);
      } else if (state.objectMode || chunk && chunk.length > 0) {
        if (state.ended && !addToFront) {
          var e = new Error('stream.push() after EOF');
          stream.emit('error', e);
        } else if (state.endEmitted && addToFront) {
          var _e = new Error('stream.unshift() after end event');
          stream.emit('error', _e);
        } else {
          var skipAdd;
          if (state.decoder && !addToFront && !encoding) {
            chunk = state.decoder.write(chunk);
            skipAdd = !state.objectMode && chunk.length === 0;
          }

          if (!addToFront) state.reading = false;

          // Don't add to the buffer if we've decoded to an empty string chunk and
          // we're not in object mode
          if (!skipAdd) {
            // if we want the data now, just emit it.
            if (state.flowing && state.length === 0 && !state.sync) {
              stream.emit('data', chunk);
              stream.read(0);
            } else {
              // update the buffer info.
              state.length += state.objectMode ? 1 : chunk.length;
              if (addToFront) state.buffer.unshift(chunk);else state.buffer.push(chunk);

              if (state.needReadable) emitReadable(stream);
            }
          }

          maybeReadMore(stream, state);
        }
      } else if (!addToFront) {
        state.reading = false;
      }

      return needMoreData(state);
    }

    // if it's past the high water mark, we can push in some more.
    // Also, if we have no data yet, we can stand some
    // more bytes.  This is to work around cases where hwm=0,
    // such as the repl.  Also, if the push() triggered a
    // readable event, and the user called read(largeNumber) such that
    // needReadable was set, then we ought to push more, so that another
    // 'readable' event will be triggered.
    function needMoreData(state) {
      return !state.ended && (state.needReadable || state.length < state.highWaterMark || state.length === 0);
    }

    // backwards compatibility.
    Readable.prototype.setEncoding = function (enc) {
      this._readableState.decoder = new StringDecoder(enc);
      this._readableState.encoding = enc;
      return this;
    };

    // Don't raise the hwm > 8MB
    var MAX_HWM = 0x800000;
    function computeNewHighWaterMark(n) {
      if (n >= MAX_HWM) {
        n = MAX_HWM;
      } else {
        // Get the next highest power of 2 to prevent increasing hwm excessively in
        // tiny amounts
        n--;
        n |= n >>> 1;
        n |= n >>> 2;
        n |= n >>> 4;
        n |= n >>> 8;
        n |= n >>> 16;
        n++;
      }
      return n;
    }

    // This function is designed to be inlinable, so please take care when making
    // changes to the function body.
    function howMuchToRead(n, state) {
      if (n <= 0 || state.length === 0 && state.ended) return 0;
      if (state.objectMode) return 1;
      if (n !== n) {
        // Only flow one buffer at a time
        if (state.flowing && state.length) return state.buffer.head.data.length;else return state.length;
      }
      // If we're asking for more than the current hwm, then raise the hwm.
      if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);
      if (n <= state.length) return n;
      // Don't have enough
      if (!state.ended) {
        state.needReadable = true;
        return 0;
      }
      return state.length;
    }

    // you can override either this method, or the async _read(n) below.
    Readable.prototype.read = function (n) {
      debug('read', n);
      n = parseInt(n, 10);
      var state = this._readableState;
      var nOrig = n;

      if (n !== 0) state.emittedReadable = false;

      // if we're doing read(0) to trigger a readable event, but we
      // already have a bunch of data in the buffer, then just trigger
      // the 'readable' event and move on.
      if (n === 0 && state.needReadable && (state.length >= state.highWaterMark || state.ended)) {
        debug('read: emitReadable', state.length, state.ended);
        if (state.length === 0 && state.ended) endReadable(this);else emitReadable(this);
        return null;
      }

      n = howMuchToRead(n, state);

      // if we've ended, and we're now clear, then finish it up.
      if (n === 0 && state.ended) {
        if (state.length === 0) endReadable(this);
        return null;
      }

      // All the actual chunk generation logic needs to be
      // *below* the call to _read.  The reason is that in certain
      // synthetic stream cases, such as passthrough streams, _read
      // may be a completely synchronous operation which may change
      // the state of the read buffer, providing enough data when
      // before there was *not* enough.
      //
      // So, the steps are:
      // 1. Figure out what the state of things will be after we do
      // a read from the buffer.
      //
      // 2. If that resulting state will trigger a _read, then call _read.
      // Note that this may be asynchronous, or synchronous.  Yes, it is
      // deeply ugly to write APIs this way, but that still doesn't mean
      // that the Readable class should behave improperly, as streams are
      // designed to be sync/async agnostic.
      // Take note if the _read call is sync or async (ie, if the read call
      // has returned yet), so that we know whether or not it's safe to emit
      // 'readable' etc.
      //
      // 3. Actually pull the requested chunks out of the buffer and return.

      // if we need a readable event, then we need to do some reading.
      var doRead = state.needReadable;
      debug('need readable', doRead);

      // if we currently have less than the highWaterMark, then also read some
      if (state.length === 0 || state.length - n < state.highWaterMark) {
        doRead = true;
        debug('length less than watermark', doRead);
      }

      // however, if we've ended, then there's no point, and if we're already
      // reading, then it's unnecessary.
      if (state.ended || state.reading) {
        doRead = false;
        debug('reading or ended', doRead);
      } else if (doRead) {
        debug('do read');
        state.reading = true;
        state.sync = true;
        // if the length is currently zero, then we *need* a readable event.
        if (state.length === 0) state.needReadable = true;
        // call internal read method
        this._read(state.highWaterMark);
        state.sync = false;
        // If _read pushed data synchronously, then `reading` will be false,
        // and we need to re-evaluate how much data we can return to the user.
        if (!state.reading) n = howMuchToRead(nOrig, state);
      }

      var ret;
      if (n > 0) ret = fromList(n, state);else ret = null;

      if (ret === null) {
        state.needReadable = true;
        n = 0;
      } else {
        state.length -= n;
      }

      if (state.length === 0) {
        // If we have nothing in the buffer, then we want to know
        // as soon as we *do* get something into the buffer.
        if (!state.ended) state.needReadable = true;

        // If we tried to read() past the EOF, then emit end on the next tick.
        if (nOrig !== n && state.ended) endReadable(this);
      }

      if (ret !== null) this.emit('data', ret);

      return ret;
    };

    function chunkInvalid(state, chunk) {
      var er = null;
      if (!isBuffer(chunk) && typeof chunk !== 'string' && chunk !== null && chunk !== undefined && !state.objectMode) {
        er = new TypeError('Invalid non-string/buffer chunk');
      }
      return er;
    }

    function onEofChunk(stream, state) {
      if (state.ended) return;
      if (state.decoder) {
        var chunk = state.decoder.end();
        if (chunk && chunk.length) {
          state.buffer.push(chunk);
          state.length += state.objectMode ? 1 : chunk.length;
        }
      }
      state.ended = true;

      // emit 'readable' now to make sure it gets picked up.
      emitReadable(stream);
    }

    // Don't emit readable right away in sync mode, because this can trigger
    // another read() call => stack overflow.  This way, it might trigger
    // a nextTick recursion warning, but that's not so bad.
    function emitReadable(stream) {
      var state = stream._readableState;
      state.needReadable = false;
      if (!state.emittedReadable) {
        debug('emitReadable', state.flowing);
        state.emittedReadable = true;
        if (state.sync) nextTick(emitReadable_, stream);else emitReadable_(stream);
      }
    }

    function emitReadable_(stream) {
      debug('emit readable');
      stream.emit('readable');
      flow(stream);
    }

    // at this point, the user has presumably seen the 'readable' event,
    // and called read() to consume some data.  that may have triggered
    // in turn another _read(n) call, in which case reading = true if
    // it's in progress.
    // However, if we're not ended, or reading, and the length < hwm,
    // then go ahead and try to read some more preemptively.
    function maybeReadMore(stream, state) {
      if (!state.readingMore) {
        state.readingMore = true;
        nextTick(maybeReadMore_, stream, state);
      }
    }

    function maybeReadMore_(stream, state) {
      var len = state.length;
      while (!state.reading && !state.flowing && !state.ended && state.length < state.highWaterMark) {
        debug('maybeReadMore read 0');
        stream.read(0);
        if (len === state.length)
          // didn't get any data, stop spinning.
          break;else len = state.length;
      }
      state.readingMore = false;
    }

    // abstract method.  to be overridden in specific implementation classes.
    // call cb(er, data) where data is <= n in length.
    // for virtual (non-string, non-buffer) streams, "length" is somewhat
    // arbitrary, and perhaps not very meaningful.
    Readable.prototype._read = function (n) {
      this.emit('error', new Error('not implemented'));
    };

    Readable.prototype.pipe = function (dest, pipeOpts) {
      var src = this;
      var state = this._readableState;

      switch (state.pipesCount) {
        case 0:
          state.pipes = dest;
          break;
        case 1:
          state.pipes = [state.pipes, dest];
          break;
        default:
          state.pipes.push(dest);
          break;
      }
      state.pipesCount += 1;
      debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);

      var doEnd = (!pipeOpts || pipeOpts.end !== false);

      var endFn = doEnd ? onend : cleanup;
      if (state.endEmitted) nextTick(endFn);else src.once('end', endFn);

      dest.on('unpipe', onunpipe);
      function onunpipe(readable) {
        debug('onunpipe');
        if (readable === src) {
          cleanup();
        }
      }

      function onend() {
        debug('onend');
        dest.end();
      }

      // when the dest drains, it reduces the awaitDrain counter
      // on the source.  This would be more elegant with a .once()
      // handler in flow(), but adding and removing repeatedly is
      // too slow.
      var ondrain = pipeOnDrain(src);
      dest.on('drain', ondrain);

      var cleanedUp = false;
      function cleanup() {
        debug('cleanup');
        // cleanup event handlers once the pipe is broken
        dest.removeListener('close', onclose);
        dest.removeListener('finish', onfinish);
        dest.removeListener('drain', ondrain);
        dest.removeListener('error', onerror);
        dest.removeListener('unpipe', onunpipe);
        src.removeListener('end', onend);
        src.removeListener('end', cleanup);
        src.removeListener('data', ondata);

        cleanedUp = true;

        // if the reader is waiting for a drain event from this
        // specific writer, then it would cause it to never start
        // flowing again.
        // So, if this is awaiting a drain, then we just call it now.
        // If we don't know, then assume that we are waiting for one.
        if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();
      }

      // If the user pushes more data while we're writing to dest then we'll end up
      // in ondata again. However, we only want to increase awaitDrain once because
      // dest will only emit one 'drain' event for the multiple writes.
      // => Introduce a guard on increasing awaitDrain.
      var increasedAwaitDrain = false;
      src.on('data', ondata);
      function ondata(chunk) {
        debug('ondata');
        increasedAwaitDrain = false;
        var ret = dest.write(chunk);
        if (false === ret && !increasedAwaitDrain) {
          // If the user unpiped during `dest.write()`, it is possible
          // to get stuck in a permanently paused state if that write
          // also returned false.
          // => Check whether `dest` is still a piping destination.
          if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {
            debug('false write response, pause', src._readableState.awaitDrain);
            src._readableState.awaitDrain++;
            increasedAwaitDrain = true;
          }
          src.pause();
        }
      }

      // if the dest has an error, then stop piping into it.
      // however, don't suppress the throwing behavior for this.
      function onerror(er) {
        debug('onerror', er);
        unpipe();
        dest.removeListener('error', onerror);
        if (listenerCount$1(dest, 'error') === 0) dest.emit('error', er);
      }

      // Make sure our error handler is attached before userland ones.
      prependListener(dest, 'error', onerror);

      // Both close and finish should trigger unpipe, but only once.
      function onclose() {
        dest.removeListener('finish', onfinish);
        unpipe();
      }
      dest.once('close', onclose);
      function onfinish() {
        debug('onfinish');
        dest.removeListener('close', onclose);
        unpipe();
      }
      dest.once('finish', onfinish);

      function unpipe() {
        debug('unpipe');
        src.unpipe(dest);
      }

      // tell the dest that it's being piped to
      dest.emit('pipe', src);

      // start the flow if it hasn't been started already.
      if (!state.flowing) {
        debug('pipe resume');
        src.resume();
      }

      return dest;
    };

    function pipeOnDrain(src) {
      return function () {
        var state = src._readableState;
        debug('pipeOnDrain', state.awaitDrain);
        if (state.awaitDrain) state.awaitDrain--;
        if (state.awaitDrain === 0 && src.listeners('data').length) {
          state.flowing = true;
          flow(src);
        }
      };
    }

    Readable.prototype.unpipe = function (dest) {
      var state = this._readableState;

      // if we're not piping anywhere, then do nothing.
      if (state.pipesCount === 0) return this;

      // just one destination.  most common case.
      if (state.pipesCount === 1) {
        // passed in one, but it's not the right one.
        if (dest && dest !== state.pipes) return this;

        if (!dest) dest = state.pipes;

        // got a match.
        state.pipes = null;
        state.pipesCount = 0;
        state.flowing = false;
        if (dest) dest.emit('unpipe', this);
        return this;
      }

      // slow case. multiple pipe destinations.

      if (!dest) {
        // remove all.
        var dests = state.pipes;
        var len = state.pipesCount;
        state.pipes = null;
        state.pipesCount = 0;
        state.flowing = false;

        for (var _i = 0; _i < len; _i++) {
          dests[_i].emit('unpipe', this);
        }return this;
      }

      // try to find the right one.
      var i = indexOf(state.pipes, dest);
      if (i === -1) return this;

      state.pipes.splice(i, 1);
      state.pipesCount -= 1;
      if (state.pipesCount === 1) state.pipes = state.pipes[0];

      dest.emit('unpipe', this);

      return this;
    };

    // set up data events if they are asked for
    // Ensure readable listeners eventually get something
    Readable.prototype.on = function (ev, fn) {
      var res = EventEmitter.prototype.on.call(this, ev, fn);

      if (ev === 'data') {
        // Start flowing on next tick if stream isn't explicitly paused
        if (this._readableState.flowing !== false) this.resume();
      } else if (ev === 'readable') {
        var state = this._readableState;
        if (!state.endEmitted && !state.readableListening) {
          state.readableListening = state.needReadable = true;
          state.emittedReadable = false;
          if (!state.reading) {
            nextTick(nReadingNextTick, this);
          } else if (state.length) {
            emitReadable(this, state);
          }
        }
      }

      return res;
    };
    Readable.prototype.addListener = Readable.prototype.on;

    function nReadingNextTick(self) {
      debug('readable nexttick read 0');
      self.read(0);
    }

    // pause() and resume() are remnants of the legacy readable stream API
    // If the user uses them, then switch into old mode.
    Readable.prototype.resume = function () {
      var state = this._readableState;
      if (!state.flowing) {
        debug('resume');
        state.flowing = true;
        resume(this, state);
      }
      return this;
    };

    function resume(stream, state) {
      if (!state.resumeScheduled) {
        state.resumeScheduled = true;
        nextTick(resume_, stream, state);
      }
    }

    function resume_(stream, state) {
      if (!state.reading) {
        debug('resume read 0');
        stream.read(0);
      }

      state.resumeScheduled = false;
      state.awaitDrain = 0;
      stream.emit('resume');
      flow(stream);
      if (state.flowing && !state.reading) stream.read(0);
    }

    Readable.prototype.pause = function () {
      debug('call pause flowing=%j', this._readableState.flowing);
      if (false !== this._readableState.flowing) {
        debug('pause');
        this._readableState.flowing = false;
        this.emit('pause');
      }
      return this;
    };

    function flow(stream) {
      var state = stream._readableState;
      debug('flow', state.flowing);
      while (state.flowing && stream.read() !== null) {}
    }

    // wrap an old-style stream as the async data source.
    // This is *not* part of the readable stream interface.
    // It is an ugly unfortunate mess of history.
    Readable.prototype.wrap = function (stream) {
      var state = this._readableState;
      var paused = false;

      var self = this;
      stream.on('end', function () {
        debug('wrapped end');
        if (state.decoder && !state.ended) {
          var chunk = state.decoder.end();
          if (chunk && chunk.length) self.push(chunk);
        }

        self.push(null);
      });

      stream.on('data', function (chunk) {
        debug('wrapped data');
        if (state.decoder) chunk = state.decoder.write(chunk);

        // don't skip over falsy values in objectMode
        if (state.objectMode && (chunk === null || chunk === undefined)) return;else if (!state.objectMode && (!chunk || !chunk.length)) return;

        var ret = self.push(chunk);
        if (!ret) {
          paused = true;
          stream.pause();
        }
      });

      // proxy all the other methods.
      // important when wrapping filters and duplexes.
      for (var i in stream) {
        if (this[i] === undefined && typeof stream[i] === 'function') {
          this[i] = function (method) {
            return function () {
              return stream[method].apply(stream, arguments);
            };
          }(i);
        }
      }

      // proxy certain important events.
      var events = ['error', 'close', 'destroy', 'pause', 'resume'];
      forEach(events, function (ev) {
        stream.on(ev, self.emit.bind(self, ev));
      });

      // when we try to consume some more bytes, simply unpause the
      // underlying stream.
      self._read = function (n) {
        debug('wrapped _read', n);
        if (paused) {
          paused = false;
          stream.resume();
        }
      };

      return self;
    };

    // exposed for testing purposes only.
    Readable._fromList = fromList;

    // Pluck off n bytes from an array of buffers.
    // Length is the combined lengths of all the buffers in the list.
    // This function is designed to be inlinable, so please take care when making
    // changes to the function body.
    function fromList(n, state) {
      // nothing buffered
      if (state.length === 0) return null;

      var ret;
      if (state.objectMode) ret = state.buffer.shift();else if (!n || n >= state.length) {
        // read it all, truncate the list
        if (state.decoder) ret = state.buffer.join('');else if (state.buffer.length === 1) ret = state.buffer.head.data;else ret = state.buffer.concat(state.length);
        state.buffer.clear();
      } else {
        // read part of list
        ret = fromListPartial(n, state.buffer, state.decoder);
      }

      return ret;
    }

    // Extracts only enough buffered data to satisfy the amount requested.
    // This function is designed to be inlinable, so please take care when making
    // changes to the function body.
    function fromListPartial(n, list, hasStrings) {
      var ret;
      if (n < list.head.data.length) {
        // slice is the same for buffers and strings
        ret = list.head.data.slice(0, n);
        list.head.data = list.head.data.slice(n);
      } else if (n === list.head.data.length) {
        // first chunk is a perfect match
        ret = list.shift();
      } else {
        // result spans more than one buffer
        ret = hasStrings ? copyFromBufferString(n, list) : copyFromBuffer(n, list);
      }
      return ret;
    }

    // Copies a specified amount of characters from the list of buffered data
    // chunks.
    // This function is designed to be inlinable, so please take care when making
    // changes to the function body.
    function copyFromBufferString(n, list) {
      var p = list.head;
      var c = 1;
      var ret = p.data;
      n -= ret.length;
      while (p = p.next) {
        var str = p.data;
        var nb = n > str.length ? str.length : n;
        if (nb === str.length) ret += str;else ret += str.slice(0, n);
        n -= nb;
        if (n === 0) {
          if (nb === str.length) {
            ++c;
            if (p.next) list.head = p.next;else list.head = list.tail = null;
          } else {
            list.head = p;
            p.data = str.slice(nb);
          }
          break;
        }
        ++c;
      }
      list.length -= c;
      return ret;
    }

    // Copies a specified amount of bytes from the list of buffered data chunks.
    // This function is designed to be inlinable, so please take care when making
    // changes to the function body.
    function copyFromBuffer(n, list) {
      var ret = Buffer.allocUnsafe(n);
      var p = list.head;
      var c = 1;
      p.data.copy(ret);
      n -= p.data.length;
      while (p = p.next) {
        var buf = p.data;
        var nb = n > buf.length ? buf.length : n;
        buf.copy(ret, ret.length - n, 0, nb);
        n -= nb;
        if (n === 0) {
          if (nb === buf.length) {
            ++c;
            if (p.next) list.head = p.next;else list.head = list.tail = null;
          } else {
            list.head = p;
            p.data = buf.slice(nb);
          }
          break;
        }
        ++c;
      }
      list.length -= c;
      return ret;
    }

    function endReadable(stream) {
      var state = stream._readableState;

      // If we get here before consuming all the bytes, then that is a
      // bug in node.  Should never happen.
      if (state.length > 0) throw new Error('"endReadable()" called on non-empty stream');

      if (!state.endEmitted) {
        state.ended = true;
        nextTick(endReadableNT, state, stream);
      }
    }

    function endReadableNT(state, stream) {
      // Check that we didn't get one last unshift.
      if (!state.endEmitted && state.length === 0) {
        state.endEmitted = true;
        stream.readable = false;
        stream.emit('end');
      }
    }

    function forEach(xs, f) {
      for (var i = 0, l = xs.length; i < l; i++) {
        f(xs[i], i);
      }
    }

    function indexOf(xs, x) {
      for (var i = 0, l = xs.length; i < l; i++) {
        if (xs[i] === x) return i;
      }
      return -1;
    }

    // A bit simpler than readable streams.
    Writable.WritableState = WritableState;
    inherits$1(Writable, EventEmitter);

    function nop() {}

    function WriteReq(chunk, encoding, cb) {
      this.chunk = chunk;
      this.encoding = encoding;
      this.callback = cb;
      this.next = null;
    }

    function WritableState(options, stream) {
      Object.defineProperty(this, 'buffer', {
        get: deprecate(function () {
          return this.getBuffer();
        }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.')
      });
      options = options || {};

      // object stream flag to indicate whether or not this stream
      // contains buffers or objects.
      this.objectMode = !!options.objectMode;

      if (stream instanceof Duplex) this.objectMode = this.objectMode || !!options.writableObjectMode;

      // the point at which write() starts returning false
      // Note: 0 is a valid value, means that we always return false if
      // the entire buffer is not flushed immediately on write()
      var hwm = options.highWaterMark;
      var defaultHwm = this.objectMode ? 16 : 16 * 1024;
      this.highWaterMark = hwm || hwm === 0 ? hwm : defaultHwm;

      // cast to ints.
      this.highWaterMark = ~ ~this.highWaterMark;

      this.needDrain = false;
      // at the start of calling end()
      this.ending = false;
      // when end() has been called, and returned
      this.ended = false;
      // when 'finish' is emitted
      this.finished = false;

      // should we decode strings into buffers before passing to _write?
      // this is here so that some node-core streams can optimize string
      // handling at a lower level.
      var noDecode = options.decodeStrings === false;
      this.decodeStrings = !noDecode;

      // Crypto is kind of old and crusty.  Historically, its default string
      // encoding is 'binary' so we have to make this configurable.
      // Everything else in the universe uses 'utf8', though.
      this.defaultEncoding = options.defaultEncoding || 'utf8';

      // not an actual buffer we keep track of, but a measurement
      // of how much we're waiting to get pushed to some underlying
      // socket or file.
      this.length = 0;

      // a flag to see when we're in the middle of a write.
      this.writing = false;

      // when true all writes will be buffered until .uncork() call
      this.corked = 0;

      // a flag to be able to tell if the onwrite cb is called immediately,
      // or on a later tick.  We set this to true at first, because any
      // actions that shouldn't happen until "later" should generally also
      // not happen before the first write call.
      this.sync = true;

      // a flag to know if we're processing previously buffered items, which
      // may call the _write() callback in the same tick, so that we don't
      // end up in an overlapped onwrite situation.
      this.bufferProcessing = false;

      // the callback that's passed to _write(chunk,cb)
      this.onwrite = function (er) {
        onwrite(stream, er);
      };

      // the callback that the user supplies to write(chunk,encoding,cb)
      this.writecb = null;

      // the amount that is being written when _write is called.
      this.writelen = 0;

      this.bufferedRequest = null;
      this.lastBufferedRequest = null;

      // number of pending user-supplied write callbacks
      // this must be 0 before 'finish' can be emitted
      this.pendingcb = 0;

      // emit prefinish if the only thing we're waiting for is _write cbs
      // This is relevant for synchronous Transform streams
      this.prefinished = false;

      // True if the error was already emitted and should not be thrown again
      this.errorEmitted = false;

      // count buffered requests
      this.bufferedRequestCount = 0;

      // allocate the first CorkedRequest, there is always
      // one allocated and free to use, and we maintain at most two
      this.corkedRequestsFree = new CorkedRequest(this);
    }

    WritableState.prototype.getBuffer = function writableStateGetBuffer() {
      var current = this.bufferedRequest;
      var out = [];
      while (current) {
        out.push(current);
        current = current.next;
      }
      return out;
    };
    function Writable(options) {

      // Writable ctor is applied to Duplexes, though they're not
      // instanceof Writable, they're instanceof Readable.
      if (!(this instanceof Writable) && !(this instanceof Duplex)) return new Writable(options);

      this._writableState = new WritableState(options, this);

      // legacy.
      this.writable = true;

      if (options) {
        if (typeof options.write === 'function') this._write = options.write;

        if (typeof options.writev === 'function') this._writev = options.writev;
      }

      EventEmitter.call(this);
    }

    // Otherwise people can pipe Writable streams, which is just wrong.
    Writable.prototype.pipe = function () {
      this.emit('error', new Error('Cannot pipe, not readable'));
    };

    function writeAfterEnd(stream, cb) {
      var er = new Error('write after end');
      // TODO: defer error events consistently everywhere, not just the cb
      stream.emit('error', er);
      nextTick(cb, er);
    }

    // If we get something that is not a buffer, string, null, or undefined,
    // and we're not in objectMode, then that's an error.
    // Otherwise stream chunks are all considered to be of length=1, and the
    // watermarks determine how many objects to keep in the buffer, rather than
    // how many bytes or characters.
    function validChunk(stream, state, chunk, cb) {
      var valid = true;
      var er = false;
      // Always throw error if a null is written
      // if we are not in object mode then throw
      // if it is not a buffer, string, or undefined.
      if (chunk === null) {
        er = new TypeError('May not write null values to stream');
      } else if (!Buffer.isBuffer(chunk) && typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
        er = new TypeError('Invalid non-string/buffer chunk');
      }
      if (er) {
        stream.emit('error', er);
        nextTick(cb, er);
        valid = false;
      }
      return valid;
    }

    Writable.prototype.write = function (chunk, encoding, cb) {
      var state = this._writableState;
      var ret = false;

      if (typeof encoding === 'function') {
        cb = encoding;
        encoding = null;
      }

      if (Buffer.isBuffer(chunk)) encoding = 'buffer';else if (!encoding) encoding = state.defaultEncoding;

      if (typeof cb !== 'function') cb = nop;

      if (state.ended) writeAfterEnd(this, cb);else if (validChunk(this, state, chunk, cb)) {
        state.pendingcb++;
        ret = writeOrBuffer(this, state, chunk, encoding, cb);
      }

      return ret;
    };

    Writable.prototype.cork = function () {
      var state = this._writableState;

      state.corked++;
    };

    Writable.prototype.uncork = function () {
      var state = this._writableState;

      if (state.corked) {
        state.corked--;

        if (!state.writing && !state.corked && !state.finished && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);
      }
    };

    Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
      // node::ParseEncoding() requires lower case.
      if (typeof encoding === 'string') encoding = encoding.toLowerCase();
      if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1)) throw new TypeError('Unknown encoding: ' + encoding);
      this._writableState.defaultEncoding = encoding;
      return this;
    };

    function decodeChunk(state, chunk, encoding) {
      if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {
        chunk = Buffer.from(chunk, encoding);
      }
      return chunk;
    }

    // if we're already writing something, then just put this
    // in the queue, and wait our turn.  Otherwise, call _write
    // If we return false, then we need a drain event, so set that flag.
    function writeOrBuffer(stream, state, chunk, encoding, cb) {
      chunk = decodeChunk(state, chunk, encoding);

      if (Buffer.isBuffer(chunk)) encoding = 'buffer';
      var len = state.objectMode ? 1 : chunk.length;

      state.length += len;

      var ret = state.length < state.highWaterMark;
      // we must ensure that previous needDrain will not be reset to false.
      if (!ret) state.needDrain = true;

      if (state.writing || state.corked) {
        var last = state.lastBufferedRequest;
        state.lastBufferedRequest = new WriteReq(chunk, encoding, cb);
        if (last) {
          last.next = state.lastBufferedRequest;
        } else {
          state.bufferedRequest = state.lastBufferedRequest;
        }
        state.bufferedRequestCount += 1;
      } else {
        doWrite(stream, state, false, len, chunk, encoding, cb);
      }

      return ret;
    }

    function doWrite(stream, state, writev, len, chunk, encoding, cb) {
      state.writelen = len;
      state.writecb = cb;
      state.writing = true;
      state.sync = true;
      if (writev) stream._writev(chunk, state.onwrite);else stream._write(chunk, encoding, state.onwrite);
      state.sync = false;
    }

    function onwriteError(stream, state, sync, er, cb) {
      --state.pendingcb;
      if (sync) nextTick(cb, er);else cb(er);

      stream._writableState.errorEmitted = true;
      stream.emit('error', er);
    }

    function onwriteStateUpdate(state) {
      state.writing = false;
      state.writecb = null;
      state.length -= state.writelen;
      state.writelen = 0;
    }

    function onwrite(stream, er) {
      var state = stream._writableState;
      var sync = state.sync;
      var cb = state.writecb;

      onwriteStateUpdate(state);

      if (er) onwriteError(stream, state, sync, er, cb);else {
        // Check if we're actually ready to finish, but don't emit yet
        var finished = needFinish(state);

        if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {
          clearBuffer(stream, state);
        }

        if (sync) {
          /*<replacement>*/
            nextTick(afterWrite, stream, state, finished, cb);
          /*</replacement>*/
        } else {
            afterWrite(stream, state, finished, cb);
          }
      }
    }

    function afterWrite(stream, state, finished, cb) {
      if (!finished) onwriteDrain(stream, state);
      state.pendingcb--;
      cb();
      finishMaybe(stream, state);
    }

    // Must force callback to be called on nextTick, so that we don't
    // emit 'drain' before the write() consumer gets the 'false' return
    // value, and has a chance to attach a 'drain' listener.
    function onwriteDrain(stream, state) {
      if (state.length === 0 && state.needDrain) {
        state.needDrain = false;
        stream.emit('drain');
      }
    }

    // if there's something in the buffer waiting, then process it
    function clearBuffer(stream, state) {
      state.bufferProcessing = true;
      var entry = state.bufferedRequest;

      if (stream._writev && entry && entry.next) {
        // Fast case, write everything using _writev()
        var l = state.bufferedRequestCount;
        var buffer = new Array(l);
        var holder = state.corkedRequestsFree;
        holder.entry = entry;

        var count = 0;
        while (entry) {
          buffer[count] = entry;
          entry = entry.next;
          count += 1;
        }

        doWrite(stream, state, true, state.length, buffer, '', holder.finish);

        // doWrite is almost always async, defer these to save a bit of time
        // as the hot path ends with doWrite
        state.pendingcb++;
        state.lastBufferedRequest = null;
        if (holder.next) {
          state.corkedRequestsFree = holder.next;
          holder.next = null;
        } else {
          state.corkedRequestsFree = new CorkedRequest(state);
        }
      } else {
        // Slow case, write chunks one-by-one
        while (entry) {
          var chunk = entry.chunk;
          var encoding = entry.encoding;
          var cb = entry.callback;
          var len = state.objectMode ? 1 : chunk.length;

          doWrite(stream, state, false, len, chunk, encoding, cb);
          entry = entry.next;
          // if we didn't call the onwrite immediately, then
          // it means that we need to wait until it does.
          // also, that means that the chunk and cb are currently
          // being processed, so move the buffer counter past them.
          if (state.writing) {
            break;
          }
        }

        if (entry === null) state.lastBufferedRequest = null;
      }

      state.bufferedRequestCount = 0;
      state.bufferedRequest = entry;
      state.bufferProcessing = false;
    }

    Writable.prototype._write = function (chunk, encoding, cb) {
      cb(new Error('not implemented'));
    };

    Writable.prototype._writev = null;

    Writable.prototype.end = function (chunk, encoding, cb) {
      var state = this._writableState;

      if (typeof chunk === 'function') {
        cb = chunk;
        chunk = null;
        encoding = null;
      } else if (typeof encoding === 'function') {
        cb = encoding;
        encoding = null;
      }

      if (chunk !== null && chunk !== undefined) this.write(chunk, encoding);

      // .end() fully uncorks
      if (state.corked) {
        state.corked = 1;
        this.uncork();
      }

      // ignore unnecessary end() calls.
      if (!state.ending && !state.finished) endWritable(this, state, cb);
    };

    function needFinish(state) {
      return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
    }

    function prefinish(stream, state) {
      if (!state.prefinished) {
        state.prefinished = true;
        stream.emit('prefinish');
      }
    }

    function finishMaybe(stream, state) {
      var need = needFinish(state);
      if (need) {
        if (state.pendingcb === 0) {
          prefinish(stream, state);
          state.finished = true;
          stream.emit('finish');
        } else {
          prefinish(stream, state);
        }
      }
      return need;
    }

    function endWritable(stream, state, cb) {
      state.ending = true;
      finishMaybe(stream, state);
      if (cb) {
        if (state.finished) nextTick(cb);else stream.once('finish', cb);
      }
      state.ended = true;
      stream.writable = false;
    }

    // It seems a linked list but it is not
    // there will be only 2 of these for each stream
    function CorkedRequest(state) {
      var _this = this;

      this.next = null;
      this.entry = null;

      this.finish = function (err) {
        var entry = _this.entry;
        _this.entry = null;
        while (entry) {
          var cb = entry.callback;
          state.pendingcb--;
          cb(err);
          entry = entry.next;
        }
        if (state.corkedRequestsFree) {
          state.corkedRequestsFree.next = _this;
        } else {
          state.corkedRequestsFree = _this;
        }
      };
    }

    inherits$1(Duplex, Readable);

    var keys = Object.keys(Writable.prototype);
    for (var v = 0; v < keys.length; v++) {
      var method = keys[v];
      if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];
    }
    function Duplex(options) {
      if (!(this instanceof Duplex)) return new Duplex(options);

      Readable.call(this, options);
      Writable.call(this, options);

      if (options && options.readable === false) this.readable = false;

      if (options && options.writable === false) this.writable = false;

      this.allowHalfOpen = true;
      if (options && options.allowHalfOpen === false) this.allowHalfOpen = false;

      this.once('end', onend);
    }

    // the no-half-open enforcer
    function onend() {
      // if we allow half-open state, or if the writable side ended,
      // then we're ok.
      if (this.allowHalfOpen || this._writableState.ended) return;

      // no more data can be written.
      // But allow more writes to happen in this tick.
      nextTick(onEndNT, this);
    }

    function onEndNT(self) {
      self.end();
    }

    // a transform stream is a readable/writable stream where you do
    inherits$1(Transform, Duplex);

    function TransformState(stream) {
      this.afterTransform = function (er, data) {
        return afterTransform(stream, er, data);
      };

      this.needTransform = false;
      this.transforming = false;
      this.writecb = null;
      this.writechunk = null;
      this.writeencoding = null;
    }

    function afterTransform(stream, er, data) {
      var ts = stream._transformState;
      ts.transforming = false;

      var cb = ts.writecb;

      if (!cb) return stream.emit('error', new Error('no writecb in Transform class'));

      ts.writechunk = null;
      ts.writecb = null;

      if (data !== null && data !== undefined) stream.push(data);

      cb(er);

      var rs = stream._readableState;
      rs.reading = false;
      if (rs.needReadable || rs.length < rs.highWaterMark) {
        stream._read(rs.highWaterMark);
      }
    }
    function Transform(options) {
      if (!(this instanceof Transform)) return new Transform(options);

      Duplex.call(this, options);

      this._transformState = new TransformState(this);

      // when the writable side finishes, then flush out anything remaining.
      var stream = this;

      // start out asking for a readable event once data is transformed.
      this._readableState.needReadable = true;

      // we have implemented the _read method, and done the other things
      // that Readable wants before the first _read call, so unset the
      // sync guard flag.
      this._readableState.sync = false;

      if (options) {
        if (typeof options.transform === 'function') this._transform = options.transform;

        if (typeof options.flush === 'function') this._flush = options.flush;
      }

      this.once('prefinish', function () {
        if (typeof this._flush === 'function') this._flush(function (er) {
          done(stream, er);
        });else done(stream);
      });
    }

    Transform.prototype.push = function (chunk, encoding) {
      this._transformState.needTransform = false;
      return Duplex.prototype.push.call(this, chunk, encoding);
    };

    // This is the part where you do stuff!
    // override this function in implementation classes.
    // 'chunk' is an input chunk.
    //
    // Call `push(newChunk)` to pass along transformed output
    // to the readable side.  You may call 'push' zero or more times.
    //
    // Call `cb(err)` when you are done with this chunk.  If you pass
    // an error, then that'll put the hurt on the whole operation.  If you
    // never call cb(), then you'll never get another chunk.
    Transform.prototype._transform = function (chunk, encoding, cb) {
      throw new Error('Not implemented');
    };

    Transform.prototype._write = function (chunk, encoding, cb) {
      var ts = this._transformState;
      ts.writecb = cb;
      ts.writechunk = chunk;
      ts.writeencoding = encoding;
      if (!ts.transforming) {
        var rs = this._readableState;
        if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
      }
    };

    // Doesn't matter what the args are here.
    // _transform does all the work.
    // That we got here means that the readable side wants more data.
    Transform.prototype._read = function (n) {
      var ts = this._transformState;

      if (ts.writechunk !== null && ts.writecb && !ts.transforming) {
        ts.transforming = true;
        this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
      } else {
        // mark that we need a transform, so that any data that comes in
        // will get processed, now that we've asked for it.
        ts.needTransform = true;
      }
    };

    function done(stream, er) {
      if (er) return stream.emit('error', er);

      // if there's nothing in the write buffer, then that means
      // that nothing more will ever be provided
      var ws = stream._writableState;
      var ts = stream._transformState;

      if (ws.length) throw new Error('Calling transform done when ws.length != 0');

      if (ts.transforming) throw new Error('Calling transform done when still transforming');

      return stream.push(null);
    }

    inherits$1(PassThrough, Transform);
    function PassThrough(options) {
      if (!(this instanceof PassThrough)) return new PassThrough(options);

      Transform.call(this, options);
    }

    PassThrough.prototype._transform = function (chunk, encoding, cb) {
      cb(null, chunk);
    };

    inherits$1(Stream, EventEmitter);
    Stream.Readable = Readable;
    Stream.Writable = Writable;
    Stream.Duplex = Duplex;
    Stream.Transform = Transform;
    Stream.PassThrough = PassThrough;

    // Backwards-compat with node 0.4.x
    Stream.Stream = Stream;

    // old-style streams.  Note that the pipe method (the only relevant
    // part of this class) is overridden in the Readable class.

    function Stream() {
      EventEmitter.call(this);
    }

    Stream.prototype.pipe = function(dest, options) {
      var source = this;

      function ondata(chunk) {
        if (dest.writable) {
          if (false === dest.write(chunk) && source.pause) {
            source.pause();
          }
        }
      }

      source.on('data', ondata);

      function ondrain() {
        if (source.readable && source.resume) {
          source.resume();
        }
      }

      dest.on('drain', ondrain);

      // If the 'end' option is not supplied, dest.end() will be called when
      // source gets the 'end' or 'close' events.  Only dest.end() once.
      if (!dest._isStdio && (!options || options.end !== false)) {
        source.on('end', onend);
        source.on('close', onclose);
      }

      var didOnEnd = false;
      function onend() {
        if (didOnEnd) return;
        didOnEnd = true;

        dest.end();
      }


      function onclose() {
        if (didOnEnd) return;
        didOnEnd = true;

        if (typeof dest.destroy === 'function') dest.destroy();
      }

      // don't leave dangling pipes when there are errors.
      function onerror(er) {
        cleanup();
        if (EventEmitter.listenerCount(this, 'error') === 0) {
          throw er; // Unhandled stream error in pipe.
        }
      }

      source.on('error', onerror);
      dest.on('error', onerror);

      // remove all the event listeners that were added.
      function cleanup() {
        source.removeListener('data', ondata);
        dest.removeListener('drain', ondrain);

        source.removeListener('end', onend);
        source.removeListener('close', onclose);

        source.removeListener('error', onerror);
        dest.removeListener('error', onerror);

        source.removeListener('end', cleanup);
        source.removeListener('close', cleanup);

        dest.removeListener('close', cleanup);
      }

      source.on('end', cleanup);
      source.on('close', cleanup);

      dest.on('close', cleanup);

      dest.emit('pipe', source);

      // Allow for unix-like usage: A.pipe(B).pipe(C)
      return dest;
    };

    var lzutf8 = createCommonjsModule(function (module) {
    /*!
     LZ-UTF8 v0.5.5

     Copyright (c) 2018, Rotem Dan
     Released under the MIT license.

     Build date: 2018-07-30 

     Please report any issue at https://github.com/rotemdan/lzutf8.js/issues
    */
    var LZUTF8;
    (function (LZUTF8) {
        LZUTF8.runningInNodeJS = function () {
            return ((typeof process === "object") && (typeof process.versions === "object") && (typeof process.versions.node === "string"));
        };
        LZUTF8.runningInMainNodeJSModule = function () {
            return LZUTF8.runningInNodeJS() && commonjsRequire.main === module;
        };
        LZUTF8.commonJSAvailable = function () {
            return 'object' === "object";
        };
        LZUTF8.runningInWebWorker = function () {
            return typeof window === "undefined" && typeof self === "object" && typeof self.addEventListener === "function" && typeof self.close === "function";
        };
        LZUTF8.runningInNodeChildProcess = function () {
            return LZUTF8.runningInNodeJS() && typeof process.send === "function";
        };
        LZUTF8.runningInNullOrigin = function () {
            if (typeof window !== "object" || typeof window.location !== "object")
                return false;
            return document.location.protocol !== 'http:' && document.location.protocol !== 'https:';
        };
        LZUTF8.webWorkersAvailable = function () {
            if (typeof Worker !== "function" || LZUTF8.runningInNullOrigin())
                return false;
            if (LZUTF8.runningInNodeJS())
                return false;
            if (navigator && navigator.userAgent && navigator.userAgent.indexOf("Android 4.3") >= 0)
                return false;
            return true;
        };
        LZUTF8.log = function (message, appendToDocument) {
            if (appendToDocument === void 0) { appendToDocument = false; }
            if (typeof console !== "object")
                return;
            console.log(message);
            if (appendToDocument && typeof document == "object")
                document.body.innerHTML += message + "<br/>";
        };
        LZUTF8.createErrorMessage = function (exception, title) {
            if (title === void 0) { title = "Unhandled exception"; }
            if (exception == null)
                return title;
            title += ": ";
            if (typeof exception.content === "object") {
                if (LZUTF8.runningInNodeJS()) {
                    return title + exception.content.stack;
                }
                else {
                    var exceptionJSON = JSON.stringify(exception.content);
                    if (exceptionJSON !== "{}")
                        return title + exceptionJSON;
                    else
                        return title + exception.content;
                }
            }
            else if (typeof exception.content === "string") {
                return title + exception.content;
            }
            else {
                return title + exception;
            }
        };
        LZUTF8.printExceptionAndStackTraceToConsole = function (exception, title) {
            if (title === void 0) { title = "Unhandled exception"; }
            LZUTF8.log(LZUTF8.createErrorMessage(exception, title));
        };
        LZUTF8.getGlobalObject = function () {
            if (typeof commonjsGlobal === "object")
                return commonjsGlobal;
            else if (typeof window === "object")
                return window;
            else if (typeof self === "object")
                return self;
            else
                return {};
        };
        LZUTF8.toString = Object.prototype.toString;
        if (LZUTF8.commonJSAvailable())
            module.exports = LZUTF8;
    })(LZUTF8 || (LZUTF8 = {}));
    if (typeof Uint8Array === "function" && new Uint8Array(1).subarray(1).byteLength !== 0) {
        var subarray = function (start, end) {
            var clamp = function (v, min, max) { return v < min ? min : v > max ? max : v; };
            start = start | 0;
            end = end | 0;
            if (arguments.length < 1)
                start = 0;
            if (arguments.length < 2)
                end = this.length;
            if (start < 0)
                start = this.length + start;
            if (end < 0)
                end = this.length + end;
            start = clamp(start, 0, this.length);
            end = clamp(end, 0, this.length);
            var len = end - start;
            if (len < 0)
                len = 0;
            return new this.constructor(this.buffer, this.byteOffset + start * this.BYTES_PER_ELEMENT, len);
        };
        var types = ['Int8Array', 'Uint8Array', 'Uint8ClampedArray', 'Int16Array', 'Uint16Array', 'Int32Array', 'Uint32Array', 'Float32Array', 'Float64Array'];
        var globalObject = void 0;
        if (typeof window === "object")
            globalObject = window;
        else if (typeof self === "object")
            globalObject = self;
        if (globalObject !== undefined) {
            for (var i = 0; i < types.length; i++) {
                if (globalObject[types[i]])
                    globalObject[types[i]].prototype.subarray = subarray;
            }
        }
    }
    var LZUTF8;
    (function (LZUTF8) {
        var AsyncCompressor = (function () {
            function AsyncCompressor() {
            }
            AsyncCompressor.compressAsync = function (input, options, callback) {
                var timer = new LZUTF8.Timer();
                var compressor = new LZUTF8.Compressor();
                if (!callback)
                    throw new TypeError("compressAsync: No callback argument given");
                if (typeof input === "string") {
                    input = LZUTF8.encodeUTF8(input);
                }
                else if (input == null || !(input instanceof Uint8Array)) {
                    callback(undefined, new TypeError("compressAsync: Invalid input argument, only 'string' and 'Uint8Array' are supported"));
                    return;
                }
                var sourceBlocks = LZUTF8.ArrayTools.splitByteArray(input, options.blockSize);
                var compressedBlocks = [];
                var compressBlocksStartingAt = function (index) {
                    if (index < sourceBlocks.length) {
                        var compressedBlock = void 0;
                        try {
                            compressedBlock = compressor.compressBlock(sourceBlocks[index]);
                        }
                        catch (e) {
                            callback(undefined, e);
                            return;
                        }
                        compressedBlocks.push(compressedBlock);
                        if (timer.getElapsedTime() <= 20) {
                            compressBlocksStartingAt(index + 1);
                        }
                        else {
                            LZUTF8.enqueueImmediate(function () { return compressBlocksStartingAt(index + 1); });
                            timer.restart();
                        }
                    }
                    else {
                        var joinedCompressedBlocks_1 = LZUTF8.ArrayTools.concatUint8Arrays(compressedBlocks);
                        LZUTF8.enqueueImmediate(function () {
                            var result;
                            try {
                                result = LZUTF8.CompressionCommon.encodeCompressedBytes(joinedCompressedBlocks_1, options.outputEncoding);
                            }
                            catch (e) {
                                callback(undefined, e);
                                return;
                            }
                            LZUTF8.enqueueImmediate(function () { return callback(result); });
                        });
                    }
                };
                LZUTF8.enqueueImmediate(function () { return compressBlocksStartingAt(0); });
            };
            AsyncCompressor.createCompressionStream = function () {
                var compressor = new LZUTF8.Compressor();
                var NodeStream = Stream;
                var compressionStream = new NodeStream.Transform({ decodeStrings: true, highWaterMark: 65536 });
                compressionStream._transform = function (data, encoding, done) {
                    var buffer;
                    try {
                        buffer = LZUTF8.BufferTools.uint8ArrayToBuffer(compressor.compressBlock(LZUTF8.BufferTools.bufferToUint8Array(data)));
                    }
                    catch (e) {
                        compressionStream.emit("error", e);
                        return;
                    }
                    compressionStream.push(buffer);
                    done();
                };
                return compressionStream;
            };
            return AsyncCompressor;
        }());
        LZUTF8.AsyncCompressor = AsyncCompressor;
    })(LZUTF8 || (LZUTF8 = {}));
    var LZUTF8;
    (function (LZUTF8) {
        var AsyncDecompressor = (function () {
            function AsyncDecompressor() {
            }
            AsyncDecompressor.decompressAsync = function (input, options, callback) {
                if (!callback)
                    throw new TypeError("decompressAsync: No callback argument given");
                var timer = new LZUTF8.Timer();
                try {
                    input = LZUTF8.CompressionCommon.decodeCompressedBytes(input, options.inputEncoding);
                }
                catch (e) {
                    callback(undefined, e);
                    return;
                }
                var decompressor = new LZUTF8.Decompressor();
                var sourceBlocks = LZUTF8.ArrayTools.splitByteArray(input, options.blockSize);
                var decompressedBlocks = [];
                var decompressBlocksStartingAt = function (index) {
                    if (index < sourceBlocks.length) {
                        var decompressedBlock = void 0;
                        try {
                            decompressedBlock = decompressor.decompressBlock(sourceBlocks[index]);
                        }
                        catch (e) {
                            callback(undefined, e);
                            return;
                        }
                        decompressedBlocks.push(decompressedBlock);
                        if (timer.getElapsedTime() <= 20) {
                            decompressBlocksStartingAt(index + 1);
                        }
                        else {
                            LZUTF8.enqueueImmediate(function () { return decompressBlocksStartingAt(index + 1); });
                            timer.restart();
                        }
                    }
                    else {
                        var joinedDecompressedBlocks_1 = LZUTF8.ArrayTools.concatUint8Arrays(decompressedBlocks);
                        LZUTF8.enqueueImmediate(function () {
                            var result;
                            try {
                                result = LZUTF8.CompressionCommon.encodeDecompressedBytes(joinedDecompressedBlocks_1, options.outputEncoding);
                            }
                            catch (e) {
                                callback(undefined, e);
                                return;
                            }
                            LZUTF8.enqueueImmediate(function () { return callback(result); });
                        });
                    }
                };
                LZUTF8.enqueueImmediate(function () { return decompressBlocksStartingAt(0); });
            };
            AsyncDecompressor.createDecompressionStream = function () {
                var decompressor = new LZUTF8.Decompressor();
                var NodeStream = Stream;
                var decompressionStream = new NodeStream.Transform({ decodeStrings: true, highWaterMark: 65536 });
                decompressionStream._transform = function (data, encoding, done) {
                    var buffer;
                    try {
                        buffer = LZUTF8.BufferTools.uint8ArrayToBuffer(decompressor.decompressBlock(LZUTF8.BufferTools.bufferToUint8Array(data)));
                    }
                    catch (e) {
                        decompressionStream.emit("error", e);
                        return;
                    }
                    decompressionStream.push(buffer);
                    done();
                };
                return decompressionStream;
            };
            return AsyncDecompressor;
        }());
        LZUTF8.AsyncDecompressor = AsyncDecompressor;
    })(LZUTF8 || (LZUTF8 = {}));
    var LZUTF8;
    (function (LZUTF8) {
        var WebWorker;
        (function (WebWorker) {
            WebWorker.compressAsync = function (input, options, callback) {
                if (options.inputEncoding == "ByteArray") {
                    if (!(input instanceof Uint8Array)) {
                        callback(undefined, new TypeError("compressAsync: input is not a Uint8Array"));
                        return;
                    }
                }
                var request = {
                    token: Math.random().toString(),
                    type: "compress",
                    data: input,
                    inputEncoding: options.inputEncoding,
                    outputEncoding: options.outputEncoding
                };
                var responseListener = function (e) {
                    var response = e.data;
                    if (!response || response.token != request.token)
                        return;
                    WebWorker.globalWorker.removeEventListener("message", responseListener);
                    if (response.type == "error")
                        callback(undefined, new Error(response.error));
                    else
                        callback(response.data);
                };
                WebWorker.globalWorker.addEventListener("message", responseListener);
                WebWorker.globalWorker.postMessage(request, []);
            };
            WebWorker.decompressAsync = function (input, options, callback) {
                var request = {
                    token: Math.random().toString(),
                    type: "decompress",
                    data: input,
                    inputEncoding: options.inputEncoding,
                    outputEncoding: options.outputEncoding
                };
                var responseListener = function (e) {
                    var response = e.data;
                    if (!response || response.token != request.token)
                        return;
                    WebWorker.globalWorker.removeEventListener("message", responseListener);
                    if (response.type == "error")
                        callback(undefined, new Error(response.error));
                    else
                        callback(response.data);
                };
                WebWorker.globalWorker.addEventListener("message", responseListener);
                WebWorker.globalWorker.postMessage(request, []);
            };
            WebWorker.installWebWorkerIfNeeded = function () {
                if (typeof self == "object" && self.document === undefined && self.addEventListener != undefined) {
                    self.addEventListener("message", function (e) {
                        var request = e.data;
                        if (request.type == "compress") {
                            var compressedData = void 0;
                            try {
                                compressedData = LZUTF8.compress(request.data, { outputEncoding: request.outputEncoding });
                            }
                            catch (e) {
                                self.postMessage({ token: request.token, type: "error", error: LZUTF8.createErrorMessage(e) }, []);
                                return;
                            }
                            var response = {
                                token: request.token,
                                type: "compressionResult",
                                data: compressedData,
                                encoding: request.outputEncoding,
                            };
                            if (response.data instanceof Uint8Array && navigator.appVersion.indexOf("MSIE 10") === -1)
                                self.postMessage(response, [response.data.buffer]);
                            else
                                self.postMessage(response, []);
                        }
                        else if (request.type == "decompress") {
                            var decompressedData = void 0;
                            try {
                                decompressedData = LZUTF8.decompress(request.data, { inputEncoding: request.inputEncoding, outputEncoding: request.outputEncoding });
                            }
                            catch (e) {
                                self.postMessage({ token: request.token, type: "error", error: LZUTF8.createErrorMessage(e) }, []);
                                return;
                            }
                            var response = {
                                token: request.token,
                                type: "decompressionResult",
                                data: decompressedData,
                                encoding: request.outputEncoding,
                            };
                            if (response.data instanceof Uint8Array && navigator.appVersion.indexOf("MSIE 10") === -1)
                                self.postMessage(response, [response.data.buffer]);
                            else
                                self.postMessage(response, []);
                        }
                    });
                    self.addEventListener("error", function (e) {
                        LZUTF8.log(LZUTF8.createErrorMessage(e.error, "Unexpected LZUTF8 WebWorker exception"));
                    });
                }
            };
            WebWorker.createGlobalWorkerIfNeeded = function () {
                if (WebWorker.globalWorker)
                    return true;
                if (!LZUTF8.webWorkersAvailable())
                    return false;
                if (!WebWorker.scriptURI && typeof document === "object") {
                    var scriptElement = document.getElementById("lzutf8");
                    if (scriptElement != null)
                        WebWorker.scriptURI = scriptElement.getAttribute("src") || undefined;
                }
                if (WebWorker.scriptURI) {
                    WebWorker.globalWorker = new Worker(WebWorker.scriptURI);
                    return true;
                }
                else {
                    return false;
                }
            };
            WebWorker.terminate = function () {
                if (WebWorker.globalWorker) {
                    WebWorker.globalWorker.terminate();
                    WebWorker.globalWorker = undefined;
                }
            };
        })(WebWorker = LZUTF8.WebWorker || (LZUTF8.WebWorker = {}));
        WebWorker.installWebWorkerIfNeeded();
    })(LZUTF8 || (LZUTF8 = {}));
    var LZUTF8;
    (function (LZUTF8) {
        var ArraySegment = (function () {
            function ArraySegment(container, startPosition, length) {
                this.container = container;
                this.startPosition = startPosition;
                this.length = length;
            }
            ArraySegment.prototype.get = function (index) {
                return this.container[this.startPosition + index];
            };
            ArraySegment.prototype.getInReversedOrder = function (reverseIndex) {
                return this.container[this.startPosition + this.length - 1 - reverseIndex];
            };
            ArraySegment.prototype.set = function (index, value) {
                this.container[this.startPosition + index] = value;
            };
            return ArraySegment;
        }());
        LZUTF8.ArraySegment = ArraySegment;
    })(LZUTF8 || (LZUTF8 = {}));
    var LZUTF8;
    (function (LZUTF8) {
        var ArrayTools;
        (function (ArrayTools) {
            ArrayTools.copyElements = function (source, sourceIndex, destination, destinationIndex, count) {
                while (count--)
                    destination[destinationIndex++] = source[sourceIndex++];
            };
            ArrayTools.zeroElements = function (collection, index, count) {
                while (count--)
                    collection[index++] = 0;
            };
            ArrayTools.countNonzeroValuesInArray = function (array) {
                var result = 0;
                for (var i = 0; i < array.length; i++)
                    if (array[i])
                        result++;
                return result;
            };
            ArrayTools.truncateStartingElements = function (array, truncatedLength) {
                if (array.length <= truncatedLength)
                    throw new RangeError("truncateStartingElements: Requested length should be smaller than array length");
                var sourcePosition = array.length - truncatedLength;
                for (var i = 0; i < truncatedLength; i++)
                    array[i] = array[sourcePosition + i];
                array.length = truncatedLength;
            };
            ArrayTools.doubleByteArrayCapacity = function (array) {
                var newArray = new Uint8Array(array.length * 2);
                newArray.set(array);
                return newArray;
            };
            ArrayTools.concatUint8Arrays = function (arrays) {
                var totalLength = 0;
                for (var _i = 0, arrays_1 = arrays; _i < arrays_1.length; _i++) {
                    var array = arrays_1[_i];
                    totalLength += array.length;
                }
                var result = new Uint8Array(totalLength);
                var offset = 0;
                for (var _a = 0, arrays_2 = arrays; _a < arrays_2.length; _a++) {
                    var array = arrays_2[_a];
                    result.set(array, offset);
                    offset += array.length;
                }
                return result;
            };
            ArrayTools.splitByteArray = function (byteArray, maxPartLength) {
                var result = [];
                for (var offset = 0; offset < byteArray.length;) {
                    var blockLength = Math.min(maxPartLength, byteArray.length - offset);
                    result.push(byteArray.subarray(offset, offset + blockLength));
                    offset += blockLength;
                }
                return result;
            };
        })(ArrayTools = LZUTF8.ArrayTools || (LZUTF8.ArrayTools = {}));
    })(LZUTF8 || (LZUTF8 = {}));
    var LZUTF8;
    (function (LZUTF8) {
        var BufferTools;
        (function (BufferTools) {
            BufferTools.convertToUint8ArrayIfNeeded = function (input) {
                if (typeof Buffer === "function" && isBuffer(input))
                    return BufferTools.bufferToUint8Array(input);
                else
                    return input;
            };
            BufferTools.uint8ArrayToBuffer = function (arr) {
                if (Buffer.prototype instanceof Uint8Array) {
                    var arrClone = new Uint8Array(arr.buffer, arr.byteOffset, arr.byteLength);
                    Object["setPrototypeOf"](arrClone, Buffer.prototype);
                    return arrClone;
                }
                else {
                    var len = arr.length;
                    var buf = new Buffer(len);
                    for (var i = 0; i < len; i++)
                        buf[i] = arr[i];
                    return buf;
                }
            };
            BufferTools.bufferToUint8Array = function (buf) {
                if (Buffer.prototype instanceof Uint8Array) {
                    return new Uint8Array(buf["buffer"], buf["byteOffset"], buf["byteLength"]);
                }
                else {
                    var len = buf.length;
                    var arr = new Uint8Array(len);
                    for (var i = 0; i < len; i++)
                        arr[i] = buf[i];
                    return arr;
                }
            };
        })(BufferTools = LZUTF8.BufferTools || (LZUTF8.BufferTools = {}));
    })(LZUTF8 || (LZUTF8 = {}));
    var LZUTF8;
    (function (LZUTF8) {
        var CompressionCommon;
        (function (CompressionCommon) {
            CompressionCommon.getCroppedBuffer = function (buffer, cropStartOffset, cropLength, additionalCapacity) {
                if (additionalCapacity === void 0) { additionalCapacity = 0; }
                var croppedBuffer = new Uint8Array(cropLength + additionalCapacity);
                croppedBuffer.set(buffer.subarray(cropStartOffset, cropStartOffset + cropLength));
                return croppedBuffer;
            };
            CompressionCommon.getCroppedAndAppendedByteArray = function (bytes, cropStartOffset, cropLength, byteArrayToAppend) {
                return LZUTF8.ArrayTools.concatUint8Arrays([bytes.subarray(cropStartOffset, cropStartOffset + cropLength), byteArrayToAppend]);
            };
            CompressionCommon.detectCompressionSourceEncoding = function (input) {
                if (input == null)
                    throw new TypeError("detectCompressionSourceEncoding: input is null or undefined");
                if (typeof input === "string")
                    return "String";
                else if (input instanceof Uint8Array || (typeof Buffer === "function" && isBuffer(input)))
                    return "ByteArray";
                else
                    throw new TypeError("detectCompressionSourceEncoding: input must be of type 'string', 'Uint8Array' or 'Buffer'");
            };
            CompressionCommon.encodeCompressedBytes = function (compressedBytes, outputEncoding) {
                switch (outputEncoding) {
                    case "ByteArray":
                        return compressedBytes;
                    case "Buffer":
                        return LZUTF8.BufferTools.uint8ArrayToBuffer(compressedBytes);
                    case "Base64":
                        return LZUTF8.encodeBase64(compressedBytes);
                    case "BinaryString":
                        return LZUTF8.encodeBinaryString(compressedBytes);
                    case "StorageBinaryString":
                        return LZUTF8.encodeStorageBinaryString(compressedBytes);
                    default:
                        throw new TypeError("encodeCompressedBytes: invalid output encoding requested");
                }
            };
            CompressionCommon.decodeCompressedBytes = function (compressedData, inputEncoding) {
                if (inputEncoding == null)
                    throw new TypeError("decodeCompressedData: Input is null or undefined");
                switch (inputEncoding) {
                    case "ByteArray":
                    case "Buffer":
                        var normalizedBytes = LZUTF8.BufferTools.convertToUint8ArrayIfNeeded(compressedData);
                        if (!(normalizedBytes instanceof Uint8Array))
                            throw new TypeError("decodeCompressedData: 'ByteArray' or 'Buffer' input type was specified but input is not a Uint8Array or Buffer");
                        return normalizedBytes;
                    case "Base64":
                        if (typeof compressedData !== "string")
                            throw new TypeError("decodeCompressedData: 'Base64' input type was specified but input is not a string");
                        return LZUTF8.decodeBase64(compressedData);
                    case "BinaryString":
                        if (typeof compressedData !== "string")
                            throw new TypeError("decodeCompressedData: 'BinaryString' input type was specified but input is not a string");
                        return LZUTF8.decodeBinaryString(compressedData);
                    case "StorageBinaryString":
                        if (typeof compressedData !== "string")
                            throw new TypeError("decodeCompressedData: 'StorageBinaryString' input type was specified but input is not a string");
                        return LZUTF8.decodeStorageBinaryString(compressedData);
                    default:
                        throw new TypeError("decodeCompressedData: invalid input encoding requested: '" + inputEncoding + "'");
                }
            };
            CompressionCommon.encodeDecompressedBytes = function (decompressedBytes, outputEncoding) {
                switch (outputEncoding) {
                    case "String":
                        return LZUTF8.decodeUTF8(decompressedBytes);
                    case "ByteArray":
                        return decompressedBytes;
                    case "Buffer":
                        if (typeof Buffer !== "function")
                            throw new TypeError("encodeDecompressedBytes: a 'Buffer' type was specified but is not supported at the current envirnment");
                        return LZUTF8.BufferTools.uint8ArrayToBuffer(decompressedBytes);
                    default:
                        throw new TypeError("encodeDecompressedBytes: invalid output encoding requested");
                }
            };
        })(CompressionCommon = LZUTF8.CompressionCommon || (LZUTF8.CompressionCommon = {}));
    })(LZUTF8 || (LZUTF8 = {}));
    var LZUTF8;
    (function (LZUTF8) {
        var EventLoop;
        (function (EventLoop) {
            var queuedFunctions = [];
            var asyncFlushFunc;
            EventLoop.enqueueImmediate = function (func) {
                queuedFunctions.push(func);
                if (queuedFunctions.length === 1)
                    asyncFlushFunc();
            };
            EventLoop.initializeScheduler = function () {
                var flush = function () {
                    for (var _i = 0, queuedFunctions_1 = queuedFunctions; _i < queuedFunctions_1.length; _i++) {
                        var func = queuedFunctions_1[_i];
                        try {
                            func.call(undefined);
                        }
                        catch (exception) {
                            LZUTF8.printExceptionAndStackTraceToConsole(exception, "enqueueImmediate exception");
                        }
                    }
                    queuedFunctions.length = 0;
                };
                if (LZUTF8.runningInNodeJS()) {
                    asyncFlushFunc = function () { return setImmediate(function () { return flush(); }); };
                }
                if (typeof window === "object" && typeof window.addEventListener === "function" && typeof window.postMessage === "function") {
                    var token_1 = "enqueueImmediate-" + Math.random().toString();
                    window.addEventListener("message", function (event) {
                        if (event.data === token_1)
                            flush();
                    });
                    var targetOrigin_1;
                    if (LZUTF8.runningInNullOrigin())
                        targetOrigin_1 = '*';
                    else
                        targetOrigin_1 = window.location.href;
                    asyncFlushFunc = function () { return window.postMessage(token_1, targetOrigin_1); };
                }
                else if (typeof MessageChannel === "function" && typeof MessagePort === "function") {
                    var channel_1 = new MessageChannel();
                    channel_1.port1.onmessage = function () { return flush(); };
                    asyncFlushFunc = function () { return channel_1.port2.postMessage(0); };
                }
                else {
                    asyncFlushFunc = function () { return setTimeout(function () { return flush(); }, 0); };
                }
            };
            EventLoop.initializeScheduler();
        })(EventLoop = LZUTF8.EventLoop || (LZUTF8.EventLoop = {}));
        LZUTF8.enqueueImmediate = function (func) { return EventLoop.enqueueImmediate(func); };
    })(LZUTF8 || (LZUTF8 = {}));
    var LZUTF8;
    (function (LZUTF8) {
        var ObjectTools;
        (function (ObjectTools) {
            ObjectTools.override = function (obj, newPropertyValues) {
                return ObjectTools.extend(obj, newPropertyValues);
            };
            ObjectTools.extend = function (obj, newProperties) {
                if (obj == null)
                    throw new TypeError("obj is null or undefined");
                if (typeof obj !== "object")
                    throw new TypeError("obj is not an object");
                if (newProperties == null)
                    newProperties = {};
                if (typeof newProperties !== "object")
                    throw new TypeError("newProperties is not an object");
                if (newProperties != null) {
                    for (var property in newProperties)
                        obj[property] = newProperties[property];
                }
                return obj;
            };
        })(ObjectTools = LZUTF8.ObjectTools || (LZUTF8.ObjectTools = {}));
    })(LZUTF8 || (LZUTF8 = {}));
    var LZUTF8;
    (function (LZUTF8) {
        LZUTF8.getRandomIntegerInRange = function (low, high) {
            return low + Math.floor(Math.random() * (high - low));
        };
        LZUTF8.getRandomUTF16StringOfLength = function (length) {
            var randomString = "";
            for (var i = 0; i < length; i++) {
                var randomCodePoint = void 0;
                do {
                    randomCodePoint = LZUTF8.getRandomIntegerInRange(0, 0x10FFFF + 1);
                } while (randomCodePoint >= 0xD800 && randomCodePoint <= 0xDFFF);
                randomString += LZUTF8.Encoding.CodePoint.decodeToString(randomCodePoint);
            }
            return randomString;
        };
    })(LZUTF8 || (LZUTF8 = {}));
    var LZUTF8;
    (function (LZUTF8) {
        var StringBuilder = (function () {
            function StringBuilder(outputBufferCapacity) {
                if (outputBufferCapacity === void 0) { outputBufferCapacity = 1024; }
                this.outputBufferCapacity = outputBufferCapacity;
                this.outputPosition = 0;
                this.outputString = "";
                this.outputBuffer = new Uint16Array(this.outputBufferCapacity);
            }
            StringBuilder.prototype.appendCharCode = function (charCode) {
                this.outputBuffer[this.outputPosition++] = charCode;
                if (this.outputPosition === this.outputBufferCapacity)
                    this.flushBufferToOutputString();
            };
            StringBuilder.prototype.appendCharCodes = function (charCodes) {
                for (var i = 0, length_1 = charCodes.length; i < length_1; i++)
                    this.appendCharCode(charCodes[i]);
            };
            StringBuilder.prototype.appendString = function (str) {
                for (var i = 0, length_2 = str.length; i < length_2; i++)
                    this.appendCharCode(str.charCodeAt(i));
            };
            StringBuilder.prototype.appendCodePoint = function (codePoint) {
                if (codePoint <= 0xFFFF) {
                    this.appendCharCode(codePoint);
                }
                else if (codePoint <= 0x10FFFF) {
                    this.appendCharCode(0xD800 + ((codePoint - 0x10000) >>> 10));
                    this.appendCharCode(0xDC00 + ((codePoint - 0x10000) & 1023));
                }
                else
                    throw new Error("appendCodePoint: A code point of " + codePoint + " cannot be encoded in UTF-16");
            };
            StringBuilder.prototype.getOutputString = function () {
                this.flushBufferToOutputString();
                return this.outputString;
            };
            StringBuilder.prototype.flushBufferToOutputString = function () {
                if (this.outputPosition === this.outputBufferCapacity)
                    this.outputString += String.fromCharCode.apply(null, this.outputBuffer);
                else
                    this.outputString += String.fromCharCode.apply(null, this.outputBuffer.subarray(0, this.outputPosition));
                this.outputPosition = 0;
            };
            return StringBuilder;
        }());
        LZUTF8.StringBuilder = StringBuilder;
    })(LZUTF8 || (LZUTF8 = {}));
    var LZUTF8;
    (function (LZUTF8) {
        var Timer = (function () {
            function Timer() {
                this.restart();
            }
            Timer.prototype.restart = function () {
                this.startTime = Timer.getTimestamp();
            };
            Timer.prototype.getElapsedTime = function () {
                return Timer.getTimestamp() - this.startTime;
            };
            Timer.prototype.getElapsedTimeAndRestart = function () {
                var elapsedTime = this.getElapsedTime();
                this.restart();
                return elapsedTime;
            };
            Timer.prototype.logAndRestart = function (title, logToDocument) {
                if (logToDocument === void 0) { logToDocument = true; }
                var elapsedTime = this.getElapsedTime();
                var message = title + ": " + elapsedTime.toFixed(3) + "ms";
                LZUTF8.log(message, logToDocument);
                this.restart();
                return elapsedTime;
            };
            Timer.getTimestamp = function () {
                if (!this.timestampFunc)
                    this.createGlobalTimestampFunction();
                return this.timestampFunc();
            };
            Timer.getMicrosecondTimestamp = function () {
                return Math.floor(Timer.getTimestamp() * 1000);
            };
            Timer.createGlobalTimestampFunction = function () {
                if (typeof process === "object" && typeof process.hrtime === "function") {
                    var baseTimestamp_1 = 0;
                    this.timestampFunc = function () {
                        var nodeTimeStamp = process.hrtime();
                        var millisecondTime = (nodeTimeStamp[0] * 1000) + (nodeTimeStamp[1] / 1000000);
                        return baseTimestamp_1 + millisecondTime;
                    };
                    baseTimestamp_1 = Date.now() - this.timestampFunc();
                }
                else if (typeof chrome === "object" && chrome.Interval) {
                    var baseTimestamp_2 = Date.now();
                    var chromeIntervalObject_1 = new chrome.Interval();
                    chromeIntervalObject_1.start();
                    this.timestampFunc = function () { return baseTimestamp_2 + chromeIntervalObject_1.microseconds() / 1000; };
                }
                else if (typeof performance === "object" && performance.now) {
                    var baseTimestamp_3 = Date.now() - performance.now();
                    this.timestampFunc = function () { return baseTimestamp_3 + performance.now(); };
                }
                else if (Date.now) {
                    this.timestampFunc = function () { return Date.now(); };
                }
                else {
                    this.timestampFunc = function () { return (new Date()).getTime(); };
                }
            };
            return Timer;
        }());
        LZUTF8.Timer = Timer;
    })(LZUTF8 || (LZUTF8 = {}));
    var LZUTF8;
    (function (LZUTF8) {
        var Compressor = (function () {
            function Compressor(useCustomHashTable) {
                if (useCustomHashTable === void 0) { useCustomHashTable = true; }
                this.MinimumSequenceLength = 4;
                this.MaximumSequenceLength = 31;
                this.MaximumMatchDistance = 32767;
                this.PrefixHashTableSize = 65537;
                this.inputBufferStreamOffset = 1;
                if (useCustomHashTable && typeof Uint32Array == "function")
                    this.prefixHashTable = new LZUTF8.CompressorCustomHashTable(this.PrefixHashTableSize);
                else
                    this.prefixHashTable = new LZUTF8.CompressorSimpleHashTable(this.PrefixHashTableSize);
            }
            Compressor.prototype.compressBlock = function (input) {
                if (input === undefined || input === null)
                    throw new TypeError("compressBlock: undefined or null input received");
                if (typeof input == "string")
                    input = LZUTF8.encodeUTF8(input);
                input = LZUTF8.BufferTools.convertToUint8ArrayIfNeeded(input);
                return this.compressUtf8Block(input);
            };
            Compressor.prototype.compressUtf8Block = function (utf8Bytes) {
                if (!utf8Bytes || utf8Bytes.length == 0)
                    return new Uint8Array(0);
                var bufferStartingReadOffset = this.cropAndAddNewBytesToInputBuffer(utf8Bytes);
                var inputBuffer = this.inputBuffer;
                var inputBufferLength = this.inputBuffer.length;
                this.outputBuffer = new Uint8Array(utf8Bytes.length);
                this.outputBufferPosition = 0;
                var latestMatchEndPosition = 0;
                for (var readPosition = bufferStartingReadOffset; readPosition < inputBufferLength; readPosition++) {
                    var inputValue = inputBuffer[readPosition];
                    var withinAMatchedRange = readPosition < latestMatchEndPosition;
                    if (readPosition > inputBufferLength - this.MinimumSequenceLength) {
                        if (!withinAMatchedRange)
                            this.outputRawByte(inputValue);
                        continue;
                    }
                    var targetBucketIndex = this.getBucketIndexForPrefix(readPosition);
                    if (!withinAMatchedRange) {
                        var matchLocator = this.findLongestMatch(readPosition, targetBucketIndex);
                        if (matchLocator != null) {
                            this.outputPointerBytes(matchLocator.length, matchLocator.distance);
                            latestMatchEndPosition = readPosition + matchLocator.length;
                            withinAMatchedRange = true;
                        }
                    }
                    if (!withinAMatchedRange)
                        this.outputRawByte(inputValue);
                    var inputStreamPosition = this.inputBufferStreamOffset + readPosition;
                    this.prefixHashTable.addValueToBucket(targetBucketIndex, inputStreamPosition);
                }
                return this.outputBuffer.subarray(0, this.outputBufferPosition);
            };
            Compressor.prototype.findLongestMatch = function (matchedSequencePosition, bucketIndex) {
                var bucket = this.prefixHashTable.getArraySegmentForBucketIndex(bucketIndex, this.reusableArraySegmentObject);
                if (bucket == null)
                    return null;
                var input = this.inputBuffer;
                var longestMatchDistance;
                var longestMatchLength = 0;
                for (var i = 0; i < bucket.length; i++) {
                    var testedSequencePosition = bucket.getInReversedOrder(i) - this.inputBufferStreamOffset;
                    var testedSequenceDistance = matchedSequencePosition - testedSequencePosition;
                    var lengthToSurpass = void 0;
                    if (longestMatchDistance === undefined)
                        lengthToSurpass = this.MinimumSequenceLength - 1;
                    else if (longestMatchDistance < 128 && testedSequenceDistance >= 128)
                        lengthToSurpass = longestMatchLength + (longestMatchLength >>> 1);
                    else
                        lengthToSurpass = longestMatchLength;
                    if (testedSequenceDistance > this.MaximumMatchDistance ||
                        lengthToSurpass >= this.MaximumSequenceLength ||
                        matchedSequencePosition + lengthToSurpass >= input.length)
                        break;
                    if (input[testedSequencePosition + lengthToSurpass] !== input[matchedSequencePosition + lengthToSurpass])
                        continue;
                    for (var offset = 0;; offset++) {
                        if (matchedSequencePosition + offset === input.length ||
                            input[testedSequencePosition + offset] !== input[matchedSequencePosition + offset]) {
                            if (offset > lengthToSurpass) {
                                longestMatchDistance = testedSequenceDistance;
                                longestMatchLength = offset;
                            }
                            break;
                        }
                        else if (offset === this.MaximumSequenceLength)
                            return { distance: testedSequenceDistance, length: this.MaximumSequenceLength };
                    }
                }
                if (longestMatchDistance !== undefined)
                    return { distance: longestMatchDistance, length: longestMatchLength };
                else
                    return null;
            };
            Compressor.prototype.getBucketIndexForPrefix = function (startPosition) {
                return (this.inputBuffer[startPosition] * 7880599 +
                    this.inputBuffer[startPosition + 1] * 39601 +
                    this.inputBuffer[startPosition + 2] * 199 +
                    this.inputBuffer[startPosition + 3]) % this.PrefixHashTableSize;
            };
            Compressor.prototype.outputPointerBytes = function (length, distance) {
                if (distance < 128) {
                    this.outputRawByte(192 | length);
                    this.outputRawByte(distance);
                }
                else {
                    this.outputRawByte(224 | length);
                    this.outputRawByte(distance >>> 8);
                    this.outputRawByte(distance & 255);
                }
            };
            Compressor.prototype.outputRawByte = function (value) {
                this.outputBuffer[this.outputBufferPosition++] = value;
            };
            Compressor.prototype.cropAndAddNewBytesToInputBuffer = function (newInput) {
                if (this.inputBuffer === undefined) {
                    this.inputBuffer = newInput;
                    return 0;
                }
                else {
                    var cropLength = Math.min(this.inputBuffer.length, this.MaximumMatchDistance);
                    var cropStartOffset = this.inputBuffer.length - cropLength;
                    this.inputBuffer = LZUTF8.CompressionCommon.getCroppedAndAppendedByteArray(this.inputBuffer, cropStartOffset, cropLength, newInput);
                    this.inputBufferStreamOffset += cropStartOffset;
                    return cropLength;
                }
            };
            return Compressor;
        }());
        LZUTF8.Compressor = Compressor;
    })(LZUTF8 || (LZUTF8 = {}));
    var LZUTF8;
    (function (LZUTF8) {
        var CompressorCustomHashTable = (function () {
            function CompressorCustomHashTable(bucketCount) {
                this.minimumBucketCapacity = 4;
                this.maximumBucketCapacity = 64;
                this.bucketLocators = new Uint32Array(bucketCount * 2);
                this.storage = new Uint32Array(bucketCount * 2);
                this.storageIndex = 1;
            }
            CompressorCustomHashTable.prototype.addValueToBucket = function (bucketIndex, valueToAdd) {
                bucketIndex <<= 1;
                if (this.storageIndex >= (this.storage.length >>> 1))
                    this.compact();
                var startPosition = this.bucketLocators[bucketIndex];
                var length;
                if (startPosition === 0) {
                    startPosition = this.storageIndex;
                    length = 1;
                    this.storage[this.storageIndex] = valueToAdd;
                    this.storageIndex += this.minimumBucketCapacity;
                }
                else {
                    length = this.bucketLocators[bucketIndex + 1];
                    if (length === this.maximumBucketCapacity - 1)
                        length = this.truncateBucketToNewerElements(startPosition, length, this.maximumBucketCapacity / 2);
                    var endPosition = startPosition + length;
                    if (this.storage[endPosition] === 0) {
                        this.storage[endPosition] = valueToAdd;
                        if (endPosition === this.storageIndex)
                            this.storageIndex += length;
                    }
                    else {
                        LZUTF8.ArrayTools.copyElements(this.storage, startPosition, this.storage, this.storageIndex, length);
                        startPosition = this.storageIndex;
                        this.storageIndex += length;
                        this.storage[this.storageIndex++] = valueToAdd;
                        this.storageIndex += length;
                    }
                    length++;
                }
                this.bucketLocators[bucketIndex] = startPosition;
                this.bucketLocators[bucketIndex + 1] = length;
            };
            CompressorCustomHashTable.prototype.truncateBucketToNewerElements = function (startPosition, bucketLength, truncatedBucketLength) {
                var sourcePosition = startPosition + bucketLength - truncatedBucketLength;
                LZUTF8.ArrayTools.copyElements(this.storage, sourcePosition, this.storage, startPosition, truncatedBucketLength);
                LZUTF8.ArrayTools.zeroElements(this.storage, startPosition + truncatedBucketLength, bucketLength - truncatedBucketLength);
                return truncatedBucketLength;
            };
            CompressorCustomHashTable.prototype.compact = function () {
                var oldBucketLocators = this.bucketLocators;
                var oldStorage = this.storage;
                this.bucketLocators = new Uint32Array(this.bucketLocators.length);
                this.storageIndex = 1;
                for (var bucketIndex = 0; bucketIndex < oldBucketLocators.length; bucketIndex += 2) {
                    var length_3 = oldBucketLocators[bucketIndex + 1];
                    if (length_3 === 0)
                        continue;
                    this.bucketLocators[bucketIndex] = this.storageIndex;
                    this.bucketLocators[bucketIndex + 1] = length_3;
                    this.storageIndex += Math.max(Math.min(length_3 * 2, this.maximumBucketCapacity), this.minimumBucketCapacity);
                }
                this.storage = new Uint32Array(this.storageIndex * 8);
                for (var bucketIndex = 0; bucketIndex < oldBucketLocators.length; bucketIndex += 2) {
                    var sourcePosition = oldBucketLocators[bucketIndex];
                    if (sourcePosition === 0)
                        continue;
                    var destPosition = this.bucketLocators[bucketIndex];
                    var length_4 = this.bucketLocators[bucketIndex + 1];
                    LZUTF8.ArrayTools.copyElements(oldStorage, sourcePosition, this.storage, destPosition, length_4);
                }
            };
            CompressorCustomHashTable.prototype.getArraySegmentForBucketIndex = function (bucketIndex, outputObject) {
                bucketIndex <<= 1;
                var startPosition = this.bucketLocators[bucketIndex];
                if (startPosition === 0)
                    return null;
                if (outputObject === undefined)
                    outputObject = new LZUTF8.ArraySegment(this.storage, startPosition, this.bucketLocators[bucketIndex + 1]);
                return outputObject;
            };
            CompressorCustomHashTable.prototype.getUsedBucketCount = function () {
                return Math.floor(LZUTF8.ArrayTools.countNonzeroValuesInArray(this.bucketLocators) / 2);
            };
            CompressorCustomHashTable.prototype.getTotalElementCount = function () {
                var result = 0;
                for (var i = 0; i < this.bucketLocators.length; i += 2)
                    result += this.bucketLocators[i + 1];
                return result;
            };
            return CompressorCustomHashTable;
        }());
        LZUTF8.CompressorCustomHashTable = CompressorCustomHashTable;
    })(LZUTF8 || (LZUTF8 = {}));
    var LZUTF8;
    (function (LZUTF8) {
        var CompressorSimpleHashTable = (function () {
            function CompressorSimpleHashTable(size) {
                this.maximumBucketCapacity = 64;
                this.buckets = new Array(size);
            }
            CompressorSimpleHashTable.prototype.addValueToBucket = function (bucketIndex, valueToAdd) {
                var bucket = this.buckets[bucketIndex];
                if (bucket === undefined) {
                    this.buckets[bucketIndex] = [valueToAdd];
                }
                else {
                    if (bucket.length === this.maximumBucketCapacity - 1)
                        LZUTF8.ArrayTools.truncateStartingElements(bucket, this.maximumBucketCapacity / 2);
                    bucket.push(valueToAdd);
                }
            };
            CompressorSimpleHashTable.prototype.getArraySegmentForBucketIndex = function (bucketIndex, outputObject) {
                var bucket = this.buckets[bucketIndex];
                if (bucket === undefined)
                    return null;
                if (outputObject === undefined)
                    outputObject = new LZUTF8.ArraySegment(bucket, 0, bucket.length);
                return outputObject;
            };
            CompressorSimpleHashTable.prototype.getUsedBucketCount = function () {
                return LZUTF8.ArrayTools.countNonzeroValuesInArray(this.buckets);
            };
            CompressorSimpleHashTable.prototype.getTotalElementCount = function () {
                var currentSum = 0;
                for (var i = 0; i < this.buckets.length; i++) {
                    if (this.buckets[i] !== undefined)
                        currentSum += this.buckets[i].length;
                }
                return currentSum;
            };
            return CompressorSimpleHashTable;
        }());
        LZUTF8.CompressorSimpleHashTable = CompressorSimpleHashTable;
    })(LZUTF8 || (LZUTF8 = {}));
    var LZUTF8;
    (function (LZUTF8) {
        var Decompressor = (function () {
            function Decompressor() {
                this.MaximumMatchDistance = 32767;
                this.outputPosition = 0;
            }
            Decompressor.prototype.decompressBlockToString = function (input) {
                input = LZUTF8.BufferTools.convertToUint8ArrayIfNeeded(input);
                return LZUTF8.decodeUTF8(this.decompressBlock(input));
            };
            Decompressor.prototype.decompressBlock = function (input) {
                if (this.inputBufferRemainder) {
                    input = LZUTF8.ArrayTools.concatUint8Arrays([this.inputBufferRemainder, input]);
                    this.inputBufferRemainder = undefined;
                }
                var outputStartPosition = this.cropOutputBufferToWindowAndInitialize(Math.max(input.length * 4, 1024));
                for (var readPosition = 0, inputLength = input.length; readPosition < inputLength; readPosition++) {
                    var inputValue = input[readPosition];
                    if (inputValue >>> 6 != 3) {
                        this.outputByte(inputValue);
                        continue;
                    }
                    var sequenceLengthIdentifier = inputValue >>> 5;
                    if (readPosition == inputLength - 1 ||
                        (readPosition == inputLength - 2 && sequenceLengthIdentifier == 7)) {
                        this.inputBufferRemainder = input.subarray(readPosition);
                        break;
                    }
                    if (input[readPosition + 1] >>> 7 === 1) {
                        this.outputByte(inputValue);
                    }
                    else {
                        var matchLength = inputValue & 31;
                        var matchDistance = void 0;
                        if (sequenceLengthIdentifier == 6) {
                            matchDistance = input[readPosition + 1];
                            readPosition += 1;
                        }
                        else {
                            matchDistance = (input[readPosition + 1] << 8) | (input[readPosition + 2]);
                            readPosition += 2;
                        }
                        var matchPosition = this.outputPosition - matchDistance;
                        for (var offset = 0; offset < matchLength; offset++)
                            this.outputByte(this.outputBuffer[matchPosition + offset]);
                    }
                }
                this.rollBackIfOutputBufferEndsWithATruncatedMultibyteSequence();
                return LZUTF8.CompressionCommon.getCroppedBuffer(this.outputBuffer, outputStartPosition, this.outputPosition - outputStartPosition);
            };
            Decompressor.prototype.outputByte = function (value) {
                if (this.outputPosition === this.outputBuffer.length)
                    this.outputBuffer = LZUTF8.ArrayTools.doubleByteArrayCapacity(this.outputBuffer);
                this.outputBuffer[this.outputPosition++] = value;
            };
            Decompressor.prototype.cropOutputBufferToWindowAndInitialize = function (initialCapacity) {
                if (!this.outputBuffer) {
                    this.outputBuffer = new Uint8Array(initialCapacity);
                    return 0;
                }
                var cropLength = Math.min(this.outputPosition, this.MaximumMatchDistance);
                this.outputBuffer = LZUTF8.CompressionCommon.getCroppedBuffer(this.outputBuffer, this.outputPosition - cropLength, cropLength, initialCapacity);
                this.outputPosition = cropLength;
                if (this.outputBufferRemainder) {
                    for (var i = 0; i < this.outputBufferRemainder.length; i++)
                        this.outputByte(this.outputBufferRemainder[i]);
                    this.outputBufferRemainder = undefined;
                }
                return cropLength;
            };
            Decompressor.prototype.rollBackIfOutputBufferEndsWithATruncatedMultibyteSequence = function () {
                for (var offset = 1; offset <= 4 && this.outputPosition - offset >= 0; offset++) {
                    var value = this.outputBuffer[this.outputPosition - offset];
                    if ((offset < 4 && (value >>> 3) === 30) ||
                        (offset < 3 && (value >>> 4) === 14) ||
                        (offset < 2 && (value >>> 5) === 6)) {
                        this.outputBufferRemainder = this.outputBuffer.subarray(this.outputPosition - offset, this.outputPosition);
                        this.outputPosition -= offset;
                        return;
                    }
                }
            };
            return Decompressor;
        }());
        LZUTF8.Decompressor = Decompressor;
    })(LZUTF8 || (LZUTF8 = {}));
    var LZUTF8;
    (function (LZUTF8) {
        var Encoding;
        (function (Encoding) {
            var Base64;
            (function (Base64) {
                var charCodeMap = new Uint8Array([65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 43, 47]);
                var reverseCharCodeMap = new Uint8Array([255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 62, 255, 255, 255, 63, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 255, 255, 255, 0, 255, 255, 255, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 255, 255, 255, 255, 255, 255, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 255, 255, 255, 255]);
                var paddingCharacter = "=";
                var paddingCharCode = 61;
                Base64.encode = function (inputBytes) {
                    if (!inputBytes || inputBytes.length == 0)
                        return "";
                    if (LZUTF8.runningInNodeJS()) {
                        return (LZUTF8.BufferTools.uint8ArrayToBuffer(inputBytes)).toString("base64");
                    }
                    else {
                        return Base64.encodeWithJS(inputBytes);
                    }
                };
                Base64.decode = function (base64String) {
                    if (!base64String)
                        return new Uint8Array(0);
                    if (LZUTF8.runningInNodeJS()) {
                        return LZUTF8.BufferTools.bufferToUint8Array(new Buffer(base64String, "base64"));
                    }
                    else {
                        return Base64.decodeWithJS(base64String);
                    }
                };
                Base64.encodeWithJS = function (inputBytes, addPadding) {
                    if (addPadding === void 0) { addPadding = true; }
                    if (!inputBytes || inputBytes.length == 0)
                        return "";
                    var map = charCodeMap;
                    var output = new LZUTF8.StringBuilder();
                    var uint24;
                    for (var readPosition = 0, length_5 = inputBytes.length; readPosition < length_5; readPosition += 3) {
                        if (readPosition <= length_5 - 3) {
                            uint24 = inputBytes[readPosition] << 16 | inputBytes[readPosition + 1] << 8 | inputBytes[readPosition + 2];
                            output.appendCharCode(map[(uint24 >>> 18) & 63]);
                            output.appendCharCode(map[(uint24 >>> 12) & 63]);
                            output.appendCharCode(map[(uint24 >>> 6) & 63]);
                            output.appendCharCode(map[(uint24) & 63]);
                            uint24 = 0;
                        }
                        else if (readPosition === length_5 - 2) {
                            uint24 = inputBytes[readPosition] << 16 | inputBytes[readPosition + 1] << 8;
                            output.appendCharCode(map[(uint24 >>> 18) & 63]);
                            output.appendCharCode(map[(uint24 >>> 12) & 63]);
                            output.appendCharCode(map[(uint24 >>> 6) & 63]);
                            if (addPadding)
                                output.appendCharCode(paddingCharCode);
                        }
                        else if (readPosition === length_5 - 1) {
                            uint24 = inputBytes[readPosition] << 16;
                            output.appendCharCode(map[(uint24 >>> 18) & 63]);
                            output.appendCharCode(map[(uint24 >>> 12) & 63]);
                            if (addPadding) {
                                output.appendCharCode(paddingCharCode);
                                output.appendCharCode(paddingCharCode);
                            }
                        }
                    }
                    return output.getOutputString();
                };
                Base64.decodeWithJS = function (base64String, outputBuffer) {
                    if (!base64String || base64String.length == 0)
                        return new Uint8Array(0);
                    var lengthModulo4 = base64String.length % 4;
                    if (lengthModulo4 === 1)
                        throw new Error("Invalid Base64 string: length % 4 == 1");
                    else if (lengthModulo4 === 2)
                        base64String += paddingCharacter + paddingCharacter;
                    else if (lengthModulo4 === 3)
                        base64String += paddingCharacter;
                    if (!outputBuffer)
                        outputBuffer = new Uint8Array(base64String.length);
                    var outputPosition = 0;
                    var length = base64String.length;
                    for (var i = 0; i < length; i += 4) {
                        var uint24 = (reverseCharCodeMap[base64String.charCodeAt(i)] << 18) |
                            (reverseCharCodeMap[base64String.charCodeAt(i + 1)] << 12) |
                            (reverseCharCodeMap[base64String.charCodeAt(i + 2)] << 6) |
                            (reverseCharCodeMap[base64String.charCodeAt(i + 3)]);
                        outputBuffer[outputPosition++] = (uint24 >>> 16) & 255;
                        outputBuffer[outputPosition++] = (uint24 >>> 8) & 255;
                        outputBuffer[outputPosition++] = (uint24) & 255;
                    }
                    if (base64String.charCodeAt(length - 1) == paddingCharCode)
                        outputPosition--;
                    if (base64String.charCodeAt(length - 2) == paddingCharCode)
                        outputPosition--;
                    return outputBuffer.subarray(0, outputPosition);
                };
            })(Base64 = Encoding.Base64 || (Encoding.Base64 = {}));
        })(Encoding = LZUTF8.Encoding || (LZUTF8.Encoding = {}));
    })(LZUTF8 || (LZUTF8 = {}));
    var LZUTF8;
    (function (LZUTF8) {
        var Encoding;
        (function (Encoding) {
            var BinaryString;
            (function (BinaryString) {
                BinaryString.encode = function (input) {
                    if (input == null)
                        throw new TypeError("BinaryString.encode: undefined or null input received");
                    if (input.length === 0)
                        return "";
                    var inputLength = input.length;
                    var outputStringBuilder = new LZUTF8.StringBuilder();
                    var remainder = 0;
                    var state = 1;
                    for (var i = 0; i < inputLength; i += 2) {
                        var value = void 0;
                        if (i == inputLength - 1)
                            value = (input[i] << 8);
                        else
                            value = (input[i] << 8) | input[i + 1];
                        outputStringBuilder.appendCharCode((remainder << (16 - state)) | value >>> state);
                        remainder = value & ((1 << state) - 1);
                        if (state === 15) {
                            outputStringBuilder.appendCharCode(remainder);
                            remainder = 0;
                            state = 1;
                        }
                        else {
                            state += 1;
                        }
                        if (i >= inputLength - 2)
                            outputStringBuilder.appendCharCode(remainder << (16 - state));
                    }
                    outputStringBuilder.appendCharCode(32768 | (inputLength % 2));
                    return outputStringBuilder.getOutputString();
                };
                BinaryString.decode = function (input) {
                    if (typeof input !== "string")
                        throw new TypeError("BinaryString.decode: invalid input type");
                    if (input == "")
                        return new Uint8Array(0);
                    var output = new Uint8Array(input.length * 3);
                    var outputPosition = 0;
                    var appendToOutput = function (value) {
                        output[outputPosition++] = value >>> 8;
                        output[outputPosition++] = value & 255;
                    };
                    var remainder = 0;
                    var state = 0;
                    for (var i = 0; i < input.length; i++) {
                        var value = input.charCodeAt(i);
                        if (value >= 32768) {
                            if (value == (32768 | 1))
                                outputPosition--;
                            state = 0;
                            continue;
                        }
                        if (state == 0) {
                            remainder = value;
                        }
                        else {
                            appendToOutput((remainder << state) | (value >>> (15 - state)));
                            remainder = value & ((1 << (15 - state)) - 1);
                        }
                        if (state == 15)
                            state = 0;
                        else
                            state += 1;
                    }
                    return output.subarray(0, outputPosition);
                };
            })(BinaryString = Encoding.BinaryString || (Encoding.BinaryString = {}));
        })(Encoding = LZUTF8.Encoding || (LZUTF8.Encoding = {}));
    })(LZUTF8 || (LZUTF8 = {}));
    var LZUTF8;
    (function (LZUTF8) {
        var Encoding;
        (function (Encoding) {
            var CodePoint;
            (function (CodePoint) {
                CodePoint.encodeFromString = function (str, position) {
                    var charCode = str.charCodeAt(position);
                    if (charCode < 0xD800 || charCode > 0xDBFF)
                        return charCode;
                    else {
                        var nextCharCode = str.charCodeAt(position + 1);
                        if (nextCharCode >= 0xDC00 && nextCharCode <= 0xDFFF)
                            return 0x10000 + (((charCode - 0xD800) << 10) + (nextCharCode - 0xDC00));
                        else
                            throw new Error("getUnicodeCodePoint: Received a lead surrogate character, char code " + charCode + ", followed by " + nextCharCode + ", which is not a trailing surrogate character code.");
                    }
                };
                CodePoint.decodeToString = function (codePoint) {
                    if (codePoint <= 0xFFFF)
                        return String.fromCharCode(codePoint);
                    else if (codePoint <= 0x10FFFF)
                        return String.fromCharCode(0xD800 + ((codePoint - 0x10000) >>> 10), 0xDC00 + ((codePoint - 0x10000) & 1023));
                    else
                        throw new Error("getStringFromUnicodeCodePoint: A code point of " + codePoint + " cannot be encoded in UTF-16");
                };
            })(CodePoint = Encoding.CodePoint || (Encoding.CodePoint = {}));
        })(Encoding = LZUTF8.Encoding || (LZUTF8.Encoding = {}));
    })(LZUTF8 || (LZUTF8 = {}));
    var LZUTF8;
    (function (LZUTF8) {
        var Encoding;
        (function (Encoding) {
            var DecimalString;
            (function (DecimalString) {
                var lookupTable = ["000", "001", "002", "003", "004", "005", "006", "007", "008", "009", "010", "011", "012", "013", "014", "015", "016", "017", "018", "019", "020", "021", "022", "023", "024", "025", "026", "027", "028", "029", "030", "031", "032", "033", "034", "035", "036", "037", "038", "039", "040", "041", "042", "043", "044", "045", "046", "047", "048", "049", "050", "051", "052", "053", "054", "055", "056", "057", "058", "059", "060", "061", "062", "063", "064", "065", "066", "067", "068", "069", "070", "071", "072", "073", "074", "075", "076", "077", "078", "079", "080", "081", "082", "083", "084", "085", "086", "087", "088", "089", "090", "091", "092", "093", "094", "095", "096", "097", "098", "099", "100", "101", "102", "103", "104", "105", "106", "107", "108", "109", "110", "111", "112", "113", "114", "115", "116", "117", "118", "119", "120", "121", "122", "123", "124", "125", "126", "127", "128", "129", "130", "131", "132", "133", "134", "135", "136", "137", "138", "139", "140", "141", "142", "143", "144", "145", "146", "147", "148", "149", "150", "151", "152", "153", "154", "155", "156", "157", "158", "159", "160", "161", "162", "163", "164", "165", "166", "167", "168", "169", "170", "171", "172", "173", "174", "175", "176", "177", "178", "179", "180", "181", "182", "183", "184", "185", "186", "187", "188", "189", "190", "191", "192", "193", "194", "195", "196", "197", "198", "199", "200", "201", "202", "203", "204", "205", "206", "207", "208", "209", "210", "211", "212", "213", "214", "215", "216", "217", "218", "219", "220", "221", "222", "223", "224", "225", "226", "227", "228", "229", "230", "231", "232", "233", "234", "235", "236", "237", "238", "239", "240", "241", "242", "243", "244", "245", "246", "247", "248", "249", "250", "251", "252", "253", "254", "255"];
                DecimalString.encode = function (binaryBytes) {
                    var resultArray = [];
                    for (var i = 0; i < binaryBytes.length; i++)
                        resultArray.push(lookupTable[binaryBytes[i]]);
                    return resultArray.join(" ");
                };
            })(DecimalString = Encoding.DecimalString || (Encoding.DecimalString = {}));
        })(Encoding = LZUTF8.Encoding || (LZUTF8.Encoding = {}));
    })(LZUTF8 || (LZUTF8 = {}));
    var LZUTF8;
    (function (LZUTF8) {
        var Encoding;
        (function (Encoding) {
            var StorageBinaryString;
            (function (StorageBinaryString) {
                StorageBinaryString.encode = function (input) {
                    return Encoding.BinaryString.encode(input).replace(/\0/g, '\u8002');
                };
                StorageBinaryString.decode = function (input) {
                    return Encoding.BinaryString.decode(input.replace(/\u8002/g, '\0'));
                };
            })(StorageBinaryString = Encoding.StorageBinaryString || (Encoding.StorageBinaryString = {}));
        })(Encoding = LZUTF8.Encoding || (LZUTF8.Encoding = {}));
    })(LZUTF8 || (LZUTF8 = {}));
    var LZUTF8;
    (function (LZUTF8) {
        var Encoding;
        (function (Encoding) {
            var UTF8;
            (function (UTF8) {
                var nativeTextEncoder;
                var nativeTextDecoder;
                UTF8.encode = function (str) {
                    if (!str || str.length == 0)
                        return new Uint8Array(0);
                    if (LZUTF8.runningInNodeJS()) {
                        return LZUTF8.BufferTools.bufferToUint8Array(new Buffer(str, "utf8"));
                    }
                    else if (UTF8.createNativeTextEncoderAndDecoderIfAvailable()) {
                        return nativeTextEncoder.encode(str);
                    }
                    else {
                        return UTF8.encodeWithJS(str);
                    }
                };
                UTF8.decode = function (utf8Bytes) {
                    if (!utf8Bytes || utf8Bytes.length == 0)
                        return "";
                    if (LZUTF8.runningInNodeJS()) {
                        return LZUTF8.BufferTools.uint8ArrayToBuffer(utf8Bytes).toString("utf8");
                    }
                    else if (UTF8.createNativeTextEncoderAndDecoderIfAvailable()) {
                        return nativeTextDecoder.decode(utf8Bytes);
                    }
                    else {
                        return UTF8.decodeWithJS(utf8Bytes);
                    }
                };
                UTF8.encodeWithJS = function (str, outputArray) {
                    if (!str || str.length == 0)
                        return new Uint8Array(0);
                    if (!outputArray)
                        outputArray = new Uint8Array(str.length * 4);
                    var writeIndex = 0;
                    for (var readIndex = 0; readIndex < str.length; readIndex++) {
                        var charCode = Encoding.CodePoint.encodeFromString(str, readIndex);
                        if (charCode <= 0x7F) {
                            outputArray[writeIndex++] = charCode;
                        }
                        else if (charCode <= 0x7FF) {
                            outputArray[writeIndex++] = 0xC0 | (charCode >>> 6);
                            outputArray[writeIndex++] = 0x80 | (charCode & 63);
                        }
                        else if (charCode <= 0xFFFF) {
                            outputArray[writeIndex++] = 0xE0 | (charCode >>> 12);
                            outputArray[writeIndex++] = 0x80 | ((charCode >>> 6) & 63);
                            outputArray[writeIndex++] = 0x80 | (charCode & 63);
                        }
                        else if (charCode <= 0x10FFFF) {
                            outputArray[writeIndex++] = 0xF0 | (charCode >>> 18);
                            outputArray[writeIndex++] = 0x80 | ((charCode >>> 12) & 63);
                            outputArray[writeIndex++] = 0x80 | ((charCode >>> 6) & 63);
                            outputArray[writeIndex++] = 0x80 | (charCode & 63);
                            readIndex++;
                        }
                        else
                            throw new Error("Invalid UTF-16 string: Encountered a character unsupported by UTF-8/16 (RFC 3629)");
                    }
                    return outputArray.subarray(0, writeIndex);
                };
                UTF8.decodeWithJS = function (utf8Bytes, startOffset, endOffset) {
                    if (startOffset === void 0) { startOffset = 0; }
                    if (!utf8Bytes || utf8Bytes.length == 0)
                        return "";
                    if (endOffset === undefined)
                        endOffset = utf8Bytes.length;
                    var output = new LZUTF8.StringBuilder();
                    var outputCodePoint;
                    var leadByte;
                    for (var readIndex = startOffset, length_6 = endOffset; readIndex < length_6;) {
                        leadByte = utf8Bytes[readIndex];
                        if ((leadByte >>> 7) === 0) {
                            outputCodePoint = leadByte;
                            readIndex += 1;
                        }
                        else if ((leadByte >>> 5) === 6) {
                            if (readIndex + 1 >= endOffset)
                                throw new Error("Invalid UTF-8 stream: Truncated codepoint sequence encountered at position " + readIndex);
                            outputCodePoint = ((leadByte & 31) << 6) | (utf8Bytes[readIndex + 1] & 63);
                            readIndex += 2;
                        }
                        else if ((leadByte >>> 4) === 14) {
                            if (readIndex + 2 >= endOffset)
                                throw new Error("Invalid UTF-8 stream: Truncated codepoint sequence encountered at position " + readIndex);
                            outputCodePoint = ((leadByte & 15) << 12) | ((utf8Bytes[readIndex + 1] & 63) << 6) | (utf8Bytes[readIndex + 2] & 63);
                            readIndex += 3;
                        }
                        else if ((leadByte >>> 3) === 30) {
                            if (readIndex + 3 >= endOffset)
                                throw new Error("Invalid UTF-8 stream: Truncated codepoint sequence encountered at position " + readIndex);
                            outputCodePoint = ((leadByte & 7) << 18) | ((utf8Bytes[readIndex + 1] & 63) << 12) | ((utf8Bytes[readIndex + 2] & 63) << 6) | (utf8Bytes[readIndex + 3] & 63);
                            readIndex += 4;
                        }
                        else
                            throw new Error("Invalid UTF-8 stream: An invalid lead byte value encountered at position " + readIndex);
                        output.appendCodePoint(outputCodePoint);
                    }
                    return output.getOutputString();
                };
                UTF8.createNativeTextEncoderAndDecoderIfAvailable = function () {
                    if (nativeTextEncoder)
                        return true;
                    if (typeof TextEncoder == "function") {
                        nativeTextEncoder = new TextEncoder("utf-8");
                        nativeTextDecoder = new TextDecoder("utf-8");
                        return true;
                    }
                    else
                        return false;
                };
            })(UTF8 = Encoding.UTF8 || (Encoding.UTF8 = {}));
        })(Encoding = LZUTF8.Encoding || (LZUTF8.Encoding = {}));
    })(LZUTF8 || (LZUTF8 = {}));
    var LZUTF8;
    (function (LZUTF8) {
        function compress(input, options) {
            if (options === void 0) { options = {}; }
            if (input == null)
                throw new TypeError("compress: undefined or null input received");
            var inputEncoding = LZUTF8.CompressionCommon.detectCompressionSourceEncoding(input);
            options = LZUTF8.ObjectTools.override({ inputEncoding: inputEncoding, outputEncoding: "ByteArray" }, options);
            var compressor = new LZUTF8.Compressor();
            var compressedBytes = compressor.compressBlock(input);
            return LZUTF8.CompressionCommon.encodeCompressedBytes(compressedBytes, options.outputEncoding);
        }
        LZUTF8.compress = compress;
        function decompress(input, options) {
            if (options === void 0) { options = {}; }
            if (input == null)
                throw new TypeError("decompress: undefined or null input received");
            options = LZUTF8.ObjectTools.override({ inputEncoding: "ByteArray", outputEncoding: "String" }, options);
            var inputBytes = LZUTF8.CompressionCommon.decodeCompressedBytes(input, options.inputEncoding);
            var decompressor = new LZUTF8.Decompressor();
            var decompressedBytes = decompressor.decompressBlock(inputBytes);
            return LZUTF8.CompressionCommon.encodeDecompressedBytes(decompressedBytes, options.outputEncoding);
        }
        LZUTF8.decompress = decompress;
        function compressAsync(input, options, callback) {
            if (callback == null)
                callback = function () { };
            var inputEncoding;
            try {
                inputEncoding = LZUTF8.CompressionCommon.detectCompressionSourceEncoding(input);
            }
            catch (e) {
                callback(undefined, e);
                return;
            }
            options = LZUTF8.ObjectTools.override({
                inputEncoding: inputEncoding,
                outputEncoding: "ByteArray",
                useWebWorker: true,
                blockSize: 65536
            }, options);
            LZUTF8.enqueueImmediate(function () {
                if (options.useWebWorker && LZUTF8.WebWorker.createGlobalWorkerIfNeeded()) {
                    LZUTF8.WebWorker.compressAsync(input, options, callback);
                }
                else {
                    LZUTF8.AsyncCompressor.compressAsync(input, options, callback);
                }
            });
        }
        LZUTF8.compressAsync = compressAsync;
        function decompressAsync(input, options, callback) {
            if (callback == null)
                callback = function () { };
            if (input == null) {
                callback(undefined, new TypeError("decompressAsync: undefined or null input received"));
                return;
            }
            options = LZUTF8.ObjectTools.override({
                inputEncoding: "ByteArray",
                outputEncoding: "String",
                useWebWorker: true,
                blockSize: 65536
            }, options);
            var normalizedInput = LZUTF8.BufferTools.convertToUint8ArrayIfNeeded(input);
            LZUTF8.EventLoop.enqueueImmediate(function () {
                if (options.useWebWorker && LZUTF8.WebWorker.createGlobalWorkerIfNeeded()) {
                    LZUTF8.WebWorker.decompressAsync(normalizedInput, options, callback);
                }
                else {
                    LZUTF8.AsyncDecompressor.decompressAsync(input, options, callback);
                }
            });
        }
        LZUTF8.decompressAsync = decompressAsync;
        function createCompressionStream() {
            return LZUTF8.AsyncCompressor.createCompressionStream();
        }
        LZUTF8.createCompressionStream = createCompressionStream;
        function createDecompressionStream() {
            return LZUTF8.AsyncDecompressor.createDecompressionStream();
        }
        LZUTF8.createDecompressionStream = createDecompressionStream;
        function encodeUTF8(str) {
            return LZUTF8.Encoding.UTF8.encode(str);
        }
        LZUTF8.encodeUTF8 = encodeUTF8;
        function decodeUTF8(input) {
            return LZUTF8.Encoding.UTF8.decode(input);
        }
        LZUTF8.decodeUTF8 = decodeUTF8;
        function encodeBase64(input) {
            return LZUTF8.Encoding.Base64.encode(input);
        }
        LZUTF8.encodeBase64 = encodeBase64;
        function decodeBase64(str) {
            return LZUTF8.Encoding.Base64.decode(str);
        }
        LZUTF8.decodeBase64 = decodeBase64;
        function encodeBinaryString(input) {
            return LZUTF8.Encoding.BinaryString.encode(input);
        }
        LZUTF8.encodeBinaryString = encodeBinaryString;
        function decodeBinaryString(str) {
            return LZUTF8.Encoding.BinaryString.decode(str);
        }
        LZUTF8.decodeBinaryString = decodeBinaryString;
        function encodeStorageBinaryString(input) {
            return LZUTF8.Encoding.StorageBinaryString.encode(input);
        }
        LZUTF8.encodeStorageBinaryString = encodeStorageBinaryString;
        function decodeStorageBinaryString(str) {
            return LZUTF8.Encoding.StorageBinaryString.decode(str);
        }
        LZUTF8.decodeStorageBinaryString = decodeStorageBinaryString;
    })(LZUTF8 || (LZUTF8 = {}));
    });

    var js_cookie = createCommonjsModule(function (module, exports) {
    (function (factory) {
    	var registeredInModuleLoader;
    	{
    		module.exports = factory();
    		registeredInModuleLoader = true;
    	}
    	if (!registeredInModuleLoader) {
    		var OldCookies = window.Cookies;
    		var api = window.Cookies = factory();
    		api.noConflict = function () {
    			window.Cookies = OldCookies;
    			return api;
    		};
    	}
    }(function () {
    	function extend () {
    		var i = 0;
    		var result = {};
    		for (; i < arguments.length; i++) {
    			var attributes = arguments[ i ];
    			for (var key in attributes) {
    				result[key] = attributes[key];
    			}
    		}
    		return result;
    	}

    	function decode (s) {
    		return s.replace(/(%[0-9A-Z]{2})+/g, decodeURIComponent);
    	}

    	function init (converter) {
    		function api() {}

    		function set (key, value, attributes) {
    			if (typeof document === 'undefined') {
    				return;
    			}

    			attributes = extend({
    				path: '/'
    			}, api.defaults, attributes);

    			if (typeof attributes.expires === 'number') {
    				attributes.expires = new Date(new Date() * 1 + attributes.expires * 864e+5);
    			}

    			// We're using "expires" because "max-age" is not supported by IE
    			attributes.expires = attributes.expires ? attributes.expires.toUTCString() : '';

    			try {
    				var result = JSON.stringify(value);
    				if (/^[\{\[]/.test(result)) {
    					value = result;
    				}
    			} catch (e) {}

    			value = converter.write ?
    				converter.write(value, key) :
    				encodeURIComponent(String(value))
    					.replace(/%(23|24|26|2B|3A|3C|3E|3D|2F|3F|40|5B|5D|5E|60|7B|7D|7C)/g, decodeURIComponent);

    			key = encodeURIComponent(String(key))
    				.replace(/%(23|24|26|2B|5E|60|7C)/g, decodeURIComponent)
    				.replace(/[\(\)]/g, escape);

    			var stringifiedAttributes = '';
    			for (var attributeName in attributes) {
    				if (!attributes[attributeName]) {
    					continue;
    				}
    				stringifiedAttributes += '; ' + attributeName;
    				if (attributes[attributeName] === true) {
    					continue;
    				}

    				// Considers RFC 6265 section 5.2:
    				// ...
    				// 3.  If the remaining unparsed-attributes contains a %x3B (";")
    				//     character:
    				// Consume the characters of the unparsed-attributes up to,
    				// not including, the first %x3B (";") character.
    				// ...
    				stringifiedAttributes += '=' + attributes[attributeName].split(';')[0];
    			}

    			return (document.cookie = key + '=' + value + stringifiedAttributes);
    		}

    		function get (key, json) {
    			if (typeof document === 'undefined') {
    				return;
    			}

    			var jar = {};
    			// To prevent the for loop in the first place assign an empty array
    			// in case there are no cookies at all.
    			var cookies = document.cookie ? document.cookie.split('; ') : [];
    			var i = 0;

    			for (; i < cookies.length; i++) {
    				var parts = cookies[i].split('=');
    				var cookie = parts.slice(1).join('=');

    				if (!json && cookie.charAt(0) === '"') {
    					cookie = cookie.slice(1, -1);
    				}

    				try {
    					var name = decode(parts[0]);
    					cookie = (converter.read || converter)(cookie, name) ||
    						decode(cookie);

    					if (json) {
    						try {
    							cookie = JSON.parse(cookie);
    						} catch (e) {}
    					}

    					jar[name] = cookie;

    					if (key === name) {
    						break;
    					}
    				} catch (e) {}
    			}

    			return key ? jar[key] : jar;
    		}

    		api.set = set;
    		api.get = function (key) {
    			return get(key, false /* read as raw */);
    		};
    		api.getJSON = function (key) {
    			return get(key, true /* read as json */);
    		};
    		api.remove = function (key, attributes) {
    			set(key, '', extend(attributes, {
    				expires: -1
    			}));
    		};

    		api.defaults = {};

    		api.withConverter = init;

    		return api;
    	}

    	return init(function () {});
    }));
    });

    /* editor.svelte generated by Svelte v3.23.0 */

    const { document: document_1, window: window_1 } = globals;

    function add_css() {
    	var style = element("style");
    	style.id = "svelte-xx59ef-style";
    	style.textContent = ".content.svelte-xx59ef.svelte-xx59ef.svelte-xx59ef{--raisin-black:hsla(200, 8%, 15%, 1);--roman-silver:hsla(196, 15%, 60%, 1);--colorless:hsla(0, 0%, 89%, 1);--black:hsla(83, 8%, 38%, 1);--white:hsl(48, 64%, 89%);--red:hsla(0, 71%, 84%, 1);--green:hsla(114, 60%, 75%, 1);--blue:hsla(235, 55%, 81%, 1)}.content.svelte-xx59ef.svelte-xx59ef.svelte-xx59ef{display:flex;flex-direction:row;width:100%;height:100%}.help-symbol.svelte-xx59ef.svelte-xx59ef.svelte-xx59ef{border-radius:50%;border:1px solid black;width:16px;height:16px;text-align:center;position:absolute;right:10px;top:10px;cursor:pointer}.help-symbol.svelte-xx59ef.svelte-xx59ef.svelte-xx59ef:hover{border-color:blue;color:blue}.toggle-search.svelte-xx59ef.svelte-xx59ef.svelte-xx59ef{background:blue;width:30px;height:30px;cursor:pointer;position:absolute;left:-30px;top:50%;user-select:none}.hide.svelte-xx59ef.svelte-xx59ef .toggle-search.svelte-xx59ef.svelte-xx59ef{left:-52px}.statistics.svelte-xx59ef.svelte-xx59ef.svelte-xx59ef{display:flex;flex-direction:column}.input.svelte-xx59ef.svelte-xx59ef.svelte-xx59ef{width:100%;height:100%;box-sizing:border-box;padding:10px;resize:none}.controls.svelte-xx59ef.svelte-xx59ef.svelte-xx59ef{flex-shrink:0;width:300px;height:100%;background:lightgray;display:flex;flex-direction:column}.help.svelte-xx59ef.svelte-xx59ef.svelte-xx59ef{padding:0px 10px 10px 10px;user-select:none;position:relative}.group-content.svelte-xx59ef.svelte-xx59ef.svelte-xx59ef{flex-grow:1;display:flex;flex-wrap:wrap;transition:height 500ms ease}.group-content.hidden.svelte-xx59ef.svelte-xx59ef.svelte-xx59ef{overflow:hidden;height:45px}.card-search.svelte-xx59ef.svelte-xx59ef.svelte-xx59ef{height:100%;flex-grow:1;background:white;display:flex;flex-direction:column;position:absolute;right:0;width:33%;z-index:100;box-shadow:0px 0px 10px black}.card-search.hide.svelte-xx59ef.svelte-xx59ef.svelte-xx59ef{right:-33%}.search-params.svelte-xx59ef.svelte-xx59ef.svelte-xx59ef{flex-shrink:0;display:flex;flex-direction:column}.search-result.svelte-xx59ef.svelte-xx59ef.svelte-xx59ef{height:100%;flex-grow:1;background:white;display:flex;flex-direction:row;overflow:auto;position:relative;user-select:none;flex-wrap:wrap}.display.svelte-xx59ef.svelte-xx59ef.svelte-xx59ef{flex-grow:1;background:gray;display:flex;flex-direction:column;flex-wrap:nowrap;overflow:auto;position:relative;user-select:none}.loading-wrapper.svelte-xx59ef.svelte-xx59ef.svelte-xx59ef{position:absolute;left:50%;top:0;bottom:0;display:flex;align-items:center}.entry.svelte-xx59ef.svelte-xx59ef.svelte-xx59ef{position:relative;padding:10px;flex-shrink:0}.shoping.svelte-xx59ef.svelte-xx59ef.svelte-xx59ef{position:absolute;z-index:10;font-size:3em;text-shadow:0px 0px 6px black;text-align:center;bottom:10%;right:10%;display:none}.entry.svelte-xx59ef.svelte-xx59ef:hover .shoping.svelte-xx59ef.svelte-xx59ef{display:block}.shoping.svelte-xx59ef.svelte-xx59ef .link.svelte-xx59ef.svelte-xx59ef{text-decoration:none}.shoping.svelte-xx59ef.svelte-xx59ef .link.svelte-xx59ef.svelte-xx59ef:hover{color:transparent;text-shadow:0 0 0 blue}.card.svelte-xx59ef.svelte-xx59ef.svelte-xx59ef{position:absolute;border:6px solid rgb(22, 22, 22);border-radius:10px;outline:0;box-shadow:0px 0px 10px black}.card.banned.svelte-xx59ef.svelte-xx59ef.svelte-xx59ef{border:6px solid red}.card.highlighted.svelte-xx59ef.svelte-xx59ef.svelte-xx59ef{border:6px solid yellow}.card.svelte-xx59ef.svelte-xx59ef.svelte-xx59ef:hover{border:6px solid blue;cursor:pointer}.card-context-menu.svelte-xx59ef.svelte-xx59ef.svelte-xx59ef{position:absolute;z-index:100;background:rgba(255, 255, 255, 0.7);height:100%;width:100%;margin-left:-3px;margin-top:-3px}.card-context-entry.svelte-xx59ef.svelte-xx59ef.svelte-xx59ef{margin:10px;font-weight:bold;background:white;padding:5px;border-radius:9px;box-shadow:0 0 6px black;cursor:pointer}.card-context-entry.svelte-xx59ef.svelte-xx59ef.svelte-xx59ef:hover{background:wheat}.price.svelte-xx59ef.svelte-xx59ef.svelte-xx59ef,.banned-text.svelte-xx59ef.svelte-xx59ef.svelte-xx59ef,.count.svelte-xx59ef.svelte-xx59ef.svelte-xx59ef{font-size:34px;text-shadow:0px 0px 9px black;color:red;position:absolute;z-index:100;font-weight:bold;left:34px}.banned-text.svelte-xx59ef.svelte-xx59ef.svelte-xx59ef{font-size:100%;text-shadow:0px 0px 9px black;color:red;position:absolute;z-index:100;font-weight:bold;left:17%}.count.svelte-xx59ef.svelte-xx59ef.svelte-xx59ef{top:165px}.price.svelte-xx59ef.svelte-xx59ef.svelte-xx59ef{bottom:7px;color:wheat;font-size:12px;background:black;left:45%;font-weight:normal}.group-header.svelte-xx59ef.svelte-xx59ef.svelte-xx59ef{display:flex;background:darkgrey;margin:8px 0;box-shadow:0px 0px 8px black;width:100%;flex-direction:row}.group-header.svelte-xx59ef.svelte-xx59ef h2.svelte-xx59ef.svelte-xx59ef{padding:0 25px;margin:0px}.group-statistics.svelte-xx59ef.svelte-xx59ef.svelte-xx59ef{display:flex;flex-direction:row}.mana-proposal.svelte-xx59ef.svelte-xx59ef.svelte-xx59ef,.mana-devotion.svelte-xx59ef.svelte-xx59ef.svelte-xx59ef{display:flex;flex-direction:row}.deck-value.svelte-xx59ef.svelte-xx59ef.svelte-xx59ef,.group-value.svelte-xx59ef.svelte-xx59ef.svelte-xx59ef{padding:5px;color:black;border-radius:50%;width:15px;height:15px;text-align:center;margin:5px;display:flex;text-align:center;align-items:center;font-size:11px;font-weight:bold}.blue.svelte-xx59ef.svelte-xx59ef.svelte-xx59ef{background-color:var(--blue)}.black.svelte-xx59ef.svelte-xx59ef.svelte-xx59ef{color:white;background-color:var(--black)}.red.svelte-xx59ef.svelte-xx59ef.svelte-xx59ef{background-color:var(--red)}.white.svelte-xx59ef.svelte-xx59ef.svelte-xx59ef{background-color:var(--white)}.green.svelte-xx59ef.svelte-xx59ef.svelte-xx59ef{background-color:var(--green)}.colorless.svelte-xx59ef.svelte-xx59ef.svelte-xx59ef{background-color:var(--colorless)}.sum.svelte-xx59ef.svelte-xx59ef.svelte-xx59ef{background-color:goldenrod}.color-param.svelte-xx59ef.svelte-xx59ef.svelte-xx59ef{display:flex;flex-direction:row}.mana-curve.svelte-xx59ef.svelte-xx59ef.svelte-xx59ef{display:flex;flex-direction:column}.all-curves.svelte-xx59ef.svelte-xx59ef.svelte-xx59ef{display:flex;flex-grow:1;flex-direction:row;height:80px}.all-labels.svelte-xx59ef.svelte-xx59ef.svelte-xx59ef{display:flex;flex-shrink:0;flex-direction:row}.curve-element.svelte-xx59ef.svelte-xx59ef.svelte-xx59ef{width:20px;display:flex;position:absolute;bottom:0;background:gray;align-items:center;height:100%}.curve-label.svelte-xx59ef.svelte-xx59ef.svelte-xx59ef{width:20px}.curve-wrapper.svelte-xx59ef.svelte-xx59ef.svelte-xx59ef{width:20px;position:relative;cursor:pointer}.curve-element.svelte-xx59ef.svelte-xx59ef.svelte-xx59ef:hover{background:lightcoral}.highlighted.svelte-xx59ef.svelte-xx59ef .curve-element.svelte-xx59ef.svelte-xx59ef{background:lightblue}.curve-label.highlighted.svelte-xx59ef.svelte-xx59ef.svelte-xx59ef{background:lightblue}.curve-label.svelte-xx59ef.svelte-xx59ef.svelte-xx59ef:hover{background:lightcoral}h4.svelte-xx59ef.svelte-xx59ef.svelte-xx59ef{margin-top:5px;margin-bottom:5px}.lds-ripple.svelte-xx59ef.svelte-xx59ef.svelte-xx59ef{display:inline-block;position:relative;width:80px;height:80px}.lds-ripple.svelte-xx59ef.svelte-xx59ef div.svelte-xx59ef.svelte-xx59ef{position:absolute;border:4px solid #fff;opacity:1;border-radius:50%;animation:svelte-xx59ef-lds-ripple 1s cubic-bezier(0, 0.2, 0.8, 1) infinite}.card-search.svelte-xx59ef .lds-ripple.svelte-xx59ef div.svelte-xx59ef{border:4px solid black}.lds-ripple.svelte-xx59ef.svelte-xx59ef div.svelte-xx59ef.svelte-xx59ef:nth-child(2){animation-delay:-0.5s}@keyframes svelte-xx59ef-lds-ripple{0%{top:36px;left:36px;width:0;height:0;opacity:1}100%{top:0px;left:0px;width:72px;height:72px;opacity:0}}";
    	append(document_1.head, style);
    }

    function get_each_context(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[85] = list[i];
    	return child_ctx;
    }

    function get_each_context_3(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[95] = list[i];
    	return child_ctx;
    }

    function get_each_context_4(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[98] = list[i];
    	child_ctx[100] = i;
    	return child_ctx;
    }

    function get_each_context_2(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[85] = list[i];
    	return child_ctx;
    }

    function get_each_context_1(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[90] = list[i];
    	return child_ctx;
    }

    function get_each_context_5(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[101] = list[i];
    	child_ctx[100] = i;
    	return child_ctx;
    }

    function get_each_context_6(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[101] = list[i];
    	child_ctx[100] = i;
    	return child_ctx;
    }

    // (858:6) {#if !useCookies}
    function create_if_block_13(ctx) {
    	let div;
    	let t0;
    	let button;
    	let mounted;
    	let dispose;

    	return {
    		c() {
    			div = element("div");
    			t0 = text("Saving has been disabled, to enable it, click the following button.\r\n          Only do it, if you accept the usage of cookies\r\n          ");
    			button = element("button");
    			button.textContent = "activate-cookies";
    			attr(button, "class", "cookie-btn");
    			attr(div, "class", "cookie-warning");
    			set_style(div, "margin-right", "30px");
    		},
    		m(target, anchor) {
    			insert(target, div, anchor);
    			append(div, t0);
    			append(div, button);

    			if (!mounted) {
    				dispose = listen(button, "click", /*enableSaving*/ ctx[30]);
    				mounted = true;
    			}
    		},
    		p: noop,
    		d(detaching) {
    			if (detaching) detach(div);
    			mounted = false;
    			dispose();
    		}
    	};
    }

    // (867:6) {#if helpActive}
    function create_if_block_12(ctx) {
    	let h4;
    	let t1;
    	let p0;
    	let t3;
    	let ul;
    	let t11;
    	let p1;
    	let t13;
    	let p2;

    	return {
    		c() {
    			h4 = element("h4");
    			h4.textContent = "How to use:";
    			t1 = space();
    			p0 = element("p");
    			p0.textContent = "paste your deck to the following input.";
    			t3 = space();
    			ul = element("ul");

    			ul.innerHTML = `<li>
            when a line starts with &quot;#&quot; it will be interpreted as headline
          </li> 
          <li>
            a card can be entered with a leading count, or just with its name
          </li> 
          <li>use the &quot;ESC&quot; key to reaload the preview</li> 
          <li>doubleclick a card to remove it</li>`;

    			t11 = space();
    			p1 = element("p");
    			p1.textContent = "NOTE: we use cookies to store your deck after reload.";
    			t13 = space();
    			p2 = element("p");
    			p2.textContent = "NOTE: This is not an official Magic produkt.";
    			attr(h4, "class", "svelte-xx59ef");
    		},
    		m(target, anchor) {
    			insert(target, h4, anchor);
    			insert(target, t1, anchor);
    			insert(target, p0, anchor);
    			insert(target, t3, anchor);
    			insert(target, ul, anchor);
    			insert(target, t11, anchor);
    			insert(target, p1, anchor);
    			insert(target, t13, anchor);
    			insert(target, p2, anchor);
    		},
    		d(detaching) {
    			if (detaching) detach(h4);
    			if (detaching) detach(t1);
    			if (detaching) detach(p0);
    			if (detaching) detach(t3);
    			if (detaching) detach(ul);
    			if (detaching) detach(t11);
    			if (detaching) detach(p1);
    			if (detaching) detach(t13);
    			if (detaching) detach(p2);
    		}
    	};
    }

    // (988:6) {:catch error}
    function create_catch_block_2(ctx) {
    	let t_value = /*error*/ ctx[88] + "";
    	let t;

    	return {
    		c() {
    			t = text(t_value);
    		},
    		m(target, anchor) {
    			insert(target, t, anchor);
    		},
    		p(ctx, dirty) {
    			if (dirty[0] & /*promise*/ 512 && t_value !== (t_value = /*error*/ ctx[88] + "")) set_data(t, t_value);
    		},
    		d(detaching) {
    			if (detaching) detach(t);
    		}
    	};
    }

    // (887:6) {:then groups}
    function create_then_block_2(ctx) {
    	let t0;
    	let div;
    	let t1;
    	let input_1;
    	let mounted;
    	let dispose;
    	let if_block = !/*helpActive*/ ctx[29] && create_if_block_8(ctx);

    	function keyup_handler(...args) {
    		return /*keyup_handler*/ ctx[63](/*groups*/ ctx[89], ...args);
    	}

    	return {
    		c() {
    			if (if_block) if_block.c();
    			t0 = space();
    			div = element("div");
    			t1 = text("search:\r\n          ");
    			input_1 = element("input");
    			attr(input_1, "title", "e.g.: sacrifice a (artifact|creature)");
    		},
    		m(target, anchor) {
    			if (if_block) if_block.m(target, anchor);
    			insert(target, t0, anchor);
    			insert(target, div, anchor);
    			append(div, t1);
    			append(div, input_1);
    			/*input_1_binding*/ ctx[62](input_1);

    			if (!mounted) {
    				dispose = listen(input_1, "keyup", keyup_handler);
    				mounted = true;
    			}
    		},
    		p(new_ctx, dirty) {
    			ctx = new_ctx;

    			if (!/*helpActive*/ ctx[29]) {
    				if (if_block) {
    					if_block.p(ctx, dirty);
    				} else {
    					if_block = create_if_block_8(ctx);
    					if_block.c();
    					if_block.m(t0.parentNode, t0);
    				}
    			} else if (if_block) {
    				if_block.d(1);
    				if_block = null;
    			}
    		},
    		d(detaching) {
    			if (if_block) if_block.d(detaching);
    			if (detaching) detach(t0);
    			if (detaching) detach(div);
    			/*input_1_binding*/ ctx[62](null);
    			mounted = false;
    			dispose();
    		}
    	};
    }

    // (889:8) {#if !helpActive}
    function create_if_block_8(ctx) {
    	let h4;
    	let t1;
    	let div0;
    	let t2;
    	let t3_value = /*groups*/ ctx[89]["cardCount"] + "";
    	let t3;
    	let t4;
    	let div1;
    	let t5;
    	let t6_value = /*groups*/ ctx[89]["landCount"] + "";
    	let t6;
    	let t7;
    	let t8_value = /*groups*/ ctx[89]["cardCount"] - /*groups*/ ctx[89]["landCount"] + "";
    	let t8;
    	let t9;
    	let div2;
    	let t10;
    	let t11_value = /*groups*/ ctx[89]["creatureCount"] + "";
    	let t11;
    	let t12;
    	let div3;
    	let t13;
    	let t14_value = /*groups*/ ctx[89]["instantCount"] + "";
    	let t14;
    	let t15;
    	let div4;
    	let t16;
    	let t17_value = /*groups*/ ctx[89]["sorceryCount"] + "";
    	let t17;
    	let t18;
    	let div5;
    	let t19;
    	let t20_value = /*groups*/ ctx[89]["enchantmentCount"] + "";
    	let t20;
    	let t21;
    	let div6;
    	let t22;
    	let t23_value = /*groups*/ ctx[89]["artifactCount"] + "";
    	let t23;
    	let t24;
    	let div7;
    	let t25;
    	let t26_value = /*groups*/ ctx[89].cost.toFixed(2) + "$" + "";
    	let t26;
    	let t27;
    	let if_block_anchor;
    	let if_block = /*statisticsActive*/ ctx[5] && create_if_block_9(ctx);

    	return {
    		c() {
    			h4 = element("h4");
    			h4.textContent = "General";
    			t1 = space();
    			div0 = element("div");
    			t2 = text("Total cards: ");
    			t3 = text(t3_value);
    			t4 = space();
    			div1 = element("div");
    			t5 = text("Lands: ");
    			t6 = text(t6_value);
    			t7 = text(" Nonlands: ");
    			t8 = text(t8_value);
    			t9 = space();
    			div2 = element("div");
    			t10 = text("Creatures: ");
    			t11 = text(t11_value);
    			t12 = space();
    			div3 = element("div");
    			t13 = text("Instants: ");
    			t14 = text(t14_value);
    			t15 = space();
    			div4 = element("div");
    			t16 = text("Sorceries: ");
    			t17 = text(t17_value);
    			t18 = space();
    			div5 = element("div");
    			t19 = text("Enchantments: ");
    			t20 = text(t20_value);
    			t21 = space();
    			div6 = element("div");
    			t22 = text("Artifacts: ");
    			t23 = text(t23_value);
    			t24 = space();
    			div7 = element("div");
    			t25 = text("Cost: ");
    			t26 = text(t26_value);
    			t27 = space();
    			if (if_block) if_block.c();
    			if_block_anchor = empty();
    			attr(h4, "class", "svelte-xx59ef");
    		},
    		m(target, anchor) {
    			insert(target, h4, anchor);
    			insert(target, t1, anchor);
    			insert(target, div0, anchor);
    			append(div0, t2);
    			append(div0, t3);
    			insert(target, t4, anchor);
    			insert(target, div1, anchor);
    			append(div1, t5);
    			append(div1, t6);
    			append(div1, t7);
    			append(div1, t8);
    			insert(target, t9, anchor);
    			insert(target, div2, anchor);
    			append(div2, t10);
    			append(div2, t11);
    			insert(target, t12, anchor);
    			insert(target, div3, anchor);
    			append(div3, t13);
    			append(div3, t14);
    			insert(target, t15, anchor);
    			insert(target, div4, anchor);
    			append(div4, t16);
    			append(div4, t17);
    			insert(target, t18, anchor);
    			insert(target, div5, anchor);
    			append(div5, t19);
    			append(div5, t20);
    			insert(target, t21, anchor);
    			insert(target, div6, anchor);
    			append(div6, t22);
    			append(div6, t23);
    			insert(target, t24, anchor);
    			insert(target, div7, anchor);
    			append(div7, t25);
    			append(div7, t26);
    			insert(target, t27, anchor);
    			if (if_block) if_block.m(target, anchor);
    			insert(target, if_block_anchor, anchor);
    		},
    		p(ctx, dirty) {
    			if (dirty[0] & /*promise*/ 512 && t3_value !== (t3_value = /*groups*/ ctx[89]["cardCount"] + "")) set_data(t3, t3_value);
    			if (dirty[0] & /*promise*/ 512 && t6_value !== (t6_value = /*groups*/ ctx[89]["landCount"] + "")) set_data(t6, t6_value);
    			if (dirty[0] & /*promise*/ 512 && t8_value !== (t8_value = /*groups*/ ctx[89]["cardCount"] - /*groups*/ ctx[89]["landCount"] + "")) set_data(t8, t8_value);
    			if (dirty[0] & /*promise*/ 512 && t11_value !== (t11_value = /*groups*/ ctx[89]["creatureCount"] + "")) set_data(t11, t11_value);
    			if (dirty[0] & /*promise*/ 512 && t14_value !== (t14_value = /*groups*/ ctx[89]["instantCount"] + "")) set_data(t14, t14_value);
    			if (dirty[0] & /*promise*/ 512 && t17_value !== (t17_value = /*groups*/ ctx[89]["sorceryCount"] + "")) set_data(t17, t17_value);
    			if (dirty[0] & /*promise*/ 512 && t20_value !== (t20_value = /*groups*/ ctx[89]["enchantmentCount"] + "")) set_data(t20, t20_value);
    			if (dirty[0] & /*promise*/ 512 && t23_value !== (t23_value = /*groups*/ ctx[89]["artifactCount"] + "")) set_data(t23, t23_value);
    			if (dirty[0] & /*promise*/ 512 && t26_value !== (t26_value = /*groups*/ ctx[89].cost.toFixed(2) + "$" + "")) set_data(t26, t26_value);

    			if (/*statisticsActive*/ ctx[5]) {
    				if (if_block) {
    					if_block.p(ctx, dirty);
    				} else {
    					if_block = create_if_block_9(ctx);
    					if_block.c();
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				}
    			} else if (if_block) {
    				if_block.d(1);
    				if_block = null;
    			}
    		},
    		d(detaching) {
    			if (detaching) detach(h4);
    			if (detaching) detach(t1);
    			if (detaching) detach(div0);
    			if (detaching) detach(t4);
    			if (detaching) detach(div1);
    			if (detaching) detach(t9);
    			if (detaching) detach(div2);
    			if (detaching) detach(t12);
    			if (detaching) detach(div3);
    			if (detaching) detach(t15);
    			if (detaching) detach(div4);
    			if (detaching) detach(t18);
    			if (detaching) detach(div5);
    			if (detaching) detach(t21);
    			if (detaching) detach(div6);
    			if (detaching) detach(t24);
    			if (detaching) detach(div7);
    			if (detaching) detach(t27);
    			if (if_block) if_block.d(detaching);
    			if (detaching) detach(if_block_anchor);
    		}
    	};
    }

    // (905:10) {#if statisticsActive}
    function create_if_block_9(ctx) {
    	let div20;
    	let h40;
    	let t1;
    	let div6;
    	let div0;
    	let t2_value = /*groups*/ ctx[89]["mana"].blue + "";
    	let t2;
    	let t3;
    	let div1;
    	let t4_value = /*groups*/ ctx[89]["mana"].black + "";
    	let t4;
    	let t5;
    	let div2;
    	let t6_value = /*groups*/ ctx[89]["mana"].red + "";
    	let t6;
    	let t7;
    	let div3;
    	let t8_value = /*groups*/ ctx[89]["mana"].white + "";
    	let t8;
    	let t9;
    	let div4;
    	let t10_value = /*groups*/ ctx[89]["mana"].green + "";
    	let t10;
    	let t11;
    	let div5;
    	let t12_value = /*groups*/ ctx[89]["mana"].colorless + "";
    	let t12;
    	let t13;
    	let h41;
    	let t15;
    	let div7;
    	let t16;
    	let t17_value = /*groups*/ ctx[89]["mana"].generic + "";
    	let t17;
    	let t18;
    	let div8;
    	let t19;
    	let t20_value = /*groups*/ ctx[89]["mana"].sum + "";
    	let t20;
    	let t21;
    	let div9;
    	let t22;
    	let t23_value = /*groups*/ ctx[89]["averageMana"].toFixed(2) + "";
    	let t23;
    	let t24;
    	let h42;
    	let t26;
    	let div16;
    	let div10;
    	let t27_value = (/*groups*/ ctx[89]["manaProposal"].blue * /*groups*/ ctx[89]["landCount"]).toFixed(1) + "";
    	let t27;
    	let t28;
    	let div11;
    	let t29_value = (/*groups*/ ctx[89]["manaProposal"].black * /*groups*/ ctx[89]["landCount"]).toFixed(1) + "";
    	let t29;
    	let t30;
    	let div12;
    	let t31_value = (/*groups*/ ctx[89]["manaProposal"].red * /*groups*/ ctx[89]["landCount"]).toFixed(1) + "";
    	let t31;
    	let t32;
    	let div13;
    	let t33_value = (/*groups*/ ctx[89]["manaProposal"].white * /*groups*/ ctx[89]["landCount"]).toFixed(1) + "";
    	let t33;
    	let t34;
    	let div14;
    	let t35_value = (/*groups*/ ctx[89]["manaProposal"].green * /*groups*/ ctx[89]["landCount"]).toFixed(1) + "";
    	let t35;
    	let t36;
    	let div15;
    	let t37_value = (/*groups*/ ctx[89]["manaProposal"].colorless * /*groups*/ ctx[89]["landCount"]).toFixed(1) + "";
    	let t37;
    	let t38;
    	let h43;
    	let t40;
    	let div19;
    	let div17;
    	let t41;
    	let div18;
    	let each_value_6 = /*groups*/ ctx[89]["manaCurve"];
    	let each_blocks_1 = [];

    	for (let i = 0; i < each_value_6.length; i += 1) {
    		each_blocks_1[i] = create_each_block_6(get_each_context_6(ctx, each_value_6, i));
    	}

    	let each_value_5 = /*groups*/ ctx[89]["manaCurve"];
    	let each_blocks = [];

    	for (let i = 0; i < each_value_5.length; i += 1) {
    		each_blocks[i] = create_each_block_5(get_each_context_5(ctx, each_value_5, i));
    	}

    	return {
    		c() {
    			div20 = element("div");
    			h40 = element("h4");
    			h40.textContent = "Devotion";
    			t1 = space();
    			div6 = element("div");
    			div0 = element("div");
    			t2 = text(t2_value);
    			t3 = space();
    			div1 = element("div");
    			t4 = text(t4_value);
    			t5 = space();
    			div2 = element("div");
    			t6 = text(t6_value);
    			t7 = space();
    			div3 = element("div");
    			t8 = text(t8_value);
    			t9 = space();
    			div4 = element("div");
    			t10 = text(t10_value);
    			t11 = space();
    			div5 = element("div");
    			t12 = text(t12_value);
    			t13 = space();
    			h41 = element("h4");
    			h41.textContent = "Generic Mana";
    			t15 = space();
    			div7 = element("div");
    			t16 = text("Remaining generic mana costs:");
    			t17 = text(t17_value);
    			t18 = space();
    			div8 = element("div");
    			t19 = text("CMC-Mana-Sum:");
    			t20 = text(t20_value);
    			t21 = space();
    			div9 = element("div");
    			t22 = text("Average CMC per Nonland: ");
    			t23 = text(t23_value);
    			t24 = space();
    			h42 = element("h4");
    			h42.textContent = "Suggested Mana Distribution";
    			t26 = space();
    			div16 = element("div");
    			div10 = element("div");
    			t27 = text(t27_value);
    			t28 = space();
    			div11 = element("div");
    			t29 = text(t29_value);
    			t30 = space();
    			div12 = element("div");
    			t31 = text(t31_value);
    			t32 = space();
    			div13 = element("div");
    			t33 = text(t33_value);
    			t34 = space();
    			div14 = element("div");
    			t35 = text(t35_value);
    			t36 = space();
    			div15 = element("div");
    			t37 = text(t37_value);
    			t38 = space();
    			h43 = element("h4");
    			h43.textContent = "Mana Curve";
    			t40 = space();
    			div19 = element("div");
    			div17 = element("div");

    			for (let i = 0; i < each_blocks_1.length; i += 1) {
    				each_blocks_1[i].c();
    			}

    			t41 = space();
    			div18 = element("div");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			attr(h40, "class", "svelte-xx59ef");
    			attr(div0, "class", "deck-value blue svelte-xx59ef");
    			attr(div1, "class", "deck-value black svelte-xx59ef");
    			attr(div2, "class", "deck-value red svelte-xx59ef");
    			attr(div3, "class", "deck-value white svelte-xx59ef");
    			attr(div4, "class", "deck-value green svelte-xx59ef");
    			attr(div5, "class", "deck-value colorless svelte-xx59ef");
    			attr(div6, "class", "mana-devotion svelte-xx59ef");
    			attr(h41, "class", "svelte-xx59ef");
    			attr(h42, "class", "svelte-xx59ef");
    			attr(div10, "class", "deck-value blue svelte-xx59ef");
    			attr(div11, "class", "deck-value black svelte-xx59ef");
    			attr(div12, "class", "deck-value red svelte-xx59ef");
    			attr(div13, "class", "deck-value white svelte-xx59ef");
    			attr(div14, "class", "deck-value green svelte-xx59ef");
    			attr(div15, "class", "deck-value colorless svelte-xx59ef");
    			attr(div16, "class", "mana-proposal svelte-xx59ef");
    			attr(h43, "class", "svelte-xx59ef");
    			attr(div17, "class", "all-curves svelte-xx59ef");
    			attr(div18, "class", "all-labels svelte-xx59ef");
    			attr(div19, "class", "mana-curve svelte-xx59ef");
    			attr(div20, "class", "statistics svelte-xx59ef");
    		},
    		m(target, anchor) {
    			insert(target, div20, anchor);
    			append(div20, h40);
    			append(div20, t1);
    			append(div20, div6);
    			append(div6, div0);
    			append(div0, t2);
    			append(div6, t3);
    			append(div6, div1);
    			append(div1, t4);
    			append(div6, t5);
    			append(div6, div2);
    			append(div2, t6);
    			append(div6, t7);
    			append(div6, div3);
    			append(div3, t8);
    			append(div6, t9);
    			append(div6, div4);
    			append(div4, t10);
    			append(div6, t11);
    			append(div6, div5);
    			append(div5, t12);
    			append(div20, t13);
    			append(div20, h41);
    			append(div20, t15);
    			append(div20, div7);
    			append(div7, t16);
    			append(div7, t17);
    			append(div20, t18);
    			append(div20, div8);
    			append(div8, t19);
    			append(div8, t20);
    			append(div20, t21);
    			append(div20, div9);
    			append(div9, t22);
    			append(div9, t23);
    			append(div20, t24);
    			append(div20, h42);
    			append(div20, t26);
    			append(div20, div16);
    			append(div16, div10);
    			append(div10, t27);
    			append(div16, t28);
    			append(div16, div11);
    			append(div11, t29);
    			append(div16, t30);
    			append(div16, div12);
    			append(div12, t31);
    			append(div16, t32);
    			append(div16, div13);
    			append(div13, t33);
    			append(div16, t34);
    			append(div16, div14);
    			append(div14, t35);
    			append(div16, t36);
    			append(div16, div15);
    			append(div15, t37);
    			append(div20, t38);
    			append(div20, h43);
    			append(div20, t40);
    			append(div20, div19);
    			append(div19, div17);

    			for (let i = 0; i < each_blocks_1.length; i += 1) {
    				each_blocks_1[i].m(div17, null);
    			}

    			append(div19, t41);
    			append(div19, div18);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(div18, null);
    			}
    		},
    		p(ctx, dirty) {
    			if (dirty[0] & /*promise*/ 512 && t2_value !== (t2_value = /*groups*/ ctx[89]["mana"].blue + "")) set_data(t2, t2_value);
    			if (dirty[0] & /*promise*/ 512 && t4_value !== (t4_value = /*groups*/ ctx[89]["mana"].black + "")) set_data(t4, t4_value);
    			if (dirty[0] & /*promise*/ 512 && t6_value !== (t6_value = /*groups*/ ctx[89]["mana"].red + "")) set_data(t6, t6_value);
    			if (dirty[0] & /*promise*/ 512 && t8_value !== (t8_value = /*groups*/ ctx[89]["mana"].white + "")) set_data(t8, t8_value);
    			if (dirty[0] & /*promise*/ 512 && t10_value !== (t10_value = /*groups*/ ctx[89]["mana"].green + "")) set_data(t10, t10_value);
    			if (dirty[0] & /*promise*/ 512 && t12_value !== (t12_value = /*groups*/ ctx[89]["mana"].colorless + "")) set_data(t12, t12_value);
    			if (dirty[0] & /*promise*/ 512 && t17_value !== (t17_value = /*groups*/ ctx[89]["mana"].generic + "")) set_data(t17, t17_value);
    			if (dirty[0] & /*promise*/ 512 && t20_value !== (t20_value = /*groups*/ ctx[89]["mana"].sum + "")) set_data(t20, t20_value);
    			if (dirty[0] & /*promise*/ 512 && t23_value !== (t23_value = /*groups*/ ctx[89]["averageMana"].toFixed(2) + "")) set_data(t23, t23_value);
    			if (dirty[0] & /*promise*/ 512 && t27_value !== (t27_value = (/*groups*/ ctx[89]["manaProposal"].blue * /*groups*/ ctx[89]["landCount"]).toFixed(1) + "")) set_data(t27, t27_value);
    			if (dirty[0] & /*promise*/ 512 && t29_value !== (t29_value = (/*groups*/ ctx[89]["manaProposal"].black * /*groups*/ ctx[89]["landCount"]).toFixed(1) + "")) set_data(t29, t29_value);
    			if (dirty[0] & /*promise*/ 512 && t31_value !== (t31_value = (/*groups*/ ctx[89]["manaProposal"].red * /*groups*/ ctx[89]["landCount"]).toFixed(1) + "")) set_data(t31, t31_value);
    			if (dirty[0] & /*promise*/ 512 && t33_value !== (t33_value = (/*groups*/ ctx[89]["manaProposal"].white * /*groups*/ ctx[89]["landCount"]).toFixed(1) + "")) set_data(t33, t33_value);
    			if (dirty[0] & /*promise*/ 512 && t35_value !== (t35_value = (/*groups*/ ctx[89]["manaProposal"].green * /*groups*/ ctx[89]["landCount"]).toFixed(1) + "")) set_data(t35, t35_value);
    			if (dirty[0] & /*promise*/ 512 && t37_value !== (t37_value = (/*groups*/ ctx[89]["manaProposal"].colorless * /*groups*/ ctx[89]["landCount"]).toFixed(1) + "")) set_data(t37, t37_value);

    			if (dirty[0] & /*devotionHighlight, promise*/ 768 | dirty[1] & /*highlightDevotion*/ 1) {
    				each_value_6 = /*groups*/ ctx[89]["manaCurve"];
    				let i;

    				for (i = 0; i < each_value_6.length; i += 1) {
    					const child_ctx = get_each_context_6(ctx, each_value_6, i);

    					if (each_blocks_1[i]) {
    						each_blocks_1[i].p(child_ctx, dirty);
    					} else {
    						each_blocks_1[i] = create_each_block_6(child_ctx);
    						each_blocks_1[i].c();
    						each_blocks_1[i].m(div17, null);
    					}
    				}

    				for (; i < each_blocks_1.length; i += 1) {
    					each_blocks_1[i].d(1);
    				}

    				each_blocks_1.length = each_value_6.length;
    			}

    			if (dirty[0] & /*devotionHighlight, promise*/ 768 | dirty[1] & /*highlightDevotion*/ 1) {
    				each_value_5 = /*groups*/ ctx[89]["manaCurve"];
    				let i;

    				for (i = 0; i < each_value_5.length; i += 1) {
    					const child_ctx = get_each_context_5(ctx, each_value_5, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block_5(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(div18, null);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value_5.length;
    			}
    		},
    		d(detaching) {
    			if (detaching) detach(div20);
    			destroy_each(each_blocks_1, detaching);
    			destroy_each(each_blocks, detaching);
    		}
    	};
    }

    // (950:20) {#if mana > 0}
    function create_if_block_11(ctx) {
    	let div1;
    	let div0;
    	let t0_value = (/*mana*/ ctx[101] || "") + "";
    	let t0;
    	let div0_style_value;
    	let t1;
    	let mounted;
    	let dispose;

    	function click_handler(...args) {
    		return /*click_handler*/ ctx[60](/*i*/ ctx[100], ...args);
    	}

    	return {
    		c() {
    			div1 = element("div");
    			div0 = element("div");
    			t0 = text(t0_value);
    			t1 = space();
    			attr(div0, "class", "curve-element svelte-xx59ef");
    			attr(div0, "style", div0_style_value = "height:" + getHeight(/*mana*/ ctx[101], /*groups*/ ctx[89]) + "%;");
    			attr(div1, "class", "curve-wrapper svelte-xx59ef");
    			toggle_class(div1, "highlighted", /*devotionHighlight*/ ctx[8] == /*i*/ ctx[100]);
    		},
    		m(target, anchor) {
    			insert(target, div1, anchor);
    			append(div1, div0);
    			append(div0, t0);
    			append(div1, t1);

    			if (!mounted) {
    				dispose = listen(div1, "click", click_handler);
    				mounted = true;
    			}
    		},
    		p(new_ctx, dirty) {
    			ctx = new_ctx;
    			if (dirty[0] & /*promise*/ 512 && t0_value !== (t0_value = (/*mana*/ ctx[101] || "") + "")) set_data(t0, t0_value);

    			if (dirty[0] & /*promise*/ 512 && div0_style_value !== (div0_style_value = "height:" + getHeight(/*mana*/ ctx[101], /*groups*/ ctx[89]) + "%;")) {
    				attr(div0, "style", div0_style_value);
    			}

    			if (dirty[0] & /*devotionHighlight*/ 256) {
    				toggle_class(div1, "highlighted", /*devotionHighlight*/ ctx[8] == /*i*/ ctx[100]);
    			}
    		},
    		d(detaching) {
    			if (detaching) detach(div1);
    			mounted = false;
    			dispose();
    		}
    	};
    }

    // (949:18) {#each groups['manaCurve'] as mana, i}
    function create_each_block_6(ctx) {
    	let if_block_anchor;
    	let if_block = /*mana*/ ctx[101] > 0 && create_if_block_11(ctx);

    	return {
    		c() {
    			if (if_block) if_block.c();
    			if_block_anchor = empty();
    		},
    		m(target, anchor) {
    			if (if_block) if_block.m(target, anchor);
    			insert(target, if_block_anchor, anchor);
    		},
    		p(ctx, dirty) {
    			if (/*mana*/ ctx[101] > 0) {
    				if (if_block) {
    					if_block.p(ctx, dirty);
    				} else {
    					if_block = create_if_block_11(ctx);
    					if_block.c();
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				}
    			} else if (if_block) {
    				if_block.d(1);
    				if_block = null;
    			}
    		},
    		d(detaching) {
    			if (if_block) if_block.d(detaching);
    			if (detaching) detach(if_block_anchor);
    		}
    	};
    }

    // (967:20) {#if mana > 0}
    function create_if_block_10(ctx) {
    	let div;
    	let t0;
    	let t1;
    	let mounted;
    	let dispose;

    	function click_handler_1(...args) {
    		return /*click_handler_1*/ ctx[61](/*i*/ ctx[100], ...args);
    	}

    	return {
    		c() {
    			div = element("div");
    			t0 = text(/*i*/ ctx[100]);
    			t1 = space();
    			attr(div, "class", "curve-label svelte-xx59ef");
    			toggle_class(div, "highlighted", /*devotionHighlight*/ ctx[8] == /*i*/ ctx[100]);
    		},
    		m(target, anchor) {
    			insert(target, div, anchor);
    			append(div, t0);
    			append(div, t1);

    			if (!mounted) {
    				dispose = listen(div, "click", click_handler_1);
    				mounted = true;
    			}
    		},
    		p(new_ctx, dirty) {
    			ctx = new_ctx;

    			if (dirty[0] & /*devotionHighlight*/ 256) {
    				toggle_class(div, "highlighted", /*devotionHighlight*/ ctx[8] == /*i*/ ctx[100]);
    			}
    		},
    		d(detaching) {
    			if (detaching) detach(div);
    			mounted = false;
    			dispose();
    		}
    	};
    }

    // (966:18) {#each groups['manaCurve'] as mana, i}
    function create_each_block_5(ctx) {
    	let if_block_anchor;
    	let if_block = /*mana*/ ctx[101] > 0 && create_if_block_10(ctx);

    	return {
    		c() {
    			if (if_block) if_block.c();
    			if_block_anchor = empty();
    		},
    		m(target, anchor) {
    			if (if_block) if_block.m(target, anchor);
    			insert(target, if_block_anchor, anchor);
    		},
    		p(ctx, dirty) {
    			if (/*mana*/ ctx[101] > 0) {
    				if (if_block) {
    					if_block.p(ctx, dirty);
    				} else {
    					if_block = create_if_block_10(ctx);
    					if_block.c();
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				}
    			} else if (if_block) {
    				if_block.d(1);
    				if_block = null;
    			}
    		},
    		d(detaching) {
    			if (if_block) if_block.d(detaching);
    			if (detaching) detach(if_block_anchor);
    		}
    	};
    }

    // (884:22)             <div>loading: {progress}
    function create_pending_block_2(ctx) {
    	let div;
    	let t0;
    	let t1;
    	let t2;
    	let t3;

    	return {
    		c() {
    			div = element("div");
    			t0 = text("loading: ");
    			t1 = text(/*progress*/ ctx[13]);
    			t2 = text("/");
    			t3 = text(/*all*/ ctx[14]);
    		},
    		m(target, anchor) {
    			insert(target, div, anchor);
    			append(div, t0);
    			append(div, t1);
    			append(div, t2);
    			append(div, t3);
    		},
    		p(ctx, dirty) {
    			if (dirty[0] & /*progress*/ 8192) set_data(t1, /*progress*/ ctx[13]);
    			if (dirty[0] & /*all*/ 16384) set_data(t3, /*all*/ ctx[14]);
    		},
    		d(detaching) {
    			if (detaching) detach(div);
    		}
    	};
    }

    // (1160:4) {:catch error}
    function create_catch_block_1(ctx) {
    	let div;

    	return {
    		c() {
    			div = element("div");
    			div.textContent = "ERROR, check your decklist for correct format or internet connection\r\n        brudi";
    			attr(div, "class", "error");
    		},
    		m(target, anchor) {
    			insert(target, div, anchor);
    		},
    		p: noop,
    		d(detaching) {
    			if (detaching) detach(div);
    		}
    	};
    }

    // (1071:4) {:then groups}
    function create_then_block_1(ctx) {
    	let each_1_anchor;
    	let each_value_1 = /*deckSeach*/ ctx[24] || /*groups*/ ctx[89] || [];
    	let each_blocks = [];

    	for (let i = 0; i < each_value_1.length; i += 1) {
    		each_blocks[i] = create_each_block_1(get_each_context_1(ctx, each_value_1, i));
    	}

    	return {
    		c() {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			each_1_anchor = empty();
    		},
    		m(target, anchor) {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(target, anchor);
    			}

    			insert(target, each_1_anchor, anchor);
    		},
    		p(ctx, dirty) {
    			if (dirty[0] & /*hiddenGroups, deckSeach, promise, width, height, currentCardContext, scaling, format, devotionHighlight*/ 218108748 | dirty[1] & /*cardContextClick, cardContextMenu, remove, toggleGroupVisibility*/ 65888) {
    				each_value_1 = /*deckSeach*/ ctx[24] || /*groups*/ ctx[89] || [];
    				let i;

    				for (i = 0; i < each_value_1.length; i += 1) {
    					const child_ctx = get_each_context_1(ctx, each_value_1, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block_1(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value_1.length;
    			}
    		},
    		d(detaching) {
    			destroy_each(each_blocks, detaching);
    			if (detaching) detach(each_1_anchor);
    		}
    	};
    }

    // (1114:16) {#each { length: card.count > 4 ? 4 : card.count } as _, i}
    function create_each_block_4(ctx) {
    	let img;
    	let img_style_value;
    	let img_src_value;
    	let img_alt_value;
    	let mounted;
    	let dispose;

    	function mouseup_handler(...args) {
    		return /*mouseup_handler*/ ctx[69](/*card*/ ctx[85], /*groups*/ ctx[89], ...args);
    	}

    	function dblclick_handler(...args) {
    		return /*dblclick_handler*/ ctx[70](/*card*/ ctx[85], ...args);
    	}

    	return {
    		c() {
    			img = element("img");
    			attr(img, "class", "card svelte-xx59ef");
    			attr(img, "style", img_style_value = "margin-top: " + /*i*/ ctx[100] * 40 + "px");
    			if (img.src !== (img_src_value = /*card*/ ctx[85].url)) attr(img, "src", img_src_value);
    			attr(img, "alt", img_alt_value = /*card*/ ctx[85].name);
    			attr(img, "width", /*width*/ ctx[3]);
    			attr(img, "height", /*height*/ ctx[2]);
    			toggle_class(img, "banned", /*card*/ ctx[85].data.legalities[/*format*/ ctx[12].value] !== "legal");
    			toggle_class(img, "highlighted", /*devotionHighlight*/ ctx[8] == /*card*/ ctx[85].data.cmc);
    		},
    		m(target, anchor) {
    			insert(target, img, anchor);

    			if (!mounted) {
    				dispose = [
    					listen(img, "mouseup", stop_propagation(mouseup_handler)),
    					listen(img, "dblclick", dblclick_handler)
    				];

    				mounted = true;
    			}
    		},
    		p(new_ctx, dirty) {
    			ctx = new_ctx;

    			if (dirty[0] & /*deckSeach, promise*/ 16777728 && img.src !== (img_src_value = /*card*/ ctx[85].url)) {
    				attr(img, "src", img_src_value);
    			}

    			if (dirty[0] & /*deckSeach, promise*/ 16777728 && img_alt_value !== (img_alt_value = /*card*/ ctx[85].name)) {
    				attr(img, "alt", img_alt_value);
    			}

    			if (dirty[0] & /*width*/ 8) {
    				attr(img, "width", /*width*/ ctx[3]);
    			}

    			if (dirty[0] & /*height*/ 4) {
    				attr(img, "height", /*height*/ ctx[2]);
    			}

    			if (dirty[0] & /*deckSeach, promise, format*/ 16781824) {
    				toggle_class(img, "banned", /*card*/ ctx[85].data.legalities[/*format*/ ctx[12].value] !== "legal");
    			}

    			if (dirty[0] & /*devotionHighlight, deckSeach, promise*/ 16777984) {
    				toggle_class(img, "highlighted", /*devotionHighlight*/ ctx[8] == /*card*/ ctx[85].data.cmc);
    			}
    		},
    		d(detaching) {
    			if (detaching) detach(img);
    			mounted = false;
    			run_all(dispose);
    		}
    	};
    }

    // (1128:16) {#if card.data.legalities[format.value] !== 'legal'}
    function create_if_block_7(ctx) {
    	let div;

    	return {
    		c() {
    			div = element("div");
    			div.textContent = "BANNED";
    			attr(div, "class", "banned-text svelte-xx59ef");
    		},
    		m(target, anchor) {
    			insert(target, div, anchor);
    		},
    		d(detaching) {
    			if (detaching) detach(div);
    		}
    	};
    }

    // (1131:16) {#if card.count > 4}
    function create_if_block_6(ctx) {
    	let div;
    	let t0_value = /*card*/ ctx[85].count + "";
    	let t0;
    	let t1;

    	return {
    		c() {
    			div = element("div");
    			t0 = text(t0_value);
    			t1 = text("x");
    			attr(div, "class", "count svelte-xx59ef");
    		},
    		m(target, anchor) {
    			insert(target, div, anchor);
    			append(div, t0);
    			append(div, t1);
    		},
    		p(ctx, dirty) {
    			if (dirty[0] & /*deckSeach, promise*/ 16777728 && t0_value !== (t0_value = /*card*/ ctx[85].count + "")) set_data(t0, t0_value);
    		},
    		d(detaching) {
    			if (detaching) detach(div);
    		}
    	};
    }

    // (1135:16) {#if scaling > 90}
    function create_if_block_5(ctx) {
    	let div;
    	let t_value = (/*card*/ ctx[85].data.prices.usd + "$" || "???") + "";
    	let t;

    	return {
    		c() {
    			div = element("div");
    			t = text(t_value);
    			attr(div, "class", "price svelte-xx59ef");
    		},
    		m(target, anchor) {
    			insert(target, div, anchor);
    			append(div, t);
    		},
    		p(ctx, dirty) {
    			if (dirty[0] & /*deckSeach, promise*/ 16777728 && t_value !== (t_value = (/*card*/ ctx[85].data.prices.usd + "$" || "???") + "")) set_data(t, t_value);
    		},
    		d(detaching) {
    			if (detaching) detach(div);
    		}
    	};
    }

    // (1139:16) {#if currentCardContext === card}
    function create_if_block_3(ctx) {
    	let div;
    	let each_value_3 = /*groups*/ ctx[89];
    	let each_blocks = [];

    	for (let i = 0; i < each_value_3.length; i += 1) {
    		each_blocks[i] = create_each_block_3(get_each_context_3(ctx, each_value_3, i));
    	}

    	return {
    		c() {
    			div = element("div");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			attr(div, "class", "card-context-menu svelte-xx59ef");
    		},
    		m(target, anchor) {
    			insert(target, div, anchor);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(div, null);
    			}
    		},
    		p(ctx, dirty) {
    			if (dirty[0] & /*deckSeach, promise*/ 16777728 | dirty[1] & /*cardContextClick*/ 64) {
    				each_value_3 = /*groups*/ ctx[89];
    				let i;

    				for (i = 0; i < each_value_3.length; i += 1) {
    					const child_ctx = get_each_context_3(ctx, each_value_3, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block_3(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(div, null);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value_3.length;
    			}
    		},
    		d(detaching) {
    			if (detaching) detach(div);
    			destroy_each(each_blocks, detaching);
    		}
    	};
    }

    // (1143:22) {#if group.name != subGroup.name}
    function create_if_block_4(ctx) {
    	let div;
    	let t0_value = /*subGroup*/ ctx[95].name + "";
    	let t0;
    	let t1;
    	let mounted;
    	let dispose;

    	function mousedown_handler(...args) {
    		return /*mousedown_handler*/ ctx[71](/*card*/ ctx[85], /*subGroup*/ ctx[95], ...args);
    	}

    	return {
    		c() {
    			div = element("div");
    			t0 = text(t0_value);
    			t1 = space();
    			attr(div, "class", "card-context-entry svelte-xx59ef");
    		},
    		m(target, anchor) {
    			insert(target, div, anchor);
    			append(div, t0);
    			append(div, t1);

    			if (!mounted) {
    				dispose = listen(div, "mousedown", mousedown_handler);
    				mounted = true;
    			}
    		},
    		p(new_ctx, dirty) {
    			ctx = new_ctx;
    			if (dirty[0] & /*promise*/ 512 && t0_value !== (t0_value = /*subGroup*/ ctx[95].name + "")) set_data(t0, t0_value);
    		},
    		d(detaching) {
    			if (detaching) detach(div);
    			mounted = false;
    			dispose();
    		}
    	};
    }

    // (1142:20) {#each groups as subGroup}
    function create_each_block_3(ctx) {
    	let if_block_anchor;
    	let if_block = /*group*/ ctx[90].name != /*subGroup*/ ctx[95].name && create_if_block_4(ctx);

    	return {
    		c() {
    			if (if_block) if_block.c();
    			if_block_anchor = empty();
    		},
    		m(target, anchor) {
    			if (if_block) if_block.m(target, anchor);
    			insert(target, if_block_anchor, anchor);
    		},
    		p(ctx, dirty) {
    			if (/*group*/ ctx[90].name != /*subGroup*/ ctx[95].name) {
    				if (if_block) {
    					if_block.p(ctx, dirty);
    				} else {
    					if_block = create_if_block_4(ctx);
    					if_block.c();
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				}
    			} else if (if_block) {
    				if_block.d(1);
    				if_block = null;
    			}
    		},
    		d(detaching) {
    			if (if_block) if_block.d(detaching);
    			if (detaching) detach(if_block_anchor);
    		}
    	};
    }

    // (1102:12) {#each group.cards as card}
    function create_each_block_2(ctx) {
    	let div1;
    	let div0;
    	let a;
    	let t0;
    	let a_href_value;
    	let t1;
    	let t2;
    	let t3;
    	let t4;
    	let t5;
    	let t6;
    	let div1_style_value;

    	let each_value_4 = {
    		length: /*card*/ ctx[85].count > 4 ? 4 : /*card*/ ctx[85].count
    	};

    	let each_blocks = [];

    	for (let i = 0; i < each_value_4.length; i += 1) {
    		each_blocks[i] = create_each_block_4(get_each_context_4(ctx, each_value_4, i));
    	}

    	let if_block0 = /*card*/ ctx[85].data.legalities[/*format*/ ctx[12].value] !== "legal" && create_if_block_7(ctx);
    	let if_block1 = /*card*/ ctx[85].count > 4 && create_if_block_6(ctx);
    	let if_block2 = /*scaling*/ ctx[6] > 90 && create_if_block_5(ctx);
    	let if_block3 = /*currentCardContext*/ ctx[26] === /*card*/ ctx[85] && create_if_block_3(ctx);

    	return {
    		c() {
    			div1 = element("div");
    			div0 = element("div");
    			a = element("a");
    			t0 = text("🛒");
    			t1 = space();

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			t2 = space();
    			if (if_block0) if_block0.c();
    			t3 = space();
    			if (if_block1) if_block1.c();
    			t4 = space();
    			if (if_block2) if_block2.c();
    			t5 = space();
    			if (if_block3) if_block3.c();
    			t6 = space();
    			attr(a, "class", "link svelte-xx59ef");
    			attr(a, "href", a_href_value = /*card*/ ctx[85].data.purchase_uris.cardmarket);
    			attr(a, "target", "_blank");
    			attr(div0, "class", "shoping svelte-xx59ef");
    			attr(div1, "class", "entry svelte-xx59ef");

    			attr(div1, "style", div1_style_value = "width:" + /*width*/ ctx[3] + "px; height:" + (/*card*/ ctx[85].count <= 4
    			? /*height*/ ctx[2] + ((/*card*/ ctx[85].count || 1) - 1) * 40
    			: /*height*/ ctx[2] + 3 * 40) + "px;");
    		},
    		m(target, anchor) {
    			insert(target, div1, anchor);
    			append(div1, div0);
    			append(div0, a);
    			append(a, t0);
    			append(div1, t1);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(div1, null);
    			}

    			append(div1, t2);
    			if (if_block0) if_block0.m(div1, null);
    			append(div1, t3);
    			if (if_block1) if_block1.m(div1, null);
    			append(div1, t4);
    			if (if_block2) if_block2.m(div1, null);
    			append(div1, t5);
    			if (if_block3) if_block3.m(div1, null);
    			append(div1, t6);
    		},
    		p(ctx, dirty) {
    			if (dirty[0] & /*deckSeach, promise*/ 16777728 && a_href_value !== (a_href_value = /*card*/ ctx[85].data.purchase_uris.cardmarket)) {
    				attr(a, "href", a_href_value);
    			}

    			if (dirty[0] & /*deckSeach, promise, width, height, format, devotionHighlight*/ 16782092 | dirty[1] & /*cardContextMenu, remove*/ 65568) {
    				each_value_4 = {
    					length: /*card*/ ctx[85].count > 4 ? 4 : /*card*/ ctx[85].count
    				};

    				let i;

    				for (i = 0; i < each_value_4.length; i += 1) {
    					const child_ctx = get_each_context_4(ctx, each_value_4, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block_4(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(div1, t2);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value_4.length;
    			}

    			if (/*card*/ ctx[85].data.legalities[/*format*/ ctx[12].value] !== "legal") {
    				if (if_block0) ; else {
    					if_block0 = create_if_block_7(ctx);
    					if_block0.c();
    					if_block0.m(div1, t3);
    				}
    			} else if (if_block0) {
    				if_block0.d(1);
    				if_block0 = null;
    			}

    			if (/*card*/ ctx[85].count > 4) {
    				if (if_block1) {
    					if_block1.p(ctx, dirty);
    				} else {
    					if_block1 = create_if_block_6(ctx);
    					if_block1.c();
    					if_block1.m(div1, t4);
    				}
    			} else if (if_block1) {
    				if_block1.d(1);
    				if_block1 = null;
    			}

    			if (/*scaling*/ ctx[6] > 90) {
    				if (if_block2) {
    					if_block2.p(ctx, dirty);
    				} else {
    					if_block2 = create_if_block_5(ctx);
    					if_block2.c();
    					if_block2.m(div1, t5);
    				}
    			} else if (if_block2) {
    				if_block2.d(1);
    				if_block2 = null;
    			}

    			if (/*currentCardContext*/ ctx[26] === /*card*/ ctx[85]) {
    				if (if_block3) {
    					if_block3.p(ctx, dirty);
    				} else {
    					if_block3 = create_if_block_3(ctx);
    					if_block3.c();
    					if_block3.m(div1, t6);
    				}
    			} else if (if_block3) {
    				if_block3.d(1);
    				if_block3 = null;
    			}

    			if (dirty[0] & /*width, deckSeach, promise, height*/ 16777740 && div1_style_value !== (div1_style_value = "width:" + /*width*/ ctx[3] + "px; height:" + (/*card*/ ctx[85].count <= 4
    			? /*height*/ ctx[2] + ((/*card*/ ctx[85].count || 1) - 1) * 40
    			: /*height*/ ctx[2] + 3 * 40) + "px;")) {
    				attr(div1, "style", div1_style_value);
    			}
    		},
    		d(detaching) {
    			if (detaching) detach(div1);
    			destroy_each(each_blocks, detaching);
    			if (if_block0) if_block0.d();
    			if (if_block1) if_block1.d();
    			if (if_block2) if_block2.d();
    			if (if_block3) if_block3.d();
    		}
    	};
    }

    // (1073:6) {#each deckSeach || groups || [] as group}
    function create_each_block_1(ctx) {
    	let div11;
    	let div9;
    	let h2;
    	let t0_value = (/*group*/ ctx[90].name + " // " + /*group*/ ctx[90].count || "no name") + "";
    	let t0;
    	let t1;
    	let button;
    	let t3;
    	let div8;
    	let div0;
    	let t4_value = /*group*/ ctx[90].mana.blue + "";
    	let t4;
    	let t5;
    	let div1;
    	let t6_value = /*group*/ ctx[90].mana.black + "";
    	let t6;
    	let t7;
    	let div2;
    	let t8_value = /*group*/ ctx[90].mana.red + "";
    	let t8;
    	let t9;
    	let div3;
    	let t10_value = /*group*/ ctx[90].mana.white + "";
    	let t10;
    	let t11;
    	let div4;
    	let t12_value = /*group*/ ctx[90].mana.green + "";
    	let t12;
    	let t13;
    	let div5;
    	let t14_value = /*group*/ ctx[90].mana.colorless + "";
    	let t14;
    	let t15;
    	let div6;
    	let t16_value = /*group*/ ctx[90].mana.sum + "";
    	let t16;
    	let t17;
    	let div7;
    	let t18_value = /*group*/ ctx[90].cost.toFixed(2) + "$" + "";
    	let t18;
    	let t19;
    	let div10;
    	let t20;
    	let mounted;
    	let dispose;

    	function click_handler_2(...args) {
    		return /*click_handler_2*/ ctx[68](/*group*/ ctx[90], ...args);
    	}

    	let each_value_2 = /*group*/ ctx[90].cards;
    	let each_blocks = [];

    	for (let i = 0; i < each_value_2.length; i += 1) {
    		each_blocks[i] = create_each_block_2(get_each_context_2(ctx, each_value_2, i));
    	}

    	return {
    		c() {
    			div11 = element("div");
    			div9 = element("div");
    			h2 = element("h2");
    			t0 = text(t0_value);
    			t1 = space();
    			button = element("button");
    			button.textContent = "toggle";
    			t3 = space();
    			div8 = element("div");
    			div0 = element("div");
    			t4 = text(t4_value);
    			t5 = space();
    			div1 = element("div");
    			t6 = text(t6_value);
    			t7 = space();
    			div2 = element("div");
    			t8 = text(t8_value);
    			t9 = space();
    			div3 = element("div");
    			t10 = text(t10_value);
    			t11 = space();
    			div4 = element("div");
    			t12 = text(t12_value);
    			t13 = space();
    			div5 = element("div");
    			t14 = text(t14_value);
    			t15 = text("\r\n              \r\n              sum:\r\n              ");
    			div6 = element("div");
    			t16 = text(t16_value);
    			t17 = space();
    			div7 = element("div");
    			t18 = text(t18_value);
    			t19 = space();
    			div10 = element("div");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			t20 = space();
    			attr(h2, "class", "svelte-xx59ef");
    			attr(div0, "class", "group-value blue svelte-xx59ef");
    			attr(div1, "class", "group-value black svelte-xx59ef");
    			attr(div2, "class", "group-value red svelte-xx59ef");
    			attr(div3, "class", "group-value white svelte-xx59ef");
    			attr(div4, "class", "group-value green svelte-xx59ef");
    			attr(div5, "class", "group-value colorless svelte-xx59ef");
    			attr(div6, "class", "group-value sum svelte-xx59ef");
    			attr(div7, "class", "group-value group-cost svelte-xx59ef");
    			attr(div8, "class", "group-statistics svelte-xx59ef");
    			attr(div9, "class", "group-header svelte-xx59ef");
    			attr(div10, "class", "group-content svelte-xx59ef");
    			toggle_class(div10, "hidden", /*hiddenGroups*/ ctx[27].has(/*group*/ ctx[90].name));
    			attr(div11, "class", "group");
    		},
    		m(target, anchor) {
    			insert(target, div11, anchor);
    			append(div11, div9);
    			append(div9, h2);
    			append(h2, t0);
    			append(div9, t1);
    			append(div9, button);
    			append(div9, t3);
    			append(div9, div8);
    			append(div8, div0);
    			append(div0, t4);
    			append(div8, t5);
    			append(div8, div1);
    			append(div1, t6);
    			append(div8, t7);
    			append(div8, div2);
    			append(div2, t8);
    			append(div8, t9);
    			append(div8, div3);
    			append(div3, t10);
    			append(div8, t11);
    			append(div8, div4);
    			append(div4, t12);
    			append(div8, t13);
    			append(div8, div5);
    			append(div5, t14);
    			append(div8, t15);
    			append(div8, div6);
    			append(div6, t16);
    			append(div8, t17);
    			append(div8, div7);
    			append(div7, t18);
    			append(div11, t19);
    			append(div11, div10);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(div10, null);
    			}

    			append(div11, t20);

    			if (!mounted) {
    				dispose = listen(button, "click", click_handler_2);
    				mounted = true;
    			}
    		},
    		p(new_ctx, dirty) {
    			ctx = new_ctx;
    			if (dirty[0] & /*deckSeach, promise*/ 16777728 && t0_value !== (t0_value = (/*group*/ ctx[90].name + " // " + /*group*/ ctx[90].count || "no name") + "")) set_data(t0, t0_value);
    			if (dirty[0] & /*deckSeach, promise*/ 16777728 && t4_value !== (t4_value = /*group*/ ctx[90].mana.blue + "")) set_data(t4, t4_value);
    			if (dirty[0] & /*deckSeach, promise*/ 16777728 && t6_value !== (t6_value = /*group*/ ctx[90].mana.black + "")) set_data(t6, t6_value);
    			if (dirty[0] & /*deckSeach, promise*/ 16777728 && t8_value !== (t8_value = /*group*/ ctx[90].mana.red + "")) set_data(t8, t8_value);
    			if (dirty[0] & /*deckSeach, promise*/ 16777728 && t10_value !== (t10_value = /*group*/ ctx[90].mana.white + "")) set_data(t10, t10_value);
    			if (dirty[0] & /*deckSeach, promise*/ 16777728 && t12_value !== (t12_value = /*group*/ ctx[90].mana.green + "")) set_data(t12, t12_value);
    			if (dirty[0] & /*deckSeach, promise*/ 16777728 && t14_value !== (t14_value = /*group*/ ctx[90].mana.colorless + "")) set_data(t14, t14_value);
    			if (dirty[0] & /*deckSeach, promise*/ 16777728 && t16_value !== (t16_value = /*group*/ ctx[90].mana.sum + "")) set_data(t16, t16_value);
    			if (dirty[0] & /*deckSeach, promise*/ 16777728 && t18_value !== (t18_value = /*group*/ ctx[90].cost.toFixed(2) + "$" + "")) set_data(t18, t18_value);

    			if (dirty[0] & /*width, deckSeach, promise, height, currentCardContext, scaling, format, devotionHighlight*/ 83891020 | dirty[1] & /*cardContextClick, cardContextMenu, remove*/ 65632) {
    				each_value_2 = /*group*/ ctx[90].cards;
    				let i;

    				for (i = 0; i < each_value_2.length; i += 1) {
    					const child_ctx = get_each_context_2(ctx, each_value_2, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block_2(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(div10, null);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value_2.length;
    			}

    			if (dirty[0] & /*hiddenGroups, deckSeach, promise*/ 150995456) {
    				toggle_class(div10, "hidden", /*hiddenGroups*/ ctx[27].has(/*group*/ ctx[90].name));
    			}
    		},
    		d(detaching) {
    			if (detaching) detach(div11);
    			destroy_each(each_blocks, detaching);
    			mounted = false;
    			dispose();
    		}
    	};
    }

    // (1063:20)         <div class="loading-wrapper">          <div>loading: {progress}
    function create_pending_block_1(ctx) {
    	let div4;
    	let div0;
    	let t0;
    	let t1;
    	let t2;
    	let t3;
    	let t4;
    	let div3;

    	return {
    		c() {
    			div4 = element("div");
    			div0 = element("div");
    			t0 = text("loading: ");
    			t1 = text(/*progress*/ ctx[13]);
    			t2 = text("/");
    			t3 = text(/*all*/ ctx[14]);
    			t4 = space();
    			div3 = element("div");

    			div3.innerHTML = `<div class="svelte-xx59ef"></div> 
          <div class="svelte-xx59ef"></div>`;

    			attr(div3, "class", "lds-ripple svelte-xx59ef");
    			attr(div4, "class", "loading-wrapper svelte-xx59ef");
    		},
    		m(target, anchor) {
    			insert(target, div4, anchor);
    			append(div4, div0);
    			append(div0, t0);
    			append(div0, t1);
    			append(div0, t2);
    			append(div0, t3);
    			append(div4, t4);
    			append(div4, div3);
    		},
    		p(ctx, dirty) {
    			if (dirty[0] & /*progress*/ 8192) set_data(t1, /*progress*/ ctx[13]);
    			if (dirty[0] & /*all*/ 16384) set_data(t3, /*all*/ ctx[14]);
    		},
    		d(detaching) {
    			if (detaching) detach(div4);
    		}
    	};
    }

    // (1281:4) {:catch error}
    function create_catch_block(ctx) {
    	let div;

    	return {
    		c() {
    			div = element("div");
    			div.textContent = "ERROR, check your decklist for correct format or internet connection\r\n        brudi";
    			attr(div, "class", "error svelte-xx59ef");
    		},
    		m(target, anchor) {
    			insert(target, div, anchor);
    		},
    		p: noop,
    		d(detaching) {
    			if (detaching) detach(div);
    		}
    	};
    }

    // (1240:4) {:then result}
    function create_then_block(ctx) {
    	let if_block_anchor;

    	function select_block_type(ctx, dirty) {
    		if (/*result*/ ctx[84].code !== "not_found" && /*result*/ ctx[84].data) return create_if_block;
    		return create_else_block_1;
    	}

    	let current_block_type = select_block_type(ctx, [-1]);
    	let if_block = current_block_type(ctx);

    	return {
    		c() {
    			if_block.c();
    			if_block_anchor = empty();
    		},
    		m(target, anchor) {
    			if_block.m(target, anchor);
    			insert(target, if_block_anchor, anchor);
    		},
    		p(ctx, dirty) {
    			if (current_block_type === (current_block_type = select_block_type(ctx, dirty)) && if_block) {
    				if_block.p(ctx, dirty);
    			} else {
    				if_block.d(1);
    				if_block = current_block_type(ctx);

    				if (if_block) {
    					if_block.c();
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				}
    			}
    		},
    		d(detaching) {
    			if_block.d(detaching);
    			if (detaching) detach(if_block_anchor);
    		}
    	};
    }

    // (1278:6) {:else}
    function create_else_block_1(ctx) {
    	let div;

    	return {
    		c() {
    			div = element("div");
    			div.textContent = "No cards found";
    			attr(div, "class", "svelte-xx59ef");
    		},
    		m(target, anchor) {
    			insert(target, div, anchor);
    		},
    		p: noop,
    		d(detaching) {
    			if (detaching) detach(div);
    		}
    	};
    }

    // (1242:6) {#if result.code !== 'not_found' && result.data}
    function create_if_block(ctx) {
    	let div;
    	let t0;
    	let button;
    	let t1;
    	let button_disabled_value;
    	let mounted;
    	let dispose;
    	let each_value = /*result*/ ctx[84].data;
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
    	}

    	let each_1_else = null;

    	if (!each_value.length) {
    		each_1_else = create_else_block(ctx);
    	}

    	function click_handler_3(...args) {
    		return /*click_handler_3*/ ctx[83](/*result*/ ctx[84], ...args);
    	}

    	return {
    		c() {
    			div = element("div");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			if (each_1_else) {
    				each_1_else.c();
    			}

    			t0 = space();
    			button = element("button");
    			t1 = text("next");
    			attr(div, "class", "search-result svelte-xx59ef");
    			button.disabled = button_disabled_value = !/*result*/ ctx[84].has_more;
    		},
    		m(target, anchor) {
    			insert(target, div, anchor);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(div, null);
    			}

    			if (each_1_else) {
    				each_1_else.m(div, null);
    			}

    			insert(target, t0, anchor);
    			insert(target, button, anchor);
    			append(button, t1);

    			if (!mounted) {
    				dispose = listen(button, "click", click_handler_3);
    				mounted = true;
    			}
    		},
    		p(new_ctx, dirty) {
    			ctx = new_ctx;

    			if (dirty[0] & /*width, height, cardSearchPromise, scaling, format*/ 5196 | dirty[1] & /*appendCard*/ 32768) {
    				each_value = /*result*/ ctx[84].data;
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(div, null);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value.length;

    				if (each_value.length) {
    					if (each_1_else) {
    						each_1_else.d(1);
    						each_1_else = null;
    					}
    				} else if (!each_1_else) {
    					each_1_else = create_else_block(ctx);
    					each_1_else.c();
    					each_1_else.m(div, null);
    				}
    			}

    			if (dirty[0] & /*cardSearchPromise*/ 1024 && button_disabled_value !== (button_disabled_value = !/*result*/ ctx[84].has_more)) {
    				button.disabled = button_disabled_value;
    			}
    		},
    		d(detaching) {
    			if (detaching) detach(div);
    			destroy_each(each_blocks, detaching);
    			if (each_1_else) each_1_else.d();
    			if (detaching) detach(t0);
    			if (detaching) detach(button);
    			mounted = false;
    			dispose();
    		}
    	};
    }

    // (1269:10) {:else}
    function create_else_block(ctx) {
    	let div;

    	return {
    		c() {
    			div = element("div");
    			div.textContent = "No cards found";
    			attr(div, "class", "svelte-xx59ef");
    		},
    		m(target, anchor) {
    			insert(target, div, anchor);
    		},
    		d(detaching) {
    			if (detaching) detach(div);
    		}
    	};
    }

    // (1262:14) {#if card.legalities[format.value] !== 'legal'}
    function create_if_block_2(ctx) {
    	let div;

    	return {
    		c() {
    			div = element("div");
    			div.textContent = "BANNED";
    			attr(div, "class", "banned-text svelte-xx59ef");
    		},
    		m(target, anchor) {
    			insert(target, div, anchor);
    		},
    		d(detaching) {
    			if (detaching) detach(div);
    		}
    	};
    }

    // (1265:14) {#if scaling > 90}
    function create_if_block_1(ctx) {
    	let div;
    	let t_value = (/*card*/ ctx[85].prices.usd + "$" || "???") + "";
    	let t;

    	return {
    		c() {
    			div = element("div");
    			t = text(t_value);
    			attr(div, "class", "price svelte-xx59ef");
    		},
    		m(target, anchor) {
    			insert(target, div, anchor);
    			append(div, t);
    		},
    		p(ctx, dirty) {
    			if (dirty[0] & /*cardSearchPromise*/ 1024 && t_value !== (t_value = (/*card*/ ctx[85].prices.usd + "$" || "???") + "")) set_data(t, t_value);
    		},
    		d(detaching) {
    			if (detaching) detach(div);
    		}
    	};
    }

    // (1244:10) {#each result.data as card}
    function create_each_block(ctx) {
    	let div1;
    	let div0;
    	let a;
    	let t0;
    	let a_href_value;
    	let t1;
    	let img;
    	let img_src_value;
    	let img_alt_value;
    	let t2;
    	let t3;
    	let t4;
    	let div1_style_value;
    	let mounted;
    	let dispose;

    	function dblclick_handler_1(...args) {
    		return /*dblclick_handler_1*/ ctx[82](/*card*/ ctx[85], ...args);
    	}

    	let if_block0 = /*card*/ ctx[85].legalities[/*format*/ ctx[12].value] !== "legal" && create_if_block_2(ctx);
    	let if_block1 = /*scaling*/ ctx[6] > 90 && create_if_block_1(ctx);

    	return {
    		c() {
    			div1 = element("div");
    			div0 = element("div");
    			a = element("a");
    			t0 = text("🛒");
    			t1 = space();
    			img = element("img");
    			t2 = space();
    			if (if_block0) if_block0.c();
    			t3 = space();
    			if (if_block1) if_block1.c();
    			t4 = space();
    			attr(a, "class", "link svelte-xx59ef");
    			attr(a, "href", a_href_value = /*card*/ ctx[85].cardmarket);
    			attr(a, "target", "_blank");
    			attr(div0, "class", "shoping svelte-xx59ef");
    			attr(img, "class", "card svelte-xx59ef");
    			if (img.src !== (img_src_value = /*card*/ ctx[85].url)) attr(img, "src", img_src_value);
    			attr(img, "alt", img_alt_value = /*card*/ ctx[85].name);
    			attr(img, "width", /*width*/ ctx[3]);
    			attr(img, "height", /*height*/ ctx[2]);
    			toggle_class(img, "banned", /*card*/ ctx[85].legalities[/*format*/ ctx[12].value] !== "legal");
    			attr(div1, "class", "entry svelte-xx59ef");
    			attr(div1, "style", div1_style_value = "width:" + /*width*/ ctx[3] + "px; height:" + /*height*/ ctx[2] + "px;");
    		},
    		m(target, anchor) {
    			insert(target, div1, anchor);
    			append(div1, div0);
    			append(div0, a);
    			append(a, t0);
    			append(div1, t1);
    			append(div1, img);
    			append(div1, t2);
    			if (if_block0) if_block0.m(div1, null);
    			append(div1, t3);
    			if (if_block1) if_block1.m(div1, null);
    			append(div1, t4);

    			if (!mounted) {
    				dispose = listen(img, "dblclick", dblclick_handler_1);
    				mounted = true;
    			}
    		},
    		p(new_ctx, dirty) {
    			ctx = new_ctx;

    			if (dirty[0] & /*cardSearchPromise*/ 1024 && a_href_value !== (a_href_value = /*card*/ ctx[85].cardmarket)) {
    				attr(a, "href", a_href_value);
    			}

    			if (dirty[0] & /*cardSearchPromise*/ 1024 && img.src !== (img_src_value = /*card*/ ctx[85].url)) {
    				attr(img, "src", img_src_value);
    			}

    			if (dirty[0] & /*cardSearchPromise*/ 1024 && img_alt_value !== (img_alt_value = /*card*/ ctx[85].name)) {
    				attr(img, "alt", img_alt_value);
    			}

    			if (dirty[0] & /*width*/ 8) {
    				attr(img, "width", /*width*/ ctx[3]);
    			}

    			if (dirty[0] & /*height*/ 4) {
    				attr(img, "height", /*height*/ ctx[2]);
    			}

    			if (dirty[0] & /*cardSearchPromise, format*/ 5120) {
    				toggle_class(img, "banned", /*card*/ ctx[85].legalities[/*format*/ ctx[12].value] !== "legal");
    			}

    			if (/*card*/ ctx[85].legalities[/*format*/ ctx[12].value] !== "legal") {
    				if (if_block0) ; else {
    					if_block0 = create_if_block_2(ctx);
    					if_block0.c();
    					if_block0.m(div1, t3);
    				}
    			} else if (if_block0) {
    				if_block0.d(1);
    				if_block0 = null;
    			}

    			if (/*scaling*/ ctx[6] > 90) {
    				if (if_block1) {
    					if_block1.p(ctx, dirty);
    				} else {
    					if_block1 = create_if_block_1(ctx);
    					if_block1.c();
    					if_block1.m(div1, t4);
    				}
    			} else if (if_block1) {
    				if_block1.d(1);
    				if_block1 = null;
    			}

    			if (dirty[0] & /*width, height*/ 12 && div1_style_value !== (div1_style_value = "width:" + /*width*/ ctx[3] + "px; height:" + /*height*/ ctx[2] + "px;")) {
    				attr(div1, "style", div1_style_value);
    			}
    		},
    		d(detaching) {
    			if (detaching) detach(div1);
    			if (if_block0) if_block0.d();
    			if (if_block1) if_block1.d();
    			mounted = false;
    			dispose();
    		}
    	};
    }

    // (1233:30)         <div class="loading-wrapper">          <div class="lds-ripple">            <div />            <div />          </div>        </div>      {:then result}
    function create_pending_block(ctx) {
    	let div3;

    	return {
    		c() {
    			div3 = element("div");

    			div3.innerHTML = `<div class="lds-ripple svelte-xx59ef"><div class="svelte-xx59ef"></div> 
          <div class="svelte-xx59ef"></div></div>`;

    			attr(div3, "class", "loading-wrapper svelte-xx59ef");
    		},
    		m(target, anchor) {
    			insert(target, div3, anchor);
    		},
    		p: noop,
    		d(detaching) {
    			if (detaching) detach(div3);
    		}
    	};
    }

    function create_fragment(ctx) {
    	let div19;
    	let div4;
    	let div3;
    	let div0;
    	let t1;
    	let t2;
    	let t3;
    	let promise_1;
    	let t4;
    	let select;
    	let option0;
    	let option1;
    	let option2;
    	let option3;
    	let option4;
    	let option5;
    	let option6;
    	let option7;
    	let option8;
    	let option9;
    	let option10;
    	let option11;
    	let option12;
    	let t18;
    	let div1;
    	let t19;
    	let input0;
    	let t20;
    	let div2;
    	let t21;
    	let input1;
    	let input1_value_value;
    	let t22;
    	let button0;
    	let t24;
    	let button1;

    	let t25_value = (/*statisticsActive*/ ctx[5]
    	? "hide statistics"
    	: "show statistics") + "";

    	let t25;
    	let t26;
    	let button2;
    	let t28;
    	let button3;
    	let t30;
    	let button4;
    	let t32;
    	let button5;
    	let t34;
    	let textarea;
    	let t35;
    	let div5;
    	let promise_2;
    	let t36;
    	let div18;
    	let div6;
    	let t38;
    	let div17;
    	let div7;
    	let t39;
    	let input2;
    	let t40;
    	let div8;
    	let t41;
    	let input3;
    	let t42;
    	let div9;
    	let t43;
    	let input4;
    	let t44;
    	let div16;
    	let t45;
    	let div10;
    	let input5;
    	let t46;
    	let div11;
    	let input6;
    	let t47;
    	let div12;
    	let input7;
    	let t48;
    	let div13;
    	let input8;
    	let t49;
    	let div14;
    	let input9;
    	let t50;
    	let div15;
    	let input10;
    	let t51;
    	let button6;
    	let t53;
    	let promise_3;
    	let mounted;
    	let dispose;
    	let if_block0 = !/*useCookies*/ ctx[1] && create_if_block_13(ctx);
    	let if_block1 = /*helpActive*/ ctx[29] && create_if_block_12(ctx);

    	let info = {
    		ctx,
    		current: null,
    		token: null,
    		pending: create_pending_block_2,
    		then: create_then_block_2,
    		catch: create_catch_block_2,
    		value: 89,
    		error: 88
    	};

    	handle_promise(promise_1 = /*promise*/ ctx[9], info);

    	let info_1 = {
    		ctx,
    		current: null,
    		token: null,
    		pending: create_pending_block_1,
    		then: create_then_block_1,
    		catch: create_catch_block_1,
    		value: 89,
    		error: 88
    	};

    	handle_promise(promise_2 = /*promise*/ ctx[9], info_1);

    	let info_2 = {
    		ctx,
    		current: null,
    		token: null,
    		pending: create_pending_block,
    		then: create_then_block,
    		catch: create_catch_block,
    		value: 84,
    		error: 88
    	};

    	handle_promise(promise_3 = /*cardSearchPromise*/ ctx[10], info_2);

    	return {
    		c() {
    			div19 = element("div");
    			div4 = element("div");
    			div3 = element("div");
    			div0 = element("div");
    			div0.textContent = "?";
    			t1 = space();
    			if (if_block0) if_block0.c();
    			t2 = space();
    			if (if_block1) if_block1.c();
    			t3 = space();
    			info.block.c();
    			t4 = text("\r\n      Format:\r\n      ");
    			select = element("select");
    			option0 = element("option");
    			option0.textContent = "commander";
    			option1 = element("option");
    			option1.textContent = "brawl";
    			option2 = element("option");
    			option2.textContent = "duel";
    			option3 = element("option");
    			option3.textContent = "future";
    			option4 = element("option");
    			option4.textContent = "historic";
    			option5 = element("option");
    			option5.textContent = "legacy";
    			option6 = element("option");
    			option6.textContent = "modern";
    			option7 = element("option");
    			option7.textContent = "oldschool";
    			option8 = element("option");
    			option8.textContent = "pauper";
    			option9 = element("option");
    			option9.textContent = "penny";
    			option10 = element("option");
    			option10.textContent = "pioneer";
    			option11 = element("option");
    			option11.textContent = "standard";
    			option12 = element("option");
    			option12.textContent = "vintage";
    			t18 = space();
    			div1 = element("div");
    			t19 = text("Scale:\r\n        ");
    			input0 = element("input");
    			t20 = space();
    			div2 = element("div");
    			t21 = text("Save :\r\n        ");
    			input1 = element("input");
    			t22 = space();
    			button0 = element("button");
    			button0.textContent = "save";
    			t24 = space();
    			button1 = element("button");
    			t25 = text(t25_value);
    			t26 = space();
    			button2 = element("button");
    			button2.textContent = "sort";
    			t28 = space();
    			button3 = element("button");
    			button3.textContent = "clean copy";
    			t30 = space();
    			button4 = element("button");
    			button4.textContent = "share";
    			t32 = space();
    			button5 = element("button");
    			button5.textContent = "refresh";
    			t34 = space();
    			textarea = element("textarea");
    			t35 = space();
    			div5 = element("div");
    			info_1.block.c();
    			t36 = space();
    			div18 = element("div");
    			div6 = element("div");
    			div6.textContent = "x";
    			t38 = space();
    			div17 = element("div");
    			div7 = element("div");
    			t39 = text("Name:\r\n        ");
    			input2 = element("input");
    			t40 = space();
    			div8 = element("div");
    			t41 = text("Text:\r\n        ");
    			input3 = element("input");
    			t42 = space();
    			div9 = element("div");
    			t43 = text("Type:\r\n        ");
    			input4 = element("input");
    			t44 = space();
    			div16 = element("div");
    			t45 = text("Commander-Colors:\r\n        ");
    			div10 = element("div");
    			input5 = element("input");
    			t46 = space();
    			div11 = element("div");
    			input6 = element("input");
    			t47 = space();
    			div12 = element("div");
    			input7 = element("input");
    			t48 = space();
    			div13 = element("div");
    			input8 = element("input");
    			t49 = space();
    			div14 = element("div");
    			input9 = element("input");
    			t50 = space();
    			div15 = element("div");
    			input10 = element("input");
    			t51 = space();
    			button6 = element("button");
    			button6.textContent = "search";
    			t53 = space();
    			info_2.block.c();
    			attr(div0, "class", "help-symbol svelte-xx59ef");
    			option0.selected = true;
    			option0.__value = "commander";
    			option0.value = option0.__value;
    			option1.__value = "brawl";
    			option1.value = option1.__value;
    			option2.__value = "duel";
    			option2.value = option2.__value;
    			option3.__value = "future";
    			option3.value = option3.__value;
    			option4.__value = "historic";
    			option4.value = option4.__value;
    			option5.__value = "legacy";
    			option5.value = option5.__value;
    			option6.__value = "modern";
    			option6.value = option6.__value;
    			option7.__value = "oldschool";
    			option7.value = option7.__value;
    			option8.__value = "pauper";
    			option8.value = option8.__value;
    			option9.__value = "penny";
    			option9.value = option9.__value;
    			option10.__value = "pioneer";
    			option10.value = option10.__value;
    			option11.__value = "standard";
    			option11.value = option11.__value;
    			option12.__value = "vintage";
    			option12.value = option12.__value;
    			attr(select, "title", "select the legality checker");
    			attr(input0, "type", "range");
    			attr(input0, "min", "25");
    			attr(input0, "max", "100");
    			attr(input0, "title", "scales the card size in the right view");
    			attr(div1, "class", "slidecontainer");
    			input1.value = input1_value_value = /*Cookies*/ ctx[0].get("deckName") || "unknown_deck";
    			attr(input1, "title", "The name of the deck for saving");
    			attr(button0, "title", "this will download you a file, called like you provide in the\r\n          deck");
    			attr(div2, "class", "save-container");
    			attr(button1, "title", "toggles the visibility of the statisticks");
    			attr(button2, "title", "this sorts the deck to lands spells and creatures -NOTE: your\r\n        groups will be replaced");
    			attr(button3, "title", "this copies the deck without groups and stuff to your clipboard");
    			attr(button4, "title", "copies a string to your clipboard, that shares this deck with\r\n        others");
    			attr(div3, "class", "help svelte-xx59ef");
    			attr(textarea, "class", "input svelte-xx59ef");
    			attr(div4, "class", "controls svelte-xx59ef");
    			attr(div5, "class", "display svelte-xx59ef");
    			attr(div6, "class", "toggle-search svelte-xx59ef");
    			attr(div7, "class", "search-param svelte-xx59ef");
    			attr(div8, "class", "search-param svelte-xx59ef");
    			attr(div9, "class", "search-param svelte-xx59ef");
    			attr(input5, "type", "checkbox");
    			attr(input5, "class", "blue svelte-xx59ef");
    			attr(div10, "class", "blue svelte-xx59ef");
    			attr(input6, "type", "checkbox");
    			attr(input6, "class", "black svelte-xx59ef");
    			attr(div11, "class", "black svelte-xx59ef");
    			attr(input7, "type", "checkbox");
    			attr(input7, "class", "red svelte-xx59ef");
    			attr(div12, "class", "red svelte-xx59ef");
    			attr(input8, "type", "checkbox");
    			attr(input8, "class", "white svelte-xx59ef");
    			attr(div13, "class", "white svelte-xx59ef");
    			attr(input9, "type", "checkbox");
    			attr(input9, "class", "green svelte-xx59ef");
    			attr(div14, "class", "green svelte-xx59ef");
    			attr(input10, "type", "checkbox");
    			attr(input10, "class", "colorless svelte-xx59ef");
    			attr(div15, "class", "colorless svelte-xx59ef");
    			attr(div16, "class", "search-param color-param svelte-xx59ef");
    			attr(div17, "class", "search-params svelte-xx59ef");
    			attr(div18, "class", "card-search svelte-xx59ef");
    			toggle_class(div18, "hide", !/*cardSearchActive*/ ctx[4]);
    			attr(div19, "class", "content svelte-xx59ef");
    		},
    		m(target, anchor) {
    			insert(target, div19, anchor);
    			append(div19, div4);
    			append(div4, div3);
    			append(div3, div0);
    			append(div3, t1);
    			if (if_block0) if_block0.m(div3, null);
    			append(div3, t2);
    			if (if_block1) if_block1.m(div3, null);
    			append(div3, t3);
    			info.block.m(div3, info.anchor = null);
    			info.mount = () => div3;
    			info.anchor = t4;
    			append(div3, t4);
    			append(div3, select);
    			append(select, option0);
    			append(select, option1);
    			append(select, option2);
    			append(select, option3);
    			append(select, option4);
    			append(select, option5);
    			append(select, option6);
    			append(select, option7);
    			append(select, option8);
    			append(select, option9);
    			append(select, option10);
    			append(select, option11);
    			append(select, option12);
    			/*select_binding*/ ctx[64](select);
    			append(div3, t18);
    			append(div3, div1);
    			append(div1, t19);
    			append(div1, input0);
    			set_input_value(input0, /*scaling*/ ctx[6]);
    			append(div3, t20);
    			append(div3, div2);
    			append(div2, t21);
    			append(div2, input1);
    			/*input1_binding*/ ctx[66](input1);
    			append(div2, t22);
    			append(div2, button0);
    			append(div3, t24);
    			append(div3, button1);
    			append(button1, t25);
    			append(div3, t26);
    			append(div3, button2);
    			append(div3, t28);
    			append(div3, button3);
    			append(div3, t30);
    			append(div3, button4);
    			append(div3, t32);
    			append(div3, button5);
    			append(div4, t34);
    			append(div4, textarea);
    			/*textarea_binding*/ ctx[67](textarea);
    			append(div19, t35);
    			append(div19, div5);
    			info_1.block.m(div5, info_1.anchor = null);
    			info_1.mount = () => div5;
    			info_1.anchor = null;
    			/*div5_binding*/ ctx[72](div5);
    			append(div19, t36);
    			append(div19, div18);
    			append(div18, div6);
    			append(div18, t38);
    			append(div18, div17);
    			append(div17, div7);
    			append(div7, t39);
    			append(div7, input2);
    			/*input2_binding*/ ctx[73](input2);
    			append(div17, t40);
    			append(div17, div8);
    			append(div8, t41);
    			append(div8, input3);
    			/*input3_binding*/ ctx[74](input3);
    			append(div17, t42);
    			append(div17, div9);
    			append(div9, t43);
    			append(div9, input4);
    			/*input4_binding*/ ctx[75](input4);
    			append(div17, t44);
    			append(div17, div16);
    			append(div16, t45);
    			append(div16, div10);
    			append(div10, input5);
    			/*input5_binding*/ ctx[76](input5);
    			append(div16, t46);
    			append(div16, div11);
    			append(div11, input6);
    			/*input6_binding*/ ctx[77](input6);
    			append(div16, t47);
    			append(div16, div12);
    			append(div12, input7);
    			/*input7_binding*/ ctx[78](input7);
    			append(div16, t48);
    			append(div16, div13);
    			append(div13, input8);
    			/*input8_binding*/ ctx[79](input8);
    			append(div16, t49);
    			append(div16, div14);
    			append(div14, input9);
    			/*input9_binding*/ ctx[80](input9);
    			append(div16, t50);
    			append(div16, div15);
    			append(div15, input10);
    			/*input10_binding*/ ctx[81](input10);
    			append(div17, t51);
    			append(div17, button6);
    			append(div18, t53);
    			info_2.block.m(div18, info_2.anchor = null);
    			info_2.mount = () => div18;
    			info_2.anchor = null;

    			if (!mounted) {
    				dispose = [
    					listen(window_1, "mouseup", /*onMainMouseDown*/ ctx[38]),
    					listen(window_1, "contextmenu", prevent_default(contextmenu_handler)),
    					listen(window_1, "keyup", /*mainKeyUp*/ ctx[44]),
    					listen(window_1, "keydown", /*mainKeyDown*/ ctx[43]),
    					listen(div0, "click", /*openHelp*/ ctx[51]),
    					listen(select, "blur", /*reload*/ ctx[45]),
    					listen(select, "change", /*reload*/ ctx[45]),
    					listen(input0, "change", /*input0_change_input_handler*/ ctx[65]),
    					listen(input0, "input", /*input0_change_input_handler*/ ctx[65]),
    					listen(input1, "keyup", /*onDeckNameType*/ ctx[42]),
    					listen(button0, "click", /*saveDeck*/ ctx[41]),
    					listen(button1, "click", /*toggleStatistics*/ ctx[53]),
    					listen(button2, "click", /*sortDeckString*/ ctx[40]),
    					listen(button3, "click", /*copyDeck*/ ctx[48]),
    					listen(button4, "click", /*shareDeck*/ ctx[49]),
    					listen(button5, "click", /*reload*/ ctx[45]),
    					listen(textarea, "keyup", /*onTyping*/ ctx[50]),
    					listen(div6, "click", /*toggleSearch*/ ctx[52]),
    					listen(input5, "click", /*clearColorless*/ ctx[34]),
    					listen(input6, "click", /*clearColorless*/ ctx[34]),
    					listen(input7, "click", /*clearColorless*/ ctx[34]),
    					listen(input8, "click", /*clearColorless*/ ctx[34]),
    					listen(input9, "click", /*clearColorless*/ ctx[34]),
    					listen(input10, "click", /*clearForColorless*/ ctx[33]),
    					listen(button6, "click", /*searchCards*/ ctx[35])
    				];

    				mounted = true;
    			}
    		},
    		p(new_ctx, dirty) {
    			ctx = new_ctx;

    			if (!/*useCookies*/ ctx[1]) {
    				if (if_block0) {
    					if_block0.p(ctx, dirty);
    				} else {
    					if_block0 = create_if_block_13(ctx);
    					if_block0.c();
    					if_block0.m(div3, t2);
    				}
    			} else if (if_block0) {
    				if_block0.d(1);
    				if_block0 = null;
    			}

    			if (/*helpActive*/ ctx[29]) {
    				if (if_block1) ; else {
    					if_block1 = create_if_block_12(ctx);
    					if_block1.c();
    					if_block1.m(div3, t3);
    				}
    			} else if (if_block1) {
    				if_block1.d(1);
    				if_block1 = null;
    			}

    			info.ctx = ctx;

    			if (dirty[0] & /*promise*/ 512 && promise_1 !== (promise_1 = /*promise*/ ctx[9]) && handle_promise(promise_1, info)) ; else {
    				const child_ctx = ctx.slice();
    				child_ctx[89] = info.resolved;
    				info.block.p(child_ctx, dirty);
    			}

    			if (dirty[0] & /*scaling*/ 64) {
    				set_input_value(input0, /*scaling*/ ctx[6]);
    			}

    			if (dirty[0] & /*Cookies*/ 1 && input1_value_value !== (input1_value_value = /*Cookies*/ ctx[0].get("deckName") || "unknown_deck") && input1.value !== input1_value_value) {
    				input1.value = input1_value_value;
    			}

    			if (dirty[0] & /*statisticsActive*/ 32 && t25_value !== (t25_value = (/*statisticsActive*/ ctx[5]
    			? "hide statistics"
    			: "show statistics") + "")) set_data(t25, t25_value);

    			info_1.ctx = ctx;

    			if (dirty[0] & /*promise*/ 512 && promise_2 !== (promise_2 = /*promise*/ ctx[9]) && handle_promise(promise_2, info_1)) ; else {
    				const child_ctx = ctx.slice();
    				child_ctx[89] = info_1.resolved;
    				info_1.block.p(child_ctx, dirty);
    			}

    			info_2.ctx = ctx;

    			if (dirty[0] & /*cardSearchPromise*/ 1024 && promise_3 !== (promise_3 = /*cardSearchPromise*/ ctx[10]) && handle_promise(promise_3, info_2)) ; else {
    				const child_ctx = ctx.slice();
    				child_ctx[84] = info_2.resolved;
    				info_2.block.p(child_ctx, dirty);
    			}

    			if (dirty[0] & /*cardSearchActive*/ 16) {
    				toggle_class(div18, "hide", !/*cardSearchActive*/ ctx[4]);
    			}
    		},
    		i: noop,
    		o: noop,
    		d(detaching) {
    			if (detaching) detach(div19);
    			if (if_block0) if_block0.d();
    			if (if_block1) if_block1.d();
    			info.block.d();
    			info.token = null;
    			info = null;
    			/*select_binding*/ ctx[64](null);
    			/*input1_binding*/ ctx[66](null);
    			/*textarea_binding*/ ctx[67](null);
    			info_1.block.d();
    			info_1.token = null;
    			info_1 = null;
    			/*div5_binding*/ ctx[72](null);
    			/*input2_binding*/ ctx[73](null);
    			/*input3_binding*/ ctx[74](null);
    			/*input4_binding*/ ctx[75](null);
    			/*input5_binding*/ ctx[76](null);
    			/*input6_binding*/ ctx[77](null);
    			/*input7_binding*/ ctx[78](null);
    			/*input8_binding*/ ctx[79](null);
    			/*input9_binding*/ ctx[80](null);
    			/*input10_binding*/ ctx[81](null);
    			info_2.block.d();
    			info_2.token = null;
    			info_2 = null;
    			mounted = false;
    			run_all(dispose);
    		}
    	};
    }

    const CARD_RATIO = 0.71764705882;
    let _height = 300;

    function getHeight(mana, groups) {
    	return 100 * (mana / Math.max(...groups["manaCurve"]));
    }

    const contextmenu_handler = () => false;

    function instance($$self, $$props, $$invalidate) {
    	let _width = Math.floor(_height * CARD_RATIO);
    	let useCookies = true;

    	function enableSaving() {
    		$$invalidate(1, useCookies = true);
    		js_cookie.set("useCookies", true);
    		saveAllToCookies();
    	}

    	const oldSet = js_cookie.set;

    	js_cookie.set = (a, b) => {
    		if (useCookies) oldSet(a, b); else {
    			console.log("saving disabled");
    		}
    	};

    	let height = _height;
    	let width = _width;
    	let cardSearchActive = true;
    	let statisticsActive = true;
    	let scaling = 100;
    	let display;
    	let devotionHighlight = -1;

    	function highlightDevotion(mana) {
    		if (devotionHighlight == mana) $$invalidate(8, devotionHighlight = -1); else $$invalidate(8, devotionHighlight = mana + "");
    	}

    	let promise = new Promise(resolve => resolve([]));

    	let cardSearchPromise = new Promise(resolve => resolve({
    			data: [],
    			has_more: false,
    			total_cards: 0
    		}));

    	let input;
    	let format;
    	let progress = 0;
    	let all = 0;
    	let spName;
    	let spText;
    	let spType;
    	let spEDHBlue;
    	let spEDHBlack;
    	let spEDHRed;
    	let spEDHWhite;
    	let spEDHGreen;
    	let spEDHColorless;
    	let deckSeach = null;
    	let deckSearchInput;

    	function changeDeckSearch(groups) {
    		if (!groups) returndeckSeach = null;
    		let s = deckSearchInput.value;
    		if (!s) return $$invalidate(24, deckSeach = null);
    		s = s.trim().replace(/\s\s+/gm, " ").toLowerCase().replace(/\s/gm, "(.|\n)*");

    		/*.split("+")
      .join("|");*/
    		console.log("search:", s);

    		const result = [];
    		let count = 0;
    		const r = new RegExp(s, "gm");

    		for (let group of groups) {
    			for (let card of group.cards) {
    				if (!card || !card.data || !card.data.oracle_text) continue;
    				if (!card.data.oracle_text.toLowerCase().match(r)) continue;
    				count += card.count;
    				result.push(card);
    			}
    		}

    		$$invalidate(24, deckSeach = [
    			{
    				cards: result,
    				cost: 0,
    				count,
    				deck: {},
    				mana: {
    					black: 0,
    					blue: 0,
    					colorless: 0,
    					generic: 240,
    					green: 0,
    					red: 0,
    					sum: 240,
    					white: 0
    				},
    				manaCurve: [],
    				name: "search result"
    			}
    		]);
    	}

    	function clearForColorless() {
    		$$invalidate(18, spEDHBlue.checked = false, spEDHBlue);
    		$$invalidate(19, spEDHBlack.checked = false, spEDHBlack);
    		$$invalidate(20, spEDHRed.checked = false, spEDHRed);
    		$$invalidate(21, spEDHWhite.checked = false, spEDHWhite);
    		$$invalidate(22, spEDHGreen.checked = false, spEDHGreen);
    	}

    	function clearColorless() {
    		$$invalidate(23, spEDHColorless.checked = false, spEDHColorless);
    	}

    	function searchCards(nextUrl) {
    		if (typeof nextUrl == "string") {
    			$$invalidate(10, cardSearchPromise = cardLoader.search(nextUrl));
    			return;
    		}

    		const colors = new Set();
    		if (spEDHColorless.checked) colors.add("C");
    		if (spEDHBlue.checked) colors.add("U");
    		if (spEDHBlack.checked) colors.add("B");
    		if (spEDHRed.checked) colors.add("R");
    		if (spEDHWhite.checked) colors.add("W");
    		if (spEDHGreen.checked) colors.add("G");

    		$$invalidate(10, cardSearchPromise = cardLoader.search({
    			name: spName.value,
    			text: spText.value,
    			type: spType.value,
    			edhcolors: colors
    		}));
    	}

    	let currentCardContext = null;

    	function cardContextMenu(evt, card, groups) {
    		evt.preventDefault();

    		if (evt.which == 3 && groups.length > 1) {
    			// right click
    			$$invalidate(26, currentCardContext = card);
    		}

    		return false;
    	}

    	function cardContextClick(evt, card, group) {
    		$$invalidate(26, currentCardContext = null);
    		evt.stopPropagation();
    		evt.preventDefault();
    		let deck = input.value;
    		const r = new RegExp(`^.*${card.name}.*$`, "gmi");
    		deck = deck.replace(r, "");
    		let index = deck.indexOf(group.name);
    		if (index < 0) return;
    		index += group.name.length;
    		const insert = "\n" + card.count + " " + card.name;
    		deck = deck.slice(0, index) + insert + deck.slice(index);
    		$$invalidate(11, input.value = deck, input);
    		reload();
    	}

    	function onMainMouseDown(evt) {
    		$$invalidate(26, currentCardContext = null);
    	}

    	let hiddenGroups = new Set();

    	function toggleGroupVisibility(group) {
    		if (hiddenGroups.has(group.name)) hiddenGroups.delete(group.name); else hiddenGroups.add(group.name);
    		$$invalidate(27, hiddenGroups);
    	}

    	function sp(p, a) {
    		$$invalidate(13, progress = p);
    		$$invalidate(14, all = a);
    	}

    	function resetDeckSearch() {
    		$$invalidate(24, deckSeach = null);
    		if (!deckSearchInput) return;
    		$$invalidate(25, deckSearchInput.value = "", deckSearchInput);
    	}

    	function sortDeckString() {
    		$$invalidate(9, promise = cardLoader.sort(input.value || "", (p, a) => {
    			resetDeckSearch();
    			sp(p, a);
    		}).catch(e => {
    			console.error(e);
    			throw e;
    		}).then(res => {
    			$$invalidate(11, input.value = res, input);
    			return update({ keyCode: 27 }, true);
    		}));
    	}

    	let deckNameInput;

    	function saveDeck() {
    		if (!deckNameInput) return;
    		const filename = (deckNameInput.value || "unknown deck") + ".txt";
    		const deck = input.value;
    		const blob = new Blob([deck], { type: "text/plain;charset=utf-8" });

    		if (window.navigator.msSaveOrOpenBlob) // IE10+
    		window.navigator.msSaveOrOpenBlob(blob, filename); else {
    			// Others
    			var a = document.createElement("a"), url = URL.createObjectURL(blob);

    			a.href = url;
    			a.download = filename;
    			document.body.appendChild(a);
    			a.click();

    			setTimeout(
    				function () {
    					document.body.removeChild(a);
    					window.URL.revokeObjectURL(url);
    				},
    				0
    			);
    		}
    	}

    	function onDeckNameType() {
    		js_cookie.set("deckName", deckNameInput.value);
    	}

    	function mainKeyDown(evt) {
    		if (evt.ctrlKey || evt.metaKey) {
    			switch (evt.which) {
    				case 83:
    					// s
    					evt.preventDefault();
    					evt.stopPropagation();
    					saveDeck();
    					break;
    			}
    		}
    	}

    	function mainKeyUp(evt) {
    		update(evt);
    	}

    	async function update(evt) {
    		if (evt.keyCode !== 27) return;
    		let scrollPosition = 0;

    		if (display) {
    			scrollPosition = display.scrollTop;
    		}

    		$$invalidate(9, promise = cardLoader.createDeck(input.value || "", (p, a) => {
    			resetDeckSearch();
    			sp(p, a);
    		}).catch(e => {
    			console.error(e);
    			throw e;
    		}).then(res => {
    			$$invalidate(11, input.value = res.corrected, input);
    			js_cookie.set("deck", input.value);

    			setTimeout(() => {
    				$$invalidate(7, display.scrollTop = scrollPosition, display);
    			});

    			return res;
    		}));

    		return promise;
    	}

    	function reload() {
    		resetDeckSearch();
    		update({ keyCode: 27 });
    	}

    	function appendCard(name) {
    		if (!name) return;
    		resetDeckSearch();
    		$$invalidate(11, input.value = input.value + "\n1 " + name, input);
    		reload();
    	}

    	function remove(card) {
    		const r = new RegExp(`^.*${card.name}.*$`, "gm");
    		$$invalidate(11, input.value = input.value.replace(r, "// " + card.count + " " + card.name), input);

    		$$invalidate(9, promise = cardLoader.createDeck(input.value || "", (p, a) => sp(p, a)).catch(e => {
    			console.error(e);
    			throw e;
    		}));
    	}

    	function copyDeck() {
    		const deck = input.value;
    		$$invalidate(11, input.value = input.value.replace(/#.*|\/\/.*/gm, "\n"), input);
    		input.select();
    		input.setSelectionRange(0, 99999);
    		document.execCommand("copy");
    		$$invalidate(11, input.value = deck, input);
    		alert("Deck copied to clipboard");
    	}

    	let helpActive = false;

    	onMount(async () => {
    		const defaultDeck = `#lands
mountain
2 plains
3 swamps
# main deck
20 blightsteel colossus`;

    		$$invalidate(1, useCookies = js_cookie.get("useCookies"));
    		const urlParams = new URLSearchParams(window.location.search);
    		const sharedDeck = urlParams.get("d");

    		let start = useCookies
    		? js_cookie.get("deck") || defaultDeck
    		: defaultDeck;

    		if (sharedDeck) {
    			$$invalidate(1, useCookies = false);
    			const buffer = new Uint8Array(sharedDeck.split(","));
    			const decompressed = lzutf8.decompress(buffer);

    			if (decompressed) {
    				start = decompressed;
    			}
    		}

    		urlParams.delete("d");
    		window.history.replaceState({}, "", `${window.location.pathname}`);

    		//    window.history.replaceState(
    		//   {},
    		//   '',
    		//   `${window.location.pathname}?${params}${window.location.hash}`,
    		// )
    		//  helpActive = Cookies.get("helpActive") == "true";
    		// console.log("help:", Cookies.get("helpActive"));
    		$$invalidate(4, cardSearchActive = js_cookie.get("cardSearchActive") == "true");

    		console.log("search:", js_cookie.get("cardSearchActive"));
    		$$invalidate(5, statisticsActive = js_cookie.get("statisticsActive") == "true");
    		console.log("statistics:", js_cookie.get("statisticsActive"));
    		$$invalidate(11, input.value = start, input);
    		reload();
    	}); /* console.log("STSFSDF", Cookies.get("deck")),
      (promise = CardLoader.createDeck(start, (p, a) => sp(p, a)));*/

    	function saveAllToCookies() {
    		js_cookie.set("cardSearchActive", cardSearchActive);
    		js_cookie.set("statisticsActive", statisticsActive);
    		js_cookie.set("deck", input.value);
    	}

    	function shareDeck() {
    		if (!input || !input.value) {
    			alert("The deck is empty, nothing copied");
    			return;
    		}

    		const compressed = lzutf8.compress(input.value || "empty deck shared");

    		//window.history.pushState("page2", "Title", "?d=" + compressed);
    		console.log(`${window.location.pathname}?d=${compressed}`);

    		const el = document.createElement("textarea");
    		el.value = `${window.location.href}?d=${compressed}`;
    		document.body.appendChild(el);
    		el.select();
    		document.execCommand("copy");
    		document.body.removeChild(el);
    		alert("link to deck copied");
    	}

    	function onTyping() {
    		js_cookie.set("deck", input.value, { expires: 7 });
    	}

    	function openHelp() {
    		$$invalidate(29, helpActive = !helpActive);
    	} //  Cookies.set("helpActive", helpActive + "");

    	function toggleSearch() {
    		$$invalidate(4, cardSearchActive = !cardSearchActive);
    		js_cookie.set("cardSearchActive", cardSearchActive + "");
    	}

    	function toggleStatistics() {
    		$$invalidate(5, statisticsActive = !statisticsActive);
    		js_cookie.set("statisticsActive", statisticsActive + "");
    	}

    	const click_handler = i => highlightDevotion(i);
    	const click_handler_1 = i => highlightDevotion(i);

    	function input_1_binding($$value) {
    		binding_callbacks[$$value ? "unshift" : "push"](() => {
    			$$invalidate(25, deckSearchInput = $$value);
    		});
    	}

    	const keyup_handler = groups => changeDeckSearch(groups);

    	function select_binding($$value) {
    		binding_callbacks[$$value ? "unshift" : "push"](() => {
    			$$invalidate(12, format = $$value);
    		});
    	}

    	function input0_change_input_handler() {
    		scaling = to_number(this.value);
    		$$invalidate(6, scaling);
    	}

    	function input1_binding($$value) {
    		binding_callbacks[$$value ? "unshift" : "push"](() => {
    			$$invalidate(28, deckNameInput = $$value);
    		});
    	}

    	function textarea_binding($$value) {
    		binding_callbacks[$$value ? "unshift" : "push"](() => {
    			$$invalidate(11, input = $$value);
    		});
    	}

    	const click_handler_2 = group => toggleGroupVisibility(group);
    	const mouseup_handler = (card, groups, evt) => cardContextMenu(evt, card, groups);
    	const dblclick_handler = card => remove(card);
    	const mousedown_handler = (card, subGroup, evt) => cardContextClick(evt, card, subGroup);

    	function div5_binding($$value) {
    		binding_callbacks[$$value ? "unshift" : "push"](() => {
    			$$invalidate(7, display = $$value);
    		});
    	}

    	function input2_binding($$value) {
    		binding_callbacks[$$value ? "unshift" : "push"](() => {
    			$$invalidate(15, spName = $$value);
    		});
    	}

    	function input3_binding($$value) {
    		binding_callbacks[$$value ? "unshift" : "push"](() => {
    			$$invalidate(16, spText = $$value);
    		});
    	}

    	function input4_binding($$value) {
    		binding_callbacks[$$value ? "unshift" : "push"](() => {
    			$$invalidate(17, spType = $$value);
    		});
    	}

    	function input5_binding($$value) {
    		binding_callbacks[$$value ? "unshift" : "push"](() => {
    			$$invalidate(18, spEDHBlue = $$value);
    		});
    	}

    	function input6_binding($$value) {
    		binding_callbacks[$$value ? "unshift" : "push"](() => {
    			$$invalidate(19, spEDHBlack = $$value);
    		});
    	}

    	function input7_binding($$value) {
    		binding_callbacks[$$value ? "unshift" : "push"](() => {
    			$$invalidate(20, spEDHRed = $$value);
    		});
    	}

    	function input8_binding($$value) {
    		binding_callbacks[$$value ? "unshift" : "push"](() => {
    			$$invalidate(21, spEDHWhite = $$value);
    		});
    	}

    	function input9_binding($$value) {
    		binding_callbacks[$$value ? "unshift" : "push"](() => {
    			$$invalidate(22, spEDHGreen = $$value);
    		});
    	}

    	function input10_binding($$value) {
    		binding_callbacks[$$value ? "unshift" : "push"](() => {
    			$$invalidate(23, spEDHColorless = $$value);
    		});
    	}

    	const dblclick_handler_1 = card => appendCard(card.name);
    	const click_handler_3 = result => searchCards(result.next_page);

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty[0] & /*scaling*/ 64) {
    			$: {
    				const s = Math.floor(scaling || 100) / 100;
    				$$invalidate(2, height = _height * s);
    				$$invalidate(3, width = _width * s);
    			}
    		}
    	};

    	return [
    		js_cookie,
    		useCookies,
    		height,
    		width,
    		cardSearchActive,
    		statisticsActive,
    		scaling,
    		display,
    		devotionHighlight,
    		promise,
    		cardSearchPromise,
    		input,
    		format,
    		progress,
    		all,
    		spName,
    		spText,
    		spType,
    		spEDHBlue,
    		spEDHBlack,
    		spEDHRed,
    		spEDHWhite,
    		spEDHGreen,
    		spEDHColorless,
    		deckSeach,
    		deckSearchInput,
    		currentCardContext,
    		hiddenGroups,
    		deckNameInput,
    		helpActive,
    		enableSaving,
    		highlightDevotion,
    		changeDeckSearch,
    		clearForColorless,
    		clearColorless,
    		searchCards,
    		cardContextMenu,
    		cardContextClick,
    		onMainMouseDown,
    		toggleGroupVisibility,
    		sortDeckString,
    		saveDeck,
    		onDeckNameType,
    		mainKeyDown,
    		mainKeyUp,
    		reload,
    		appendCard,
    		remove,
    		copyDeck,
    		shareDeck,
    		onTyping,
    		openHelp,
    		toggleSearch,
    		toggleStatistics,
    		_width,
    		oldSet,
    		sp,
    		resetDeckSearch,
    		update,
    		saveAllToCookies,
    		click_handler,
    		click_handler_1,
    		input_1_binding,
    		keyup_handler,
    		select_binding,
    		input0_change_input_handler,
    		input1_binding,
    		textarea_binding,
    		click_handler_2,
    		mouseup_handler,
    		dblclick_handler,
    		mousedown_handler,
    		div5_binding,
    		input2_binding,
    		input3_binding,
    		input4_binding,
    		input5_binding,
    		input6_binding,
    		input7_binding,
    		input8_binding,
    		input9_binding,
    		input10_binding,
    		dblclick_handler_1,
    		click_handler_3
    	];
    }

    class Editor extends SvelteComponent {
    	constructor(options) {
    		super();
    		if (!document_1.getElementById("svelte-xx59ef-style")) add_css();
    		init(this, options, instance, create_fragment, safe_not_equal, {}, [-1, -1, -1, -1]);
    	}
    }

    const renderTarget = new Editor({
      target: document.body,
      props: {
        test: "sdfdsf"
      }
    });

}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
